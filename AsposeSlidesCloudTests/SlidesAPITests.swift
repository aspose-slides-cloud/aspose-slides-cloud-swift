/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2020 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


import XCTest
@testable import AsposeSlidesCloud

class SlidesAPITests : XCTestCase {
    static var allTests : [(String, (SlidesAPITests) -> () -> ())] = [
        ("testCopyFile", testCopyFile),
        ("testCopyFileInvalidSrcPath", testCopyFileInvalidSrcPath),
        ("testCopyFileInvalidDestPath", testCopyFileInvalidDestPath),
        ("testCopyFileInvalidSrcStorageName", testCopyFileInvalidSrcStorageName),
        ("testCopyFileInvalidDestStorageName", testCopyFileInvalidDestStorageName),
        ("testCopyFileInvalidVersionId", testCopyFileInvalidVersionId),
        ("testCopyFolder", testCopyFolder),
        ("testCopyFolderInvalidSrcPath", testCopyFolderInvalidSrcPath),
        ("testCopyFolderInvalidDestPath", testCopyFolderInvalidDestPath),
        ("testCopyFolderInvalidSrcStorageName", testCopyFolderInvalidSrcStorageName),
        ("testCopyFolderInvalidDestStorageName", testCopyFolderInvalidDestStorageName),
        ("testCreateFolder", testCreateFolder),
        ("testCreateFolderInvalidPath", testCreateFolderInvalidPath),
        ("testCreateFolderInvalidStorageName", testCreateFolderInvalidStorageName),
        ("testDeleteChartCategory", testDeleteChartCategory),
        ("testDeleteChartCategoryInvalidName", testDeleteChartCategoryInvalidName),
        ("testDeleteChartCategoryInvalidSlideIndex", testDeleteChartCategoryInvalidSlideIndex),
        ("testDeleteChartCategoryInvalidShapeIndex", testDeleteChartCategoryInvalidShapeIndex),
        ("testDeleteChartCategoryInvalidCategoryIndex", testDeleteChartCategoryInvalidCategoryIndex),
        ("testDeleteChartCategoryInvalidPassword", testDeleteChartCategoryInvalidPassword),
        ("testDeleteChartCategoryInvalidFolder", testDeleteChartCategoryInvalidFolder),
        ("testDeleteChartCategoryInvalidStorage", testDeleteChartCategoryInvalidStorage),
        ("testDeleteChartDataPoint", testDeleteChartDataPoint),
        ("testDeleteChartDataPointInvalidName", testDeleteChartDataPointInvalidName),
        ("testDeleteChartDataPointInvalidSlideIndex", testDeleteChartDataPointInvalidSlideIndex),
        ("testDeleteChartDataPointInvalidShapeIndex", testDeleteChartDataPointInvalidShapeIndex),
        ("testDeleteChartDataPointInvalidSeriesIndex", testDeleteChartDataPointInvalidSeriesIndex),
        ("testDeleteChartDataPointInvalidPointIndex", testDeleteChartDataPointInvalidPointIndex),
        ("testDeleteChartDataPointInvalidPassword", testDeleteChartDataPointInvalidPassword),
        ("testDeleteChartDataPointInvalidFolder", testDeleteChartDataPointInvalidFolder),
        ("testDeleteChartDataPointInvalidStorage", testDeleteChartDataPointInvalidStorage),
        ("testDeleteChartSeries", testDeleteChartSeries),
        ("testDeleteChartSeriesInvalidName", testDeleteChartSeriesInvalidName),
        ("testDeleteChartSeriesInvalidSlideIndex", testDeleteChartSeriesInvalidSlideIndex),
        ("testDeleteChartSeriesInvalidShapeIndex", testDeleteChartSeriesInvalidShapeIndex),
        ("testDeleteChartSeriesInvalidSeriesIndex", testDeleteChartSeriesInvalidSeriesIndex),
        ("testDeleteChartSeriesInvalidPassword", testDeleteChartSeriesInvalidPassword),
        ("testDeleteChartSeriesInvalidFolder", testDeleteChartSeriesInvalidFolder),
        ("testDeleteChartSeriesInvalidStorage", testDeleteChartSeriesInvalidStorage),
        ("testDeleteFile", testDeleteFile),
        ("testDeleteFileInvalidPath", testDeleteFileInvalidPath),
        ("testDeleteFileInvalidStorageName", testDeleteFileInvalidStorageName),
        ("testDeleteFileInvalidVersionId", testDeleteFileInvalidVersionId),
        ("testDeleteFolder", testDeleteFolder),
        ("testDeleteFolderInvalidPath", testDeleteFolderInvalidPath),
        ("testDeleteFolderInvalidStorageName", testDeleteFolderInvalidStorageName),
        ("testDeleteFolderInvalidRecursive", testDeleteFolderInvalidRecursive),
        ("testDeleteNotesSlide", testDeleteNotesSlide),
        ("testDeleteNotesSlideInvalidName", testDeleteNotesSlideInvalidName),
        ("testDeleteNotesSlideInvalidSlideIndex", testDeleteNotesSlideInvalidSlideIndex),
        ("testDeleteNotesSlideInvalidPassword", testDeleteNotesSlideInvalidPassword),
        ("testDeleteNotesSlideInvalidFolder", testDeleteNotesSlideInvalidFolder),
        ("testDeleteNotesSlideInvalidStorage", testDeleteNotesSlideInvalidStorage),
        ("testDeleteNotesSlideParagraph", testDeleteNotesSlideParagraph),
        ("testDeleteNotesSlideParagraphInvalidName", testDeleteNotesSlideParagraphInvalidName),
        ("testDeleteNotesSlideParagraphInvalidSlideIndex", testDeleteNotesSlideParagraphInvalidSlideIndex),
        ("testDeleteNotesSlideParagraphInvalidShapeIndex", testDeleteNotesSlideParagraphInvalidShapeIndex),
        ("testDeleteNotesSlideParagraphInvalidParagraphIndex", testDeleteNotesSlideParagraphInvalidParagraphIndex),
        ("testDeleteNotesSlideParagraphInvalidPassword", testDeleteNotesSlideParagraphInvalidPassword),
        ("testDeleteNotesSlideParagraphInvalidFolder", testDeleteNotesSlideParagraphInvalidFolder),
        ("testDeleteNotesSlideParagraphInvalidStorage", testDeleteNotesSlideParagraphInvalidStorage),
        ("testDeleteNotesSlideParagraphs", testDeleteNotesSlideParagraphs),
        ("testDeleteNotesSlideParagraphsInvalidName", testDeleteNotesSlideParagraphsInvalidName),
        ("testDeleteNotesSlideParagraphsInvalidSlideIndex", testDeleteNotesSlideParagraphsInvalidSlideIndex),
        ("testDeleteNotesSlideParagraphsInvalidShapeIndex", testDeleteNotesSlideParagraphsInvalidShapeIndex),
        ("testDeleteNotesSlideParagraphsInvalidParagraphs", testDeleteNotesSlideParagraphsInvalidParagraphs),
        ("testDeleteNotesSlideParagraphsInvalidPassword", testDeleteNotesSlideParagraphsInvalidPassword),
        ("testDeleteNotesSlideParagraphsInvalidFolder", testDeleteNotesSlideParagraphsInvalidFolder),
        ("testDeleteNotesSlideParagraphsInvalidStorage", testDeleteNotesSlideParagraphsInvalidStorage),
        ("testDeleteNotesSlidePortion", testDeleteNotesSlidePortion),
        ("testDeleteNotesSlidePortionInvalidName", testDeleteNotesSlidePortionInvalidName),
        ("testDeleteNotesSlidePortionInvalidSlideIndex", testDeleteNotesSlidePortionInvalidSlideIndex),
        ("testDeleteNotesSlidePortionInvalidShapeIndex", testDeleteNotesSlidePortionInvalidShapeIndex),
        ("testDeleteNotesSlidePortionInvalidParagraphIndex", testDeleteNotesSlidePortionInvalidParagraphIndex),
        ("testDeleteNotesSlidePortionInvalidPortionIndex", testDeleteNotesSlidePortionInvalidPortionIndex),
        ("testDeleteNotesSlidePortionInvalidPassword", testDeleteNotesSlidePortionInvalidPassword),
        ("testDeleteNotesSlidePortionInvalidFolder", testDeleteNotesSlidePortionInvalidFolder),
        ("testDeleteNotesSlidePortionInvalidStorage", testDeleteNotesSlidePortionInvalidStorage),
        ("testDeleteNotesSlidePortions", testDeleteNotesSlidePortions),
        ("testDeleteNotesSlidePortionsInvalidName", testDeleteNotesSlidePortionsInvalidName),
        ("testDeleteNotesSlidePortionsInvalidSlideIndex", testDeleteNotesSlidePortionsInvalidSlideIndex),
        ("testDeleteNotesSlidePortionsInvalidShapeIndex", testDeleteNotesSlidePortionsInvalidShapeIndex),
        ("testDeleteNotesSlidePortionsInvalidParagraphIndex", testDeleteNotesSlidePortionsInvalidParagraphIndex),
        ("testDeleteNotesSlidePortionsInvalidPortions", testDeleteNotesSlidePortionsInvalidPortions),
        ("testDeleteNotesSlidePortionsInvalidPassword", testDeleteNotesSlidePortionsInvalidPassword),
        ("testDeleteNotesSlidePortionsInvalidFolder", testDeleteNotesSlidePortionsInvalidFolder),
        ("testDeleteNotesSlidePortionsInvalidStorage", testDeleteNotesSlidePortionsInvalidStorage),
        ("testDeleteNotesSlideShape", testDeleteNotesSlideShape),
        ("testDeleteNotesSlideShapeInvalidName", testDeleteNotesSlideShapeInvalidName),
        ("testDeleteNotesSlideShapeInvalidSlideIndex", testDeleteNotesSlideShapeInvalidSlideIndex),
        ("testDeleteNotesSlideShapeInvalidShapeIndex", testDeleteNotesSlideShapeInvalidShapeIndex),
        ("testDeleteNotesSlideShapeInvalidPassword", testDeleteNotesSlideShapeInvalidPassword),
        ("testDeleteNotesSlideShapeInvalidFolder", testDeleteNotesSlideShapeInvalidFolder),
        ("testDeleteNotesSlideShapeInvalidStorage", testDeleteNotesSlideShapeInvalidStorage),
        ("testDeleteNotesSlideShapes", testDeleteNotesSlideShapes),
        ("testDeleteNotesSlideShapesInvalidName", testDeleteNotesSlideShapesInvalidName),
        ("testDeleteNotesSlideShapesInvalidSlideIndex", testDeleteNotesSlideShapesInvalidSlideIndex),
        ("testDeleteNotesSlideShapesInvalidShapes", testDeleteNotesSlideShapesInvalidShapes),
        ("testDeleteNotesSlideShapesInvalidPassword", testDeleteNotesSlideShapesInvalidPassword),
        ("testDeleteNotesSlideShapesInvalidFolder", testDeleteNotesSlideShapesInvalidFolder),
        ("testDeleteNotesSlideShapesInvalidStorage", testDeleteNotesSlideShapesInvalidStorage),
        ("testDeleteParagraph", testDeleteParagraph),
        ("testDeleteParagraphInvalidName", testDeleteParagraphInvalidName),
        ("testDeleteParagraphInvalidSlideIndex", testDeleteParagraphInvalidSlideIndex),
        ("testDeleteParagraphInvalidShapeIndex", testDeleteParagraphInvalidShapeIndex),
        ("testDeleteParagraphInvalidParagraphIndex", testDeleteParagraphInvalidParagraphIndex),
        ("testDeleteParagraphInvalidPassword", testDeleteParagraphInvalidPassword),
        ("testDeleteParagraphInvalidFolder", testDeleteParagraphInvalidFolder),
        ("testDeleteParagraphInvalidStorage", testDeleteParagraphInvalidStorage),
        ("testDeleteParagraphs", testDeleteParagraphs),
        ("testDeleteParagraphsInvalidName", testDeleteParagraphsInvalidName),
        ("testDeleteParagraphsInvalidSlideIndex", testDeleteParagraphsInvalidSlideIndex),
        ("testDeleteParagraphsInvalidShapeIndex", testDeleteParagraphsInvalidShapeIndex),
        ("testDeleteParagraphsInvalidParagraphs", testDeleteParagraphsInvalidParagraphs),
        ("testDeleteParagraphsInvalidPassword", testDeleteParagraphsInvalidPassword),
        ("testDeleteParagraphsInvalidFolder", testDeleteParagraphsInvalidFolder),
        ("testDeleteParagraphsInvalidStorage", testDeleteParagraphsInvalidStorage),
        ("testDeletePortion", testDeletePortion),
        ("testDeletePortionInvalidName", testDeletePortionInvalidName),
        ("testDeletePortionInvalidSlideIndex", testDeletePortionInvalidSlideIndex),
        ("testDeletePortionInvalidShapeIndex", testDeletePortionInvalidShapeIndex),
        ("testDeletePortionInvalidParagraphIndex", testDeletePortionInvalidParagraphIndex),
        ("testDeletePortionInvalidPortionIndex", testDeletePortionInvalidPortionIndex),
        ("testDeletePortionInvalidPassword", testDeletePortionInvalidPassword),
        ("testDeletePortionInvalidFolder", testDeletePortionInvalidFolder),
        ("testDeletePortionInvalidStorage", testDeletePortionInvalidStorage),
        ("testDeletePortions", testDeletePortions),
        ("testDeletePortionsInvalidName", testDeletePortionsInvalidName),
        ("testDeletePortionsInvalidSlideIndex", testDeletePortionsInvalidSlideIndex),
        ("testDeletePortionsInvalidShapeIndex", testDeletePortionsInvalidShapeIndex),
        ("testDeletePortionsInvalidParagraphIndex", testDeletePortionsInvalidParagraphIndex),
        ("testDeletePortionsInvalidPortions", testDeletePortionsInvalidPortions),
        ("testDeletePortionsInvalidPassword", testDeletePortionsInvalidPassword),
        ("testDeletePortionsInvalidFolder", testDeletePortionsInvalidFolder),
        ("testDeletePortionsInvalidStorage", testDeletePortionsInvalidStorage),
        ("testDeleteSection", testDeleteSection),
        ("testDeleteSectionInvalidName", testDeleteSectionInvalidName),
        ("testDeleteSectionInvalidSectionIndex", testDeleteSectionInvalidSectionIndex),
        ("testDeleteSectionInvalidWithSlides", testDeleteSectionInvalidWithSlides),
        ("testDeleteSectionInvalidPassword", testDeleteSectionInvalidPassword),
        ("testDeleteSectionInvalidFolder", testDeleteSectionInvalidFolder),
        ("testDeleteSectionInvalidStorage", testDeleteSectionInvalidStorage),
        ("testDeleteSections", testDeleteSections),
        ("testDeleteSectionsInvalidName", testDeleteSectionsInvalidName),
        ("testDeleteSectionsInvalidSections", testDeleteSectionsInvalidSections),
        ("testDeleteSectionsInvalidWithSlides", testDeleteSectionsInvalidWithSlides),
        ("testDeleteSectionsInvalidPassword", testDeleteSectionsInvalidPassword),
        ("testDeleteSectionsInvalidFolder", testDeleteSectionsInvalidFolder),
        ("testDeleteSectionsInvalidStorage", testDeleteSectionsInvalidStorage),
        ("testDeleteSlideAnimation", testDeleteSlideAnimation),
        ("testDeleteSlideAnimationInvalidName", testDeleteSlideAnimationInvalidName),
        ("testDeleteSlideAnimationInvalidSlideIndex", testDeleteSlideAnimationInvalidSlideIndex),
        ("testDeleteSlideAnimationInvalidPassword", testDeleteSlideAnimationInvalidPassword),
        ("testDeleteSlideAnimationInvalidFolder", testDeleteSlideAnimationInvalidFolder),
        ("testDeleteSlideAnimationInvalidStorage", testDeleteSlideAnimationInvalidStorage),
        ("testDeleteSlideAnimationEffect", testDeleteSlideAnimationEffect),
        ("testDeleteSlideAnimationEffectInvalidName", testDeleteSlideAnimationEffectInvalidName),
        ("testDeleteSlideAnimationEffectInvalidSlideIndex", testDeleteSlideAnimationEffectInvalidSlideIndex),
        ("testDeleteSlideAnimationEffectInvalidEffectIndex", testDeleteSlideAnimationEffectInvalidEffectIndex),
        ("testDeleteSlideAnimationEffectInvalidPassword", testDeleteSlideAnimationEffectInvalidPassword),
        ("testDeleteSlideAnimationEffectInvalidFolder", testDeleteSlideAnimationEffectInvalidFolder),
        ("testDeleteSlideAnimationEffectInvalidStorage", testDeleteSlideAnimationEffectInvalidStorage),
        ("testDeleteSlideAnimationInteractiveSequence", testDeleteSlideAnimationInteractiveSequence),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidName", testDeleteSlideAnimationInteractiveSequenceInvalidName),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidSlideIndex", testDeleteSlideAnimationInteractiveSequenceInvalidSlideIndex),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidSequenceIndex", testDeleteSlideAnimationInteractiveSequenceInvalidSequenceIndex),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidPassword", testDeleteSlideAnimationInteractiveSequenceInvalidPassword),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidFolder", testDeleteSlideAnimationInteractiveSequenceInvalidFolder),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidStorage", testDeleteSlideAnimationInteractiveSequenceInvalidStorage),
        ("testDeleteSlideAnimationInteractiveSequenceEffect", testDeleteSlideAnimationInteractiveSequenceEffect),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidName", testDeleteSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testDeleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testDeleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndex", testDeleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidPassword", testDeleteSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidFolder", testDeleteSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidStorage", testDeleteSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testDeleteSlideAnimationInteractiveSequences", testDeleteSlideAnimationInteractiveSequences),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidName", testDeleteSlideAnimationInteractiveSequencesInvalidName),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidSlideIndex", testDeleteSlideAnimationInteractiveSequencesInvalidSlideIndex),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidPassword", testDeleteSlideAnimationInteractiveSequencesInvalidPassword),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidFolder", testDeleteSlideAnimationInteractiveSequencesInvalidFolder),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidStorage", testDeleteSlideAnimationInteractiveSequencesInvalidStorage),
        ("testDeleteSlideAnimationMainSequence", testDeleteSlideAnimationMainSequence),
        ("testDeleteSlideAnimationMainSequenceInvalidName", testDeleteSlideAnimationMainSequenceInvalidName),
        ("testDeleteSlideAnimationMainSequenceInvalidSlideIndex", testDeleteSlideAnimationMainSequenceInvalidSlideIndex),
        ("testDeleteSlideAnimationMainSequenceInvalidPassword", testDeleteSlideAnimationMainSequenceInvalidPassword),
        ("testDeleteSlideAnimationMainSequenceInvalidFolder", testDeleteSlideAnimationMainSequenceInvalidFolder),
        ("testDeleteSlideAnimationMainSequenceInvalidStorage", testDeleteSlideAnimationMainSequenceInvalidStorage),
        ("testDeleteSlideByIndex", testDeleteSlideByIndex),
        ("testDeleteSlideByIndexInvalidName", testDeleteSlideByIndexInvalidName),
        ("testDeleteSlideByIndexInvalidSlideIndex", testDeleteSlideByIndexInvalidSlideIndex),
        ("testDeleteSlideByIndexInvalidPassword", testDeleteSlideByIndexInvalidPassword),
        ("testDeleteSlideByIndexInvalidFolder", testDeleteSlideByIndexInvalidFolder),
        ("testDeleteSlideByIndexInvalidStorage", testDeleteSlideByIndexInvalidStorage),
        ("testDeleteSlideShape", testDeleteSlideShape),
        ("testDeleteSlideShapeInvalidName", testDeleteSlideShapeInvalidName),
        ("testDeleteSlideShapeInvalidSlideIndex", testDeleteSlideShapeInvalidSlideIndex),
        ("testDeleteSlideShapeInvalidShapeIndex", testDeleteSlideShapeInvalidShapeIndex),
        ("testDeleteSlideShapeInvalidPassword", testDeleteSlideShapeInvalidPassword),
        ("testDeleteSlideShapeInvalidFolder", testDeleteSlideShapeInvalidFolder),
        ("testDeleteSlideShapeInvalidStorage", testDeleteSlideShapeInvalidStorage),
        ("testDeleteSlideShapes", testDeleteSlideShapes),
        ("testDeleteSlideShapesInvalidName", testDeleteSlideShapesInvalidName),
        ("testDeleteSlideShapesInvalidSlideIndex", testDeleteSlideShapesInvalidSlideIndex),
        ("testDeleteSlideShapesInvalidShapes", testDeleteSlideShapesInvalidShapes),
        ("testDeleteSlideShapesInvalidPassword", testDeleteSlideShapesInvalidPassword),
        ("testDeleteSlideShapesInvalidFolder", testDeleteSlideShapesInvalidFolder),
        ("testDeleteSlideShapesInvalidStorage", testDeleteSlideShapesInvalidStorage),
        ("testDeleteSlideSubshape", testDeleteSlideSubshape),
        ("testDeleteSlideSubshapeInvalidName", testDeleteSlideSubshapeInvalidName),
        ("testDeleteSlideSubshapeInvalidSlideIndex", testDeleteSlideSubshapeInvalidSlideIndex),
        ("testDeleteSlideSubshapeInvalidPath", testDeleteSlideSubshapeInvalidPath),
        ("testDeleteSlideSubshapeInvalidShapeIndex", testDeleteSlideSubshapeInvalidShapeIndex),
        ("testDeleteSlideSubshapeInvalidPassword", testDeleteSlideSubshapeInvalidPassword),
        ("testDeleteSlideSubshapeInvalidFolder", testDeleteSlideSubshapeInvalidFolder),
        ("testDeleteSlideSubshapeInvalidStorage", testDeleteSlideSubshapeInvalidStorage),
        ("testDeleteSlideSubshapes", testDeleteSlideSubshapes),
        ("testDeleteSlideSubshapesInvalidName", testDeleteSlideSubshapesInvalidName),
        ("testDeleteSlideSubshapesInvalidSlideIndex", testDeleteSlideSubshapesInvalidSlideIndex),
        ("testDeleteSlideSubshapesInvalidPath", testDeleteSlideSubshapesInvalidPath),
        ("testDeleteSlideSubshapesInvalidShapes", testDeleteSlideSubshapesInvalidShapes),
        ("testDeleteSlideSubshapesInvalidPassword", testDeleteSlideSubshapesInvalidPassword),
        ("testDeleteSlideSubshapesInvalidFolder", testDeleteSlideSubshapesInvalidFolder),
        ("testDeleteSlideSubshapesInvalidStorage", testDeleteSlideSubshapesInvalidStorage),
        ("testDeleteSlidesCleanSlidesList", testDeleteSlidesCleanSlidesList),
        ("testDeleteSlidesCleanSlidesListInvalidName", testDeleteSlidesCleanSlidesListInvalidName),
        ("testDeleteSlidesCleanSlidesListInvalidSlides", testDeleteSlidesCleanSlidesListInvalidSlides),
        ("testDeleteSlidesCleanSlidesListInvalidPassword", testDeleteSlidesCleanSlidesListInvalidPassword),
        ("testDeleteSlidesCleanSlidesListInvalidFolder", testDeleteSlidesCleanSlidesListInvalidFolder),
        ("testDeleteSlidesCleanSlidesListInvalidStorage", testDeleteSlidesCleanSlidesListInvalidStorage),
        ("testDeleteSlidesDocumentProperties", testDeleteSlidesDocumentProperties),
        ("testDeleteSlidesDocumentPropertiesInvalidName", testDeleteSlidesDocumentPropertiesInvalidName),
        ("testDeleteSlidesDocumentPropertiesInvalidPassword", testDeleteSlidesDocumentPropertiesInvalidPassword),
        ("testDeleteSlidesDocumentPropertiesInvalidFolder", testDeleteSlidesDocumentPropertiesInvalidFolder),
        ("testDeleteSlidesDocumentPropertiesInvalidStorage", testDeleteSlidesDocumentPropertiesInvalidStorage),
        ("testDeleteSlidesDocumentProperty", testDeleteSlidesDocumentProperty),
        ("testDeleteSlidesDocumentPropertyInvalidName", testDeleteSlidesDocumentPropertyInvalidName),
        ("testDeleteSlidesDocumentPropertyInvalidPropertyName", testDeleteSlidesDocumentPropertyInvalidPropertyName),
        ("testDeleteSlidesDocumentPropertyInvalidPassword", testDeleteSlidesDocumentPropertyInvalidPassword),
        ("testDeleteSlidesDocumentPropertyInvalidFolder", testDeleteSlidesDocumentPropertyInvalidFolder),
        ("testDeleteSlidesDocumentPropertyInvalidStorage", testDeleteSlidesDocumentPropertyInvalidStorage),
        ("testDeleteSlidesSlideBackground", testDeleteSlidesSlideBackground),
        ("testDeleteSlidesSlideBackgroundInvalidName", testDeleteSlidesSlideBackgroundInvalidName),
        ("testDeleteSlidesSlideBackgroundInvalidSlideIndex", testDeleteSlidesSlideBackgroundInvalidSlideIndex),
        ("testDeleteSlidesSlideBackgroundInvalidPassword", testDeleteSlidesSlideBackgroundInvalidPassword),
        ("testDeleteSlidesSlideBackgroundInvalidFolder", testDeleteSlidesSlideBackgroundInvalidFolder),
        ("testDeleteSlidesSlideBackgroundInvalidStorage", testDeleteSlidesSlideBackgroundInvalidStorage),
        ("testDeleteSubshapeParagraph", testDeleteSubshapeParagraph),
        ("testDeleteSubshapeParagraphInvalidName", testDeleteSubshapeParagraphInvalidName),
        ("testDeleteSubshapeParagraphInvalidSlideIndex", testDeleteSubshapeParagraphInvalidSlideIndex),
        ("testDeleteSubshapeParagraphInvalidPath", testDeleteSubshapeParagraphInvalidPath),
        ("testDeleteSubshapeParagraphInvalidShapeIndex", testDeleteSubshapeParagraphInvalidShapeIndex),
        ("testDeleteSubshapeParagraphInvalidParagraphIndex", testDeleteSubshapeParagraphInvalidParagraphIndex),
        ("testDeleteSubshapeParagraphInvalidPassword", testDeleteSubshapeParagraphInvalidPassword),
        ("testDeleteSubshapeParagraphInvalidFolder", testDeleteSubshapeParagraphInvalidFolder),
        ("testDeleteSubshapeParagraphInvalidStorage", testDeleteSubshapeParagraphInvalidStorage),
        ("testDeleteSubshapeParagraphs", testDeleteSubshapeParagraphs),
        ("testDeleteSubshapeParagraphsInvalidName", testDeleteSubshapeParagraphsInvalidName),
        ("testDeleteSubshapeParagraphsInvalidSlideIndex", testDeleteSubshapeParagraphsInvalidSlideIndex),
        ("testDeleteSubshapeParagraphsInvalidPath", testDeleteSubshapeParagraphsInvalidPath),
        ("testDeleteSubshapeParagraphsInvalidShapeIndex", testDeleteSubshapeParagraphsInvalidShapeIndex),
        ("testDeleteSubshapeParagraphsInvalidParagraphs", testDeleteSubshapeParagraphsInvalidParagraphs),
        ("testDeleteSubshapeParagraphsInvalidPassword", testDeleteSubshapeParagraphsInvalidPassword),
        ("testDeleteSubshapeParagraphsInvalidFolder", testDeleteSubshapeParagraphsInvalidFolder),
        ("testDeleteSubshapeParagraphsInvalidStorage", testDeleteSubshapeParagraphsInvalidStorage),
        ("testDeleteSubshapePortion", testDeleteSubshapePortion),
        ("testDeleteSubshapePortionInvalidName", testDeleteSubshapePortionInvalidName),
        ("testDeleteSubshapePortionInvalidSlideIndex", testDeleteSubshapePortionInvalidSlideIndex),
        ("testDeleteSubshapePortionInvalidPath", testDeleteSubshapePortionInvalidPath),
        ("testDeleteSubshapePortionInvalidShapeIndex", testDeleteSubshapePortionInvalidShapeIndex),
        ("testDeleteSubshapePortionInvalidParagraphIndex", testDeleteSubshapePortionInvalidParagraphIndex),
        ("testDeleteSubshapePortionInvalidPortionIndex", testDeleteSubshapePortionInvalidPortionIndex),
        ("testDeleteSubshapePortionInvalidPassword", testDeleteSubshapePortionInvalidPassword),
        ("testDeleteSubshapePortionInvalidFolder", testDeleteSubshapePortionInvalidFolder),
        ("testDeleteSubshapePortionInvalidStorage", testDeleteSubshapePortionInvalidStorage),
        ("testDeleteSubshapePortions", testDeleteSubshapePortions),
        ("testDeleteSubshapePortionsInvalidName", testDeleteSubshapePortionsInvalidName),
        ("testDeleteSubshapePortionsInvalidSlideIndex", testDeleteSubshapePortionsInvalidSlideIndex),
        ("testDeleteSubshapePortionsInvalidPath", testDeleteSubshapePortionsInvalidPath),
        ("testDeleteSubshapePortionsInvalidShapeIndex", testDeleteSubshapePortionsInvalidShapeIndex),
        ("testDeleteSubshapePortionsInvalidParagraphIndex", testDeleteSubshapePortionsInvalidParagraphIndex),
        ("testDeleteSubshapePortionsInvalidPortions", testDeleteSubshapePortionsInvalidPortions),
        ("testDeleteSubshapePortionsInvalidPassword", testDeleteSubshapePortionsInvalidPassword),
        ("testDeleteSubshapePortionsInvalidFolder", testDeleteSubshapePortionsInvalidFolder),
        ("testDeleteSubshapePortionsInvalidStorage", testDeleteSubshapePortionsInvalidStorage),
        ("testDownloadFile", testDownloadFile),
        ("testDownloadFileInvalidPath", testDownloadFileInvalidPath),
        ("testDownloadFileInvalidStorageName", testDownloadFileInvalidStorageName),
        ("testDownloadFileInvalidVersionId", testDownloadFileInvalidVersionId),
        ("testGetDiscUsage", testGetDiscUsage),
        ("testGetDiscUsageInvalidStorageName", testGetDiscUsageInvalidStorageName),
        ("testGetFileVersions", testGetFileVersions),
        ("testGetFileVersionsInvalidPath", testGetFileVersionsInvalidPath),
        ("testGetFileVersionsInvalidStorageName", testGetFileVersionsInvalidStorageName),
        ("testGetFilesList", testGetFilesList),
        ("testGetFilesListInvalidPath", testGetFilesListInvalidPath),
        ("testGetFilesListInvalidStorageName", testGetFilesListInvalidStorageName),
        ("testGetLayoutSlide", testGetLayoutSlide),
        ("testGetLayoutSlideInvalidName", testGetLayoutSlideInvalidName),
        ("testGetLayoutSlideInvalidSlideIndex", testGetLayoutSlideInvalidSlideIndex),
        ("testGetLayoutSlideInvalidPassword", testGetLayoutSlideInvalidPassword),
        ("testGetLayoutSlideInvalidFolder", testGetLayoutSlideInvalidFolder),
        ("testGetLayoutSlideInvalidStorage", testGetLayoutSlideInvalidStorage),
        ("testGetLayoutSlidesList", testGetLayoutSlidesList),
        ("testGetLayoutSlidesListInvalidName", testGetLayoutSlidesListInvalidName),
        ("testGetLayoutSlidesListInvalidPassword", testGetLayoutSlidesListInvalidPassword),
        ("testGetLayoutSlidesListInvalidFolder", testGetLayoutSlidesListInvalidFolder),
        ("testGetLayoutSlidesListInvalidStorage", testGetLayoutSlidesListInvalidStorage),
        ("testGetMasterSlide", testGetMasterSlide),
        ("testGetMasterSlideInvalidName", testGetMasterSlideInvalidName),
        ("testGetMasterSlideInvalidSlideIndex", testGetMasterSlideInvalidSlideIndex),
        ("testGetMasterSlideInvalidPassword", testGetMasterSlideInvalidPassword),
        ("testGetMasterSlideInvalidFolder", testGetMasterSlideInvalidFolder),
        ("testGetMasterSlideInvalidStorage", testGetMasterSlideInvalidStorage),
        ("testGetMasterSlidesList", testGetMasterSlidesList),
        ("testGetMasterSlidesListInvalidName", testGetMasterSlidesListInvalidName),
        ("testGetMasterSlidesListInvalidPassword", testGetMasterSlidesListInvalidPassword),
        ("testGetMasterSlidesListInvalidFolder", testGetMasterSlidesListInvalidFolder),
        ("testGetMasterSlidesListInvalidStorage", testGetMasterSlidesListInvalidStorage),
        ("testGetNotesSlide", testGetNotesSlide),
        ("testGetNotesSlideInvalidName", testGetNotesSlideInvalidName),
        ("testGetNotesSlideInvalidSlideIndex", testGetNotesSlideInvalidSlideIndex),
        ("testGetNotesSlideInvalidPassword", testGetNotesSlideInvalidPassword),
        ("testGetNotesSlideInvalidFolder", testGetNotesSlideInvalidFolder),
        ("testGetNotesSlideInvalidStorage", testGetNotesSlideInvalidStorage),
        ("testGetNotesSlideExists", testGetNotesSlideExists),
        ("testGetNotesSlideExistsInvalidName", testGetNotesSlideExistsInvalidName),
        ("testGetNotesSlideExistsInvalidSlideIndex", testGetNotesSlideExistsInvalidSlideIndex),
        ("testGetNotesSlideExistsInvalidPassword", testGetNotesSlideExistsInvalidPassword),
        ("testGetNotesSlideExistsInvalidFolder", testGetNotesSlideExistsInvalidFolder),
        ("testGetNotesSlideExistsInvalidStorage", testGetNotesSlideExistsInvalidStorage),
        ("testGetNotesSlideHeaderFooter", testGetNotesSlideHeaderFooter),
        ("testGetNotesSlideHeaderFooterInvalidName", testGetNotesSlideHeaderFooterInvalidName),
        ("testGetNotesSlideHeaderFooterInvalidSlideIndex", testGetNotesSlideHeaderFooterInvalidSlideIndex),
        ("testGetNotesSlideHeaderFooterInvalidPassword", testGetNotesSlideHeaderFooterInvalidPassword),
        ("testGetNotesSlideHeaderFooterInvalidFolder", testGetNotesSlideHeaderFooterInvalidFolder),
        ("testGetNotesSlideHeaderFooterInvalidStorage", testGetNotesSlideHeaderFooterInvalidStorage),
        ("testGetNotesSlideShape", testGetNotesSlideShape),
        ("testGetNotesSlideShapeInvalidName", testGetNotesSlideShapeInvalidName),
        ("testGetNotesSlideShapeInvalidSlideIndex", testGetNotesSlideShapeInvalidSlideIndex),
        ("testGetNotesSlideShapeInvalidShapeIndex", testGetNotesSlideShapeInvalidShapeIndex),
        ("testGetNotesSlideShapeInvalidPassword", testGetNotesSlideShapeInvalidPassword),
        ("testGetNotesSlideShapeInvalidFolder", testGetNotesSlideShapeInvalidFolder),
        ("testGetNotesSlideShapeInvalidStorage", testGetNotesSlideShapeInvalidStorage),
        ("testGetNotesSlideShapeParagraph", testGetNotesSlideShapeParagraph),
        ("testGetNotesSlideShapeParagraphInvalidName", testGetNotesSlideShapeParagraphInvalidName),
        ("testGetNotesSlideShapeParagraphInvalidSlideIndex", testGetNotesSlideShapeParagraphInvalidSlideIndex),
        ("testGetNotesSlideShapeParagraphInvalidShapeIndex", testGetNotesSlideShapeParagraphInvalidShapeIndex),
        ("testGetNotesSlideShapeParagraphInvalidParagraphIndex", testGetNotesSlideShapeParagraphInvalidParagraphIndex),
        ("testGetNotesSlideShapeParagraphInvalidPassword", testGetNotesSlideShapeParagraphInvalidPassword),
        ("testGetNotesSlideShapeParagraphInvalidFolder", testGetNotesSlideShapeParagraphInvalidFolder),
        ("testGetNotesSlideShapeParagraphInvalidStorage", testGetNotesSlideShapeParagraphInvalidStorage),
        ("testGetNotesSlideShapeParagraphs", testGetNotesSlideShapeParagraphs),
        ("testGetNotesSlideShapeParagraphsInvalidName", testGetNotesSlideShapeParagraphsInvalidName),
        ("testGetNotesSlideShapeParagraphsInvalidSlideIndex", testGetNotesSlideShapeParagraphsInvalidSlideIndex),
        ("testGetNotesSlideShapeParagraphsInvalidShapeIndex", testGetNotesSlideShapeParagraphsInvalidShapeIndex),
        ("testGetNotesSlideShapeParagraphsInvalidPassword", testGetNotesSlideShapeParagraphsInvalidPassword),
        ("testGetNotesSlideShapeParagraphsInvalidFolder", testGetNotesSlideShapeParagraphsInvalidFolder),
        ("testGetNotesSlideShapeParagraphsInvalidStorage", testGetNotesSlideShapeParagraphsInvalidStorage),
        ("testGetNotesSlideShapePortion", testGetNotesSlideShapePortion),
        ("testGetNotesSlideShapePortionInvalidName", testGetNotesSlideShapePortionInvalidName),
        ("testGetNotesSlideShapePortionInvalidSlideIndex", testGetNotesSlideShapePortionInvalidSlideIndex),
        ("testGetNotesSlideShapePortionInvalidShapeIndex", testGetNotesSlideShapePortionInvalidShapeIndex),
        ("testGetNotesSlideShapePortionInvalidParagraphIndex", testGetNotesSlideShapePortionInvalidParagraphIndex),
        ("testGetNotesSlideShapePortionInvalidPortionIndex", testGetNotesSlideShapePortionInvalidPortionIndex),
        ("testGetNotesSlideShapePortionInvalidPassword", testGetNotesSlideShapePortionInvalidPassword),
        ("testGetNotesSlideShapePortionInvalidFolder", testGetNotesSlideShapePortionInvalidFolder),
        ("testGetNotesSlideShapePortionInvalidStorage", testGetNotesSlideShapePortionInvalidStorage),
        ("testGetNotesSlideShapePortions", testGetNotesSlideShapePortions),
        ("testGetNotesSlideShapePortionsInvalidName", testGetNotesSlideShapePortionsInvalidName),
        ("testGetNotesSlideShapePortionsInvalidSlideIndex", testGetNotesSlideShapePortionsInvalidSlideIndex),
        ("testGetNotesSlideShapePortionsInvalidShapeIndex", testGetNotesSlideShapePortionsInvalidShapeIndex),
        ("testGetNotesSlideShapePortionsInvalidParagraphIndex", testGetNotesSlideShapePortionsInvalidParagraphIndex),
        ("testGetNotesSlideShapePortionsInvalidPassword", testGetNotesSlideShapePortionsInvalidPassword),
        ("testGetNotesSlideShapePortionsInvalidFolder", testGetNotesSlideShapePortionsInvalidFolder),
        ("testGetNotesSlideShapePortionsInvalidStorage", testGetNotesSlideShapePortionsInvalidStorage),
        ("testGetNotesSlideShapes", testGetNotesSlideShapes),
        ("testGetNotesSlideShapesInvalidName", testGetNotesSlideShapesInvalidName),
        ("testGetNotesSlideShapesInvalidSlideIndex", testGetNotesSlideShapesInvalidSlideIndex),
        ("testGetNotesSlideShapesInvalidPassword", testGetNotesSlideShapesInvalidPassword),
        ("testGetNotesSlideShapesInvalidFolder", testGetNotesSlideShapesInvalidFolder),
        ("testGetNotesSlideShapesInvalidStorage", testGetNotesSlideShapesInvalidStorage),
        ("testGetNotesSlideWithFormat", testGetNotesSlideWithFormat),
        ("testGetNotesSlideWithFormatInvalidName", testGetNotesSlideWithFormatInvalidName),
        ("testGetNotesSlideWithFormatInvalidSlideIndex", testGetNotesSlideWithFormatInvalidSlideIndex),
        ("testGetNotesSlideWithFormatInvalidFormat", testGetNotesSlideWithFormatInvalidFormat),
        ("testGetNotesSlideWithFormatInvalidWidth", testGetNotesSlideWithFormatInvalidWidth),
        ("testGetNotesSlideWithFormatInvalidHeight", testGetNotesSlideWithFormatInvalidHeight),
        ("testGetNotesSlideWithFormatInvalidPassword", testGetNotesSlideWithFormatInvalidPassword),
        ("testGetNotesSlideWithFormatInvalidFolder", testGetNotesSlideWithFormatInvalidFolder),
        ("testGetNotesSlideWithFormatInvalidStorage", testGetNotesSlideWithFormatInvalidStorage),
        ("testGetNotesSlideWithFormatInvalidFontsFolder", testGetNotesSlideWithFormatInvalidFontsFolder),
        ("testGetParagraphPortion", testGetParagraphPortion),
        ("testGetParagraphPortionInvalidName", testGetParagraphPortionInvalidName),
        ("testGetParagraphPortionInvalidSlideIndex", testGetParagraphPortionInvalidSlideIndex),
        ("testGetParagraphPortionInvalidShapeIndex", testGetParagraphPortionInvalidShapeIndex),
        ("testGetParagraphPortionInvalidParagraphIndex", testGetParagraphPortionInvalidParagraphIndex),
        ("testGetParagraphPortionInvalidPortionIndex", testGetParagraphPortionInvalidPortionIndex),
        ("testGetParagraphPortionInvalidPassword", testGetParagraphPortionInvalidPassword),
        ("testGetParagraphPortionInvalidFolder", testGetParagraphPortionInvalidFolder),
        ("testGetParagraphPortionInvalidStorage", testGetParagraphPortionInvalidStorage),
        ("testGetParagraphPortions", testGetParagraphPortions),
        ("testGetParagraphPortionsInvalidName", testGetParagraphPortionsInvalidName),
        ("testGetParagraphPortionsInvalidSlideIndex", testGetParagraphPortionsInvalidSlideIndex),
        ("testGetParagraphPortionsInvalidShapeIndex", testGetParagraphPortionsInvalidShapeIndex),
        ("testGetParagraphPortionsInvalidParagraphIndex", testGetParagraphPortionsInvalidParagraphIndex),
        ("testGetParagraphPortionsInvalidPassword", testGetParagraphPortionsInvalidPassword),
        ("testGetParagraphPortionsInvalidFolder", testGetParagraphPortionsInvalidFolder),
        ("testGetParagraphPortionsInvalidStorage", testGetParagraphPortionsInvalidStorage),
        ("testGetSections", testGetSections),
        ("testGetSectionsInvalidName", testGetSectionsInvalidName),
        ("testGetSectionsInvalidPassword", testGetSectionsInvalidPassword),
        ("testGetSectionsInvalidFolder", testGetSectionsInvalidFolder),
        ("testGetSectionsInvalidStorage", testGetSectionsInvalidStorage),
        ("testGetSlideAnimation", testGetSlideAnimation),
        ("testGetSlideAnimationInvalidName", testGetSlideAnimationInvalidName),
        ("testGetSlideAnimationInvalidSlideIndex", testGetSlideAnimationInvalidSlideIndex),
        ("testGetSlideAnimationInvalidShapeIndex", testGetSlideAnimationInvalidShapeIndex),
        ("testGetSlideAnimationInvalidPassword", testGetSlideAnimationInvalidPassword),
        ("testGetSlideAnimationInvalidFolder", testGetSlideAnimationInvalidFolder),
        ("testGetSlideAnimationInvalidStorage", testGetSlideAnimationInvalidStorage),
        ("testGetSlideHeaderFooter", testGetSlideHeaderFooter),
        ("testGetSlideHeaderFooterInvalidName", testGetSlideHeaderFooterInvalidName),
        ("testGetSlideHeaderFooterInvalidSlideIndex", testGetSlideHeaderFooterInvalidSlideIndex),
        ("testGetSlideHeaderFooterInvalidPassword", testGetSlideHeaderFooterInvalidPassword),
        ("testGetSlideHeaderFooterInvalidFolder", testGetSlideHeaderFooterInvalidFolder),
        ("testGetSlideHeaderFooterInvalidStorage", testGetSlideHeaderFooterInvalidStorage),
        ("testGetSlideShape", testGetSlideShape),
        ("testGetSlideShapeInvalidName", testGetSlideShapeInvalidName),
        ("testGetSlideShapeInvalidSlideIndex", testGetSlideShapeInvalidSlideIndex),
        ("testGetSlideShapeInvalidShapeIndex", testGetSlideShapeInvalidShapeIndex),
        ("testGetSlideShapeInvalidPassword", testGetSlideShapeInvalidPassword),
        ("testGetSlideShapeInvalidFolder", testGetSlideShapeInvalidFolder),
        ("testGetSlideShapeInvalidStorage", testGetSlideShapeInvalidStorage),
        ("testGetSlideShapeParagraph", testGetSlideShapeParagraph),
        ("testGetSlideShapeParagraphInvalidName", testGetSlideShapeParagraphInvalidName),
        ("testGetSlideShapeParagraphInvalidSlideIndex", testGetSlideShapeParagraphInvalidSlideIndex),
        ("testGetSlideShapeParagraphInvalidShapeIndex", testGetSlideShapeParagraphInvalidShapeIndex),
        ("testGetSlideShapeParagraphInvalidParagraphIndex", testGetSlideShapeParagraphInvalidParagraphIndex),
        ("testGetSlideShapeParagraphInvalidPassword", testGetSlideShapeParagraphInvalidPassword),
        ("testGetSlideShapeParagraphInvalidFolder", testGetSlideShapeParagraphInvalidFolder),
        ("testGetSlideShapeParagraphInvalidStorage", testGetSlideShapeParagraphInvalidStorage),
        ("testGetSlideShapeParagraphs", testGetSlideShapeParagraphs),
        ("testGetSlideShapeParagraphsInvalidName", testGetSlideShapeParagraphsInvalidName),
        ("testGetSlideShapeParagraphsInvalidSlideIndex", testGetSlideShapeParagraphsInvalidSlideIndex),
        ("testGetSlideShapeParagraphsInvalidShapeIndex", testGetSlideShapeParagraphsInvalidShapeIndex),
        ("testGetSlideShapeParagraphsInvalidPassword", testGetSlideShapeParagraphsInvalidPassword),
        ("testGetSlideShapeParagraphsInvalidFolder", testGetSlideShapeParagraphsInvalidFolder),
        ("testGetSlideShapeParagraphsInvalidStorage", testGetSlideShapeParagraphsInvalidStorage),
        ("testGetSlideShapes", testGetSlideShapes),
        ("testGetSlideShapesInvalidName", testGetSlideShapesInvalidName),
        ("testGetSlideShapesInvalidSlideIndex", testGetSlideShapesInvalidSlideIndex),
        ("testGetSlideShapesInvalidPassword", testGetSlideShapesInvalidPassword),
        ("testGetSlideShapesInvalidFolder", testGetSlideShapesInvalidFolder),
        ("testGetSlideShapesInvalidStorage", testGetSlideShapesInvalidStorage),
        ("testGetSlideSubshape", testGetSlideSubshape),
        ("testGetSlideSubshapeInvalidName", testGetSlideSubshapeInvalidName),
        ("testGetSlideSubshapeInvalidSlideIndex", testGetSlideSubshapeInvalidSlideIndex),
        ("testGetSlideSubshapeInvalidPath", testGetSlideSubshapeInvalidPath),
        ("testGetSlideSubshapeInvalidShapeIndex", testGetSlideSubshapeInvalidShapeIndex),
        ("testGetSlideSubshapeInvalidPassword", testGetSlideSubshapeInvalidPassword),
        ("testGetSlideSubshapeInvalidFolder", testGetSlideSubshapeInvalidFolder),
        ("testGetSlideSubshapeInvalidStorage", testGetSlideSubshapeInvalidStorage),
        ("testGetSlideSubshapeParagraph", testGetSlideSubshapeParagraph),
        ("testGetSlideSubshapeParagraphInvalidName", testGetSlideSubshapeParagraphInvalidName),
        ("testGetSlideSubshapeParagraphInvalidSlideIndex", testGetSlideSubshapeParagraphInvalidSlideIndex),
        ("testGetSlideSubshapeParagraphInvalidPath", testGetSlideSubshapeParagraphInvalidPath),
        ("testGetSlideSubshapeParagraphInvalidShapeIndex", testGetSlideSubshapeParagraphInvalidShapeIndex),
        ("testGetSlideSubshapeParagraphInvalidParagraphIndex", testGetSlideSubshapeParagraphInvalidParagraphIndex),
        ("testGetSlideSubshapeParagraphInvalidPassword", testGetSlideSubshapeParagraphInvalidPassword),
        ("testGetSlideSubshapeParagraphInvalidFolder", testGetSlideSubshapeParagraphInvalidFolder),
        ("testGetSlideSubshapeParagraphInvalidStorage", testGetSlideSubshapeParagraphInvalidStorage),
        ("testGetSlideSubshapeParagraphs", testGetSlideSubshapeParagraphs),
        ("testGetSlideSubshapeParagraphsInvalidName", testGetSlideSubshapeParagraphsInvalidName),
        ("testGetSlideSubshapeParagraphsInvalidSlideIndex", testGetSlideSubshapeParagraphsInvalidSlideIndex),
        ("testGetSlideSubshapeParagraphsInvalidPath", testGetSlideSubshapeParagraphsInvalidPath),
        ("testGetSlideSubshapeParagraphsInvalidShapeIndex", testGetSlideSubshapeParagraphsInvalidShapeIndex),
        ("testGetSlideSubshapeParagraphsInvalidPassword", testGetSlideSubshapeParagraphsInvalidPassword),
        ("testGetSlideSubshapeParagraphsInvalidFolder", testGetSlideSubshapeParagraphsInvalidFolder),
        ("testGetSlideSubshapeParagraphsInvalidStorage", testGetSlideSubshapeParagraphsInvalidStorage),
        ("testGetSlideSubshapes", testGetSlideSubshapes),
        ("testGetSlideSubshapesInvalidName", testGetSlideSubshapesInvalidName),
        ("testGetSlideSubshapesInvalidSlideIndex", testGetSlideSubshapesInvalidSlideIndex),
        ("testGetSlideSubshapesInvalidPath", testGetSlideSubshapesInvalidPath),
        ("testGetSlideSubshapesInvalidPassword", testGetSlideSubshapesInvalidPassword),
        ("testGetSlideSubshapesInvalidFolder", testGetSlideSubshapesInvalidFolder),
        ("testGetSlideSubshapesInvalidStorage", testGetSlideSubshapesInvalidStorage),
        ("testGetSlidesApiInfo", testGetSlidesApiInfo),
        ("testGetSlidesDocument", testGetSlidesDocument),
        ("testGetSlidesDocumentInvalidName", testGetSlidesDocumentInvalidName),
        ("testGetSlidesDocumentInvalidPassword", testGetSlidesDocumentInvalidPassword),
        ("testGetSlidesDocumentInvalidFolder", testGetSlidesDocumentInvalidFolder),
        ("testGetSlidesDocumentInvalidStorage", testGetSlidesDocumentInvalidStorage),
        ("testGetSlidesDocumentProperties", testGetSlidesDocumentProperties),
        ("testGetSlidesDocumentPropertiesInvalidName", testGetSlidesDocumentPropertiesInvalidName),
        ("testGetSlidesDocumentPropertiesInvalidPassword", testGetSlidesDocumentPropertiesInvalidPassword),
        ("testGetSlidesDocumentPropertiesInvalidFolder", testGetSlidesDocumentPropertiesInvalidFolder),
        ("testGetSlidesDocumentPropertiesInvalidStorage", testGetSlidesDocumentPropertiesInvalidStorage),
        ("testGetSlidesDocumentProperty", testGetSlidesDocumentProperty),
        ("testGetSlidesDocumentPropertyInvalidName", testGetSlidesDocumentPropertyInvalidName),
        ("testGetSlidesDocumentPropertyInvalidPropertyName", testGetSlidesDocumentPropertyInvalidPropertyName),
        ("testGetSlidesDocumentPropertyInvalidPassword", testGetSlidesDocumentPropertyInvalidPassword),
        ("testGetSlidesDocumentPropertyInvalidFolder", testGetSlidesDocumentPropertyInvalidFolder),
        ("testGetSlidesDocumentPropertyInvalidStorage", testGetSlidesDocumentPropertyInvalidStorage),
        ("testGetSlidesImageWithDefaultFormat", testGetSlidesImageWithDefaultFormat),
        ("testGetSlidesImageWithDefaultFormatInvalidName", testGetSlidesImageWithDefaultFormatInvalidName),
        ("testGetSlidesImageWithDefaultFormatInvalidIndex", testGetSlidesImageWithDefaultFormatInvalidIndex),
        ("testGetSlidesImageWithDefaultFormatInvalidPassword", testGetSlidesImageWithDefaultFormatInvalidPassword),
        ("testGetSlidesImageWithDefaultFormatInvalidFolder", testGetSlidesImageWithDefaultFormatInvalidFolder),
        ("testGetSlidesImageWithDefaultFormatInvalidStorage", testGetSlidesImageWithDefaultFormatInvalidStorage),
        ("testGetSlidesImageWithFormat", testGetSlidesImageWithFormat),
        ("testGetSlidesImageWithFormatInvalidName", testGetSlidesImageWithFormatInvalidName),
        ("testGetSlidesImageWithFormatInvalidIndex", testGetSlidesImageWithFormatInvalidIndex),
        ("testGetSlidesImageWithFormatInvalidFormat", testGetSlidesImageWithFormatInvalidFormat),
        ("testGetSlidesImageWithFormatInvalidPassword", testGetSlidesImageWithFormatInvalidPassword),
        ("testGetSlidesImageWithFormatInvalidFolder", testGetSlidesImageWithFormatInvalidFolder),
        ("testGetSlidesImageWithFormatInvalidStorage", testGetSlidesImageWithFormatInvalidStorage),
        ("testGetSlidesImages", testGetSlidesImages),
        ("testGetSlidesImagesInvalidName", testGetSlidesImagesInvalidName),
        ("testGetSlidesImagesInvalidPassword", testGetSlidesImagesInvalidPassword),
        ("testGetSlidesImagesInvalidFolder", testGetSlidesImagesInvalidFolder),
        ("testGetSlidesImagesInvalidStorage", testGetSlidesImagesInvalidStorage),
        ("testGetSlidesPlaceholder", testGetSlidesPlaceholder),
        ("testGetSlidesPlaceholderInvalidName", testGetSlidesPlaceholderInvalidName),
        ("testGetSlidesPlaceholderInvalidSlideIndex", testGetSlidesPlaceholderInvalidSlideIndex),
        ("testGetSlidesPlaceholderInvalidPlaceholderIndex", testGetSlidesPlaceholderInvalidPlaceholderIndex),
        ("testGetSlidesPlaceholderInvalidPassword", testGetSlidesPlaceholderInvalidPassword),
        ("testGetSlidesPlaceholderInvalidFolder", testGetSlidesPlaceholderInvalidFolder),
        ("testGetSlidesPlaceholderInvalidStorage", testGetSlidesPlaceholderInvalidStorage),
        ("testGetSlidesPlaceholders", testGetSlidesPlaceholders),
        ("testGetSlidesPlaceholdersInvalidName", testGetSlidesPlaceholdersInvalidName),
        ("testGetSlidesPlaceholdersInvalidSlideIndex", testGetSlidesPlaceholdersInvalidSlideIndex),
        ("testGetSlidesPlaceholdersInvalidPassword", testGetSlidesPlaceholdersInvalidPassword),
        ("testGetSlidesPlaceholdersInvalidFolder", testGetSlidesPlaceholdersInvalidFolder),
        ("testGetSlidesPlaceholdersInvalidStorage", testGetSlidesPlaceholdersInvalidStorage),
        ("testGetSlidesPresentationTextItems", testGetSlidesPresentationTextItems),
        ("testGetSlidesPresentationTextItemsInvalidName", testGetSlidesPresentationTextItemsInvalidName),
        ("testGetSlidesPresentationTextItemsInvalidWithEmpty", testGetSlidesPresentationTextItemsInvalidWithEmpty),
        ("testGetSlidesPresentationTextItemsInvalidPassword", testGetSlidesPresentationTextItemsInvalidPassword),
        ("testGetSlidesPresentationTextItemsInvalidFolder", testGetSlidesPresentationTextItemsInvalidFolder),
        ("testGetSlidesPresentationTextItemsInvalidStorage", testGetSlidesPresentationTextItemsInvalidStorage),
        ("testGetSlidesProtectionProperties", testGetSlidesProtectionProperties),
        ("testGetSlidesProtectionPropertiesInvalidName", testGetSlidesProtectionPropertiesInvalidName),
        ("testGetSlidesProtectionPropertiesInvalidPassword", testGetSlidesProtectionPropertiesInvalidPassword),
        ("testGetSlidesProtectionPropertiesInvalidFolder", testGetSlidesProtectionPropertiesInvalidFolder),
        ("testGetSlidesProtectionPropertiesInvalidStorage", testGetSlidesProtectionPropertiesInvalidStorage),
        ("testGetSlidesSlide", testGetSlidesSlide),
        ("testGetSlidesSlideInvalidName", testGetSlidesSlideInvalidName),
        ("testGetSlidesSlideInvalidSlideIndex", testGetSlidesSlideInvalidSlideIndex),
        ("testGetSlidesSlideInvalidPassword", testGetSlidesSlideInvalidPassword),
        ("testGetSlidesSlideInvalidFolder", testGetSlidesSlideInvalidFolder),
        ("testGetSlidesSlideInvalidStorage", testGetSlidesSlideInvalidStorage),
        ("testGetSlidesSlideBackground", testGetSlidesSlideBackground),
        ("testGetSlidesSlideBackgroundInvalidName", testGetSlidesSlideBackgroundInvalidName),
        ("testGetSlidesSlideBackgroundInvalidSlideIndex", testGetSlidesSlideBackgroundInvalidSlideIndex),
        ("testGetSlidesSlideBackgroundInvalidPassword", testGetSlidesSlideBackgroundInvalidPassword),
        ("testGetSlidesSlideBackgroundInvalidFolder", testGetSlidesSlideBackgroundInvalidFolder),
        ("testGetSlidesSlideBackgroundInvalidStorage", testGetSlidesSlideBackgroundInvalidStorage),
        ("testGetSlidesSlideComments", testGetSlidesSlideComments),
        ("testGetSlidesSlideCommentsInvalidName", testGetSlidesSlideCommentsInvalidName),
        ("testGetSlidesSlideCommentsInvalidSlideIndex", testGetSlidesSlideCommentsInvalidSlideIndex),
        ("testGetSlidesSlideCommentsInvalidPassword", testGetSlidesSlideCommentsInvalidPassword),
        ("testGetSlidesSlideCommentsInvalidFolder", testGetSlidesSlideCommentsInvalidFolder),
        ("testGetSlidesSlideCommentsInvalidStorage", testGetSlidesSlideCommentsInvalidStorage),
        ("testGetSlidesSlideImages", testGetSlidesSlideImages),
        ("testGetSlidesSlideImagesInvalidName", testGetSlidesSlideImagesInvalidName),
        ("testGetSlidesSlideImagesInvalidSlideIndex", testGetSlidesSlideImagesInvalidSlideIndex),
        ("testGetSlidesSlideImagesInvalidPassword", testGetSlidesSlideImagesInvalidPassword),
        ("testGetSlidesSlideImagesInvalidFolder", testGetSlidesSlideImagesInvalidFolder),
        ("testGetSlidesSlideImagesInvalidStorage", testGetSlidesSlideImagesInvalidStorage),
        ("testGetSlidesSlideProperties", testGetSlidesSlideProperties),
        ("testGetSlidesSlidePropertiesInvalidName", testGetSlidesSlidePropertiesInvalidName),
        ("testGetSlidesSlidePropertiesInvalidPassword", testGetSlidesSlidePropertiesInvalidPassword),
        ("testGetSlidesSlidePropertiesInvalidFolder", testGetSlidesSlidePropertiesInvalidFolder),
        ("testGetSlidesSlidePropertiesInvalidStorage", testGetSlidesSlidePropertiesInvalidStorage),
        ("testGetSlidesSlideTextItems", testGetSlidesSlideTextItems),
        ("testGetSlidesSlideTextItemsInvalidName", testGetSlidesSlideTextItemsInvalidName),
        ("testGetSlidesSlideTextItemsInvalidSlideIndex", testGetSlidesSlideTextItemsInvalidSlideIndex),
        ("testGetSlidesSlideTextItemsInvalidWithEmpty", testGetSlidesSlideTextItemsInvalidWithEmpty),
        ("testGetSlidesSlideTextItemsInvalidPassword", testGetSlidesSlideTextItemsInvalidPassword),
        ("testGetSlidesSlideTextItemsInvalidFolder", testGetSlidesSlideTextItemsInvalidFolder),
        ("testGetSlidesSlideTextItemsInvalidStorage", testGetSlidesSlideTextItemsInvalidStorage),
        ("testGetSlidesSlidesList", testGetSlidesSlidesList),
        ("testGetSlidesSlidesListInvalidName", testGetSlidesSlidesListInvalidName),
        ("testGetSlidesSlidesListInvalidPassword", testGetSlidesSlidesListInvalidPassword),
        ("testGetSlidesSlidesListInvalidFolder", testGetSlidesSlidesListInvalidFolder),
        ("testGetSlidesSlidesListInvalidStorage", testGetSlidesSlidesListInvalidStorage),
        ("testGetSlidesTheme", testGetSlidesTheme),
        ("testGetSlidesThemeInvalidName", testGetSlidesThemeInvalidName),
        ("testGetSlidesThemeInvalidSlideIndex", testGetSlidesThemeInvalidSlideIndex),
        ("testGetSlidesThemeInvalidPassword", testGetSlidesThemeInvalidPassword),
        ("testGetSlidesThemeInvalidFolder", testGetSlidesThemeInvalidFolder),
        ("testGetSlidesThemeInvalidStorage", testGetSlidesThemeInvalidStorage),
        ("testGetSlidesThemeColorScheme", testGetSlidesThemeColorScheme),
        ("testGetSlidesThemeColorSchemeInvalidName", testGetSlidesThemeColorSchemeInvalidName),
        ("testGetSlidesThemeColorSchemeInvalidSlideIndex", testGetSlidesThemeColorSchemeInvalidSlideIndex),
        ("testGetSlidesThemeColorSchemeInvalidPassword", testGetSlidesThemeColorSchemeInvalidPassword),
        ("testGetSlidesThemeColorSchemeInvalidFolder", testGetSlidesThemeColorSchemeInvalidFolder),
        ("testGetSlidesThemeColorSchemeInvalidStorage", testGetSlidesThemeColorSchemeInvalidStorage),
        ("testGetSlidesThemeFontScheme", testGetSlidesThemeFontScheme),
        ("testGetSlidesThemeFontSchemeInvalidName", testGetSlidesThemeFontSchemeInvalidName),
        ("testGetSlidesThemeFontSchemeInvalidSlideIndex", testGetSlidesThemeFontSchemeInvalidSlideIndex),
        ("testGetSlidesThemeFontSchemeInvalidPassword", testGetSlidesThemeFontSchemeInvalidPassword),
        ("testGetSlidesThemeFontSchemeInvalidFolder", testGetSlidesThemeFontSchemeInvalidFolder),
        ("testGetSlidesThemeFontSchemeInvalidStorage", testGetSlidesThemeFontSchemeInvalidStorage),
        ("testGetSlidesThemeFormatScheme", testGetSlidesThemeFormatScheme),
        ("testGetSlidesThemeFormatSchemeInvalidName", testGetSlidesThemeFormatSchemeInvalidName),
        ("testGetSlidesThemeFormatSchemeInvalidSlideIndex", testGetSlidesThemeFormatSchemeInvalidSlideIndex),
        ("testGetSlidesThemeFormatSchemeInvalidPassword", testGetSlidesThemeFormatSchemeInvalidPassword),
        ("testGetSlidesThemeFormatSchemeInvalidFolder", testGetSlidesThemeFormatSchemeInvalidFolder),
        ("testGetSlidesThemeFormatSchemeInvalidStorage", testGetSlidesThemeFormatSchemeInvalidStorage),
        ("testGetSlidesViewProperties", testGetSlidesViewProperties),
        ("testGetSlidesViewPropertiesInvalidName", testGetSlidesViewPropertiesInvalidName),
        ("testGetSlidesViewPropertiesInvalidPassword", testGetSlidesViewPropertiesInvalidPassword),
        ("testGetSlidesViewPropertiesInvalidFolder", testGetSlidesViewPropertiesInvalidFolder),
        ("testGetSlidesViewPropertiesInvalidStorage", testGetSlidesViewPropertiesInvalidStorage),
        ("testGetSubshapeParagraphPortion", testGetSubshapeParagraphPortion),
        ("testGetSubshapeParagraphPortionInvalidName", testGetSubshapeParagraphPortionInvalidName),
        ("testGetSubshapeParagraphPortionInvalidSlideIndex", testGetSubshapeParagraphPortionInvalidSlideIndex),
        ("testGetSubshapeParagraphPortionInvalidPath", testGetSubshapeParagraphPortionInvalidPath),
        ("testGetSubshapeParagraphPortionInvalidShapeIndex", testGetSubshapeParagraphPortionInvalidShapeIndex),
        ("testGetSubshapeParagraphPortionInvalidParagraphIndex", testGetSubshapeParagraphPortionInvalidParagraphIndex),
        ("testGetSubshapeParagraphPortionInvalidPortionIndex", testGetSubshapeParagraphPortionInvalidPortionIndex),
        ("testGetSubshapeParagraphPortionInvalidPassword", testGetSubshapeParagraphPortionInvalidPassword),
        ("testGetSubshapeParagraphPortionInvalidFolder", testGetSubshapeParagraphPortionInvalidFolder),
        ("testGetSubshapeParagraphPortionInvalidStorage", testGetSubshapeParagraphPortionInvalidStorage),
        ("testGetSubshapeParagraphPortions", testGetSubshapeParagraphPortions),
        ("testGetSubshapeParagraphPortionsInvalidName", testGetSubshapeParagraphPortionsInvalidName),
        ("testGetSubshapeParagraphPortionsInvalidSlideIndex", testGetSubshapeParagraphPortionsInvalidSlideIndex),
        ("testGetSubshapeParagraphPortionsInvalidPath", testGetSubshapeParagraphPortionsInvalidPath),
        ("testGetSubshapeParagraphPortionsInvalidShapeIndex", testGetSubshapeParagraphPortionsInvalidShapeIndex),
        ("testGetSubshapeParagraphPortionsInvalidParagraphIndex", testGetSubshapeParagraphPortionsInvalidParagraphIndex),
        ("testGetSubshapeParagraphPortionsInvalidPassword", testGetSubshapeParagraphPortionsInvalidPassword),
        ("testGetSubshapeParagraphPortionsInvalidFolder", testGetSubshapeParagraphPortionsInvalidFolder),
        ("testGetSubshapeParagraphPortionsInvalidStorage", testGetSubshapeParagraphPortionsInvalidStorage),
        ("testMoveFile", testMoveFile),
        ("testMoveFileInvalidSrcPath", testMoveFileInvalidSrcPath),
        ("testMoveFileInvalidDestPath", testMoveFileInvalidDestPath),
        ("testMoveFileInvalidSrcStorageName", testMoveFileInvalidSrcStorageName),
        ("testMoveFileInvalidDestStorageName", testMoveFileInvalidDestStorageName),
        ("testMoveFileInvalidVersionId", testMoveFileInvalidVersionId),
        ("testMoveFolder", testMoveFolder),
        ("testMoveFolderInvalidSrcPath", testMoveFolderInvalidSrcPath),
        ("testMoveFolderInvalidDestPath", testMoveFolderInvalidDestPath),
        ("testMoveFolderInvalidSrcStorageName", testMoveFolderInvalidSrcStorageName),
        ("testMoveFolderInvalidDestStorageName", testMoveFolderInvalidDestStorageName),
        ("testObjectExists", testObjectExists),
        ("testObjectExistsInvalidPath", testObjectExistsInvalidPath),
        ("testObjectExistsInvalidStorageName", testObjectExistsInvalidStorageName),
        ("testObjectExistsInvalidVersionId", testObjectExistsInvalidVersionId),
        ("testPostAddNewParagraph", testPostAddNewParagraph),
        ("testPostAddNewParagraphInvalidName", testPostAddNewParagraphInvalidName),
        ("testPostAddNewParagraphInvalidSlideIndex", testPostAddNewParagraphInvalidSlideIndex),
        ("testPostAddNewParagraphInvalidShapeIndex", testPostAddNewParagraphInvalidShapeIndex),
        ("testPostAddNewParagraphInvalidDto", testPostAddNewParagraphInvalidDto),
        ("testPostAddNewParagraphInvalidPosition", testPostAddNewParagraphInvalidPosition),
        ("testPostAddNewParagraphInvalidPassword", testPostAddNewParagraphInvalidPassword),
        ("testPostAddNewParagraphInvalidFolder", testPostAddNewParagraphInvalidFolder),
        ("testPostAddNewParagraphInvalidStorage", testPostAddNewParagraphInvalidStorage),
        ("testPostAddNewPortion", testPostAddNewPortion),
        ("testPostAddNewPortionInvalidName", testPostAddNewPortionInvalidName),
        ("testPostAddNewPortionInvalidSlideIndex", testPostAddNewPortionInvalidSlideIndex),
        ("testPostAddNewPortionInvalidShapeIndex", testPostAddNewPortionInvalidShapeIndex),
        ("testPostAddNewPortionInvalidParagraphIndex", testPostAddNewPortionInvalidParagraphIndex),
        ("testPostAddNewPortionInvalidDto", testPostAddNewPortionInvalidDto),
        ("testPostAddNewPortionInvalidPosition", testPostAddNewPortionInvalidPosition),
        ("testPostAddNewPortionInvalidPassword", testPostAddNewPortionInvalidPassword),
        ("testPostAddNewPortionInvalidFolder", testPostAddNewPortionInvalidFolder),
        ("testPostAddNewPortionInvalidStorage", testPostAddNewPortionInvalidStorage),
        ("testPostAddNewShape", testPostAddNewShape),
        ("testPostAddNewShapeInvalidName", testPostAddNewShapeInvalidName),
        ("testPostAddNewShapeInvalidSlideIndex", testPostAddNewShapeInvalidSlideIndex),
        ("testPostAddNewShapeInvalidDto", testPostAddNewShapeInvalidDto),
        ("testPostAddNewShapeInvalidShapeToClone", testPostAddNewShapeInvalidShapeToClone),
        ("testPostAddNewShapeInvalidPosition", testPostAddNewShapeInvalidPosition),
        ("testPostAddNewShapeInvalidPassword", testPostAddNewShapeInvalidPassword),
        ("testPostAddNewShapeInvalidFolder", testPostAddNewShapeInvalidFolder),
        ("testPostAddNewShapeInvalidStorage", testPostAddNewShapeInvalidStorage),
        ("testPostAddNewSubshape", testPostAddNewSubshape),
        ("testPostAddNewSubshapeInvalidName", testPostAddNewSubshapeInvalidName),
        ("testPostAddNewSubshapeInvalidSlideIndex", testPostAddNewSubshapeInvalidSlideIndex),
        ("testPostAddNewSubshapeInvalidPath", testPostAddNewSubshapeInvalidPath),
        ("testPostAddNewSubshapeInvalidDto", testPostAddNewSubshapeInvalidDto),
        ("testPostAddNewSubshapeInvalidShapeToClone", testPostAddNewSubshapeInvalidShapeToClone),
        ("testPostAddNewSubshapeInvalidPosition", testPostAddNewSubshapeInvalidPosition),
        ("testPostAddNewSubshapeInvalidPassword", testPostAddNewSubshapeInvalidPassword),
        ("testPostAddNewSubshapeInvalidFolder", testPostAddNewSubshapeInvalidFolder),
        ("testPostAddNewSubshapeInvalidStorage", testPostAddNewSubshapeInvalidStorage),
        ("testPostAddNewSubshapeParagraph", testPostAddNewSubshapeParagraph),
        ("testPostAddNewSubshapeParagraphInvalidName", testPostAddNewSubshapeParagraphInvalidName),
        ("testPostAddNewSubshapeParagraphInvalidSlideIndex", testPostAddNewSubshapeParagraphInvalidSlideIndex),
        ("testPostAddNewSubshapeParagraphInvalidPath", testPostAddNewSubshapeParagraphInvalidPath),
        ("testPostAddNewSubshapeParagraphInvalidShapeIndex", testPostAddNewSubshapeParagraphInvalidShapeIndex),
        ("testPostAddNewSubshapeParagraphInvalidDto", testPostAddNewSubshapeParagraphInvalidDto),
        ("testPostAddNewSubshapeParagraphInvalidPosition", testPostAddNewSubshapeParagraphInvalidPosition),
        ("testPostAddNewSubshapeParagraphInvalidPassword", testPostAddNewSubshapeParagraphInvalidPassword),
        ("testPostAddNewSubshapeParagraphInvalidFolder", testPostAddNewSubshapeParagraphInvalidFolder),
        ("testPostAddNewSubshapeParagraphInvalidStorage", testPostAddNewSubshapeParagraphInvalidStorage),
        ("testPostAddNewSubshapePortion", testPostAddNewSubshapePortion),
        ("testPostAddNewSubshapePortionInvalidName", testPostAddNewSubshapePortionInvalidName),
        ("testPostAddNewSubshapePortionInvalidSlideIndex", testPostAddNewSubshapePortionInvalidSlideIndex),
        ("testPostAddNewSubshapePortionInvalidPath", testPostAddNewSubshapePortionInvalidPath),
        ("testPostAddNewSubshapePortionInvalidShapeIndex", testPostAddNewSubshapePortionInvalidShapeIndex),
        ("testPostAddNewSubshapePortionInvalidParagraphIndex", testPostAddNewSubshapePortionInvalidParagraphIndex),
        ("testPostAddNewSubshapePortionInvalidDto", testPostAddNewSubshapePortionInvalidDto),
        ("testPostAddNewSubshapePortionInvalidPosition", testPostAddNewSubshapePortionInvalidPosition),
        ("testPostAddNewSubshapePortionInvalidPassword", testPostAddNewSubshapePortionInvalidPassword),
        ("testPostAddNewSubshapePortionInvalidFolder", testPostAddNewSubshapePortionInvalidFolder),
        ("testPostAddNewSubshapePortionInvalidStorage", testPostAddNewSubshapePortionInvalidStorage),
        ("testPostAddNotesSlide", testPostAddNotesSlide),
        ("testPostAddNotesSlideInvalidName", testPostAddNotesSlideInvalidName),
        ("testPostAddNotesSlideInvalidSlideIndex", testPostAddNotesSlideInvalidSlideIndex),
        ("testPostAddNotesSlideInvalidDto", testPostAddNotesSlideInvalidDto),
        ("testPostAddNotesSlideInvalidPassword", testPostAddNotesSlideInvalidPassword),
        ("testPostAddNotesSlideInvalidFolder", testPostAddNotesSlideInvalidFolder),
        ("testPostAddNotesSlideInvalidStorage", testPostAddNotesSlideInvalidStorage),
        ("testPostAlignShapes", testPostAlignShapes),
        ("testPostAlignShapesInvalidName", testPostAlignShapesInvalidName),
        ("testPostAlignShapesInvalidSlideIndex", testPostAlignShapesInvalidSlideIndex),
        ("testPostAlignShapesInvalidAlignmentType", testPostAlignShapesInvalidAlignmentType),
        ("testPostAlignShapesInvalidAlignToSlide", testPostAlignShapesInvalidAlignToSlide),
        ("testPostAlignShapesInvalidShapes", testPostAlignShapesInvalidShapes),
        ("testPostAlignShapesInvalidPassword", testPostAlignShapesInvalidPassword),
        ("testPostAlignShapesInvalidFolder", testPostAlignShapesInvalidFolder),
        ("testPostAlignShapesInvalidStorage", testPostAlignShapesInvalidStorage),
        ("testPostChartCategory", testPostChartCategory),
        ("testPostChartCategoryInvalidName", testPostChartCategoryInvalidName),
        ("testPostChartCategoryInvalidSlideIndex", testPostChartCategoryInvalidSlideIndex),
        ("testPostChartCategoryInvalidShapeIndex", testPostChartCategoryInvalidShapeIndex),
        ("testPostChartCategoryInvalidCategory", testPostChartCategoryInvalidCategory),
        ("testPostChartCategoryInvalidPassword", testPostChartCategoryInvalidPassword),
        ("testPostChartCategoryInvalidFolder", testPostChartCategoryInvalidFolder),
        ("testPostChartCategoryInvalidStorage", testPostChartCategoryInvalidStorage),
        ("testPostChartDataPoint", testPostChartDataPoint),
        ("testPostChartDataPointInvalidName", testPostChartDataPointInvalidName),
        ("testPostChartDataPointInvalidSlideIndex", testPostChartDataPointInvalidSlideIndex),
        ("testPostChartDataPointInvalidShapeIndex", testPostChartDataPointInvalidShapeIndex),
        ("testPostChartDataPointInvalidSeriesIndex", testPostChartDataPointInvalidSeriesIndex),
        ("testPostChartDataPointInvalidDataPoint", testPostChartDataPointInvalidDataPoint),
        ("testPostChartDataPointInvalidPassword", testPostChartDataPointInvalidPassword),
        ("testPostChartDataPointInvalidFolder", testPostChartDataPointInvalidFolder),
        ("testPostChartDataPointInvalidStorage", testPostChartDataPointInvalidStorage),
        ("testPostChartSeries", testPostChartSeries),
        ("testPostChartSeriesInvalidName", testPostChartSeriesInvalidName),
        ("testPostChartSeriesInvalidSlideIndex", testPostChartSeriesInvalidSlideIndex),
        ("testPostChartSeriesInvalidShapeIndex", testPostChartSeriesInvalidShapeIndex),
        ("testPostChartSeriesInvalidSeries", testPostChartSeriesInvalidSeries),
        ("testPostChartSeriesInvalidPassword", testPostChartSeriesInvalidPassword),
        ("testPostChartSeriesInvalidFolder", testPostChartSeriesInvalidFolder),
        ("testPostChartSeriesInvalidStorage", testPostChartSeriesInvalidStorage),
        ("testPostCopyLayoutSlideFromSourcePresentation", testPostCopyLayoutSlideFromSourcePresentation),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidName", testPostCopyLayoutSlideFromSourcePresentationInvalidName),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFrom", testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFrom),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition", testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword", testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage", testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidPassword", testPostCopyLayoutSlideFromSourcePresentationInvalidPassword),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidFolder", testPostCopyLayoutSlideFromSourcePresentationInvalidFolder),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidStorage", testPostCopyLayoutSlideFromSourcePresentationInvalidStorage),
        ("testPostCopyMasterSlideFromSourcePresentation", testPostCopyMasterSlideFromSourcePresentation),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidName", testPostCopyMasterSlideFromSourcePresentationInvalidName),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidCloneFrom", testPostCopyMasterSlideFromSourcePresentationInvalidCloneFrom),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition", testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword", testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage", testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidApplyToAll", testPostCopyMasterSlideFromSourcePresentationInvalidApplyToAll),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidPassword", testPostCopyMasterSlideFromSourcePresentationInvalidPassword),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidFolder", testPostCopyMasterSlideFromSourcePresentationInvalidFolder),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidStorage", testPostCopyMasterSlideFromSourcePresentationInvalidStorage),
        ("testPostExportImageWithDefaultFormat", testPostExportImageWithDefaultFormat),
        ("testPostExportImageWithDefaultFormatInvalidDocument", testPostExportImageWithDefaultFormatInvalidDocument),
        ("testPostExportImageWithDefaultFormatInvalidIndex", testPostExportImageWithDefaultFormatInvalidIndex),
        ("testPostExportImageWithDefaultFormatInvalidPassword", testPostExportImageWithDefaultFormatInvalidPassword),
        ("testPostExportImageWithFormat", testPostExportImageWithFormat),
        ("testPostExportImageWithFormatInvalidDocument", testPostExportImageWithFormatInvalidDocument),
        ("testPostExportImageWithFormatInvalidIndex", testPostExportImageWithFormatInvalidIndex),
        ("testPostExportImageWithFormatInvalidFormat", testPostExportImageWithFormatInvalidFormat),
        ("testPostExportImageWithFormatInvalidPassword", testPostExportImageWithFormatInvalidPassword),
        ("testPostExportImagesFromRequestWithFormat", testPostExportImagesFromRequestWithFormat),
        ("testPostExportImagesFromRequestWithFormatInvalidDocument", testPostExportImagesFromRequestWithFormatInvalidDocument),
        ("testPostExportImagesFromRequestWithFormatInvalidFormat", testPostExportImagesFromRequestWithFormatInvalidFormat),
        ("testPostExportImagesFromRequestWithFormatInvalidPassword", testPostExportImagesFromRequestWithFormatInvalidPassword),
        ("testPostExportImagesWithDefaultFormat", testPostExportImagesWithDefaultFormat),
        ("testPostExportImagesWithDefaultFormatInvalidName", testPostExportImagesWithDefaultFormatInvalidName),
        ("testPostExportImagesWithDefaultFormatInvalidPassword", testPostExportImagesWithDefaultFormatInvalidPassword),
        ("testPostExportImagesWithDefaultFormatInvalidFolder", testPostExportImagesWithDefaultFormatInvalidFolder),
        ("testPostExportImagesWithDefaultFormatInvalidStorage", testPostExportImagesWithDefaultFormatInvalidStorage),
        ("testPostExportImagesWithFormat", testPostExportImagesWithFormat),
        ("testPostExportImagesWithFormatInvalidName", testPostExportImagesWithFormatInvalidName),
        ("testPostExportImagesWithFormatInvalidFormat", testPostExportImagesWithFormatInvalidFormat),
        ("testPostExportImagesWithFormatInvalidPassword", testPostExportImagesWithFormatInvalidPassword),
        ("testPostExportImagesWithFormatInvalidFolder", testPostExportImagesWithFormatInvalidFolder),
        ("testPostExportImagesWithFormatInvalidStorage", testPostExportImagesWithFormatInvalidStorage),
        ("testPostExportShape", testPostExportShape),
        ("testPostExportShapeInvalidDocument", testPostExportShapeInvalidDocument),
        ("testPostExportShapeInvalidSlideIndex", testPostExportShapeInvalidSlideIndex),
        ("testPostExportShapeInvalidShapeIndex", testPostExportShapeInvalidShapeIndex),
        ("testPostExportShapeInvalidFormat", testPostExportShapeInvalidFormat),
        ("testPostExportShapeInvalidPassword", testPostExportShapeInvalidPassword),
        ("testPostExportShapeInvalidStorage", testPostExportShapeInvalidStorage),
        ("testPostExportShapeInvalidScaleX", testPostExportShapeInvalidScaleX),
        ("testPostExportShapeInvalidScaleY", testPostExportShapeInvalidScaleY),
        ("testPostExportShapeInvalidBounds", testPostExportShapeInvalidBounds),
        ("testPostExportShapeInvalidFontsFolder", testPostExportShapeInvalidFontsFolder),
        ("testPostExportSlide", testPostExportSlide),
        ("testPostExportSlideInvalidDocument", testPostExportSlideInvalidDocument),
        ("testPostExportSlideInvalidSlideIndex", testPostExportSlideInvalidSlideIndex),
        ("testPostExportSlideInvalidFormat", testPostExportSlideInvalidFormat),
        ("testPostExportSlideInvalidWidth", testPostExportSlideInvalidWidth),
        ("testPostExportSlideInvalidHeight", testPostExportSlideInvalidHeight),
        ("testPostExportSlideInvalidPassword", testPostExportSlideInvalidPassword),
        ("testPostExportSlideInvalidStorage", testPostExportSlideInvalidStorage),
        ("testPostExportSlideInvalidFontsFolder", testPostExportSlideInvalidFontsFolder),
        ("testPostGetNotesSlide", testPostGetNotesSlide),
        ("testPostGetNotesSlideInvalidDocument", testPostGetNotesSlideInvalidDocument),
        ("testPostGetNotesSlideInvalidSlideIndex", testPostGetNotesSlideInvalidSlideIndex),
        ("testPostGetNotesSlideInvalidPassword", testPostGetNotesSlideInvalidPassword),
        ("testPostGetNotesSlideExists", testPostGetNotesSlideExists),
        ("testPostGetNotesSlideExistsInvalidDocument", testPostGetNotesSlideExistsInvalidDocument),
        ("testPostGetNotesSlideExistsInvalidSlideIndex", testPostGetNotesSlideExistsInvalidSlideIndex),
        ("testPostGetNotesSlideExistsInvalidPassword", testPostGetNotesSlideExistsInvalidPassword),
        ("testPostGetNotesSlideWithFormat", testPostGetNotesSlideWithFormat),
        ("testPostGetNotesSlideWithFormatInvalidDocument", testPostGetNotesSlideWithFormatInvalidDocument),
        ("testPostGetNotesSlideWithFormatInvalidSlideIndex", testPostGetNotesSlideWithFormatInvalidSlideIndex),
        ("testPostGetNotesSlideWithFormatInvalidFormat", testPostGetNotesSlideWithFormatInvalidFormat),
        ("testPostGetNotesSlideWithFormatInvalidWidth", testPostGetNotesSlideWithFormatInvalidWidth),
        ("testPostGetNotesSlideWithFormatInvalidHeight", testPostGetNotesSlideWithFormatInvalidHeight),
        ("testPostGetNotesSlideWithFormatInvalidPassword", testPostGetNotesSlideWithFormatInvalidPassword),
        ("testPostGetNotesSlideWithFormatInvalidFontsFolder", testPostGetNotesSlideWithFormatInvalidFontsFolder),
        ("testPostImagesFromRequestWithDefaultFormat", testPostImagesFromRequestWithDefaultFormat),
        ("testPostImagesFromRequestWithDefaultFormatInvalidDocument", testPostImagesFromRequestWithDefaultFormatInvalidDocument),
        ("testPostImagesFromRequestWithDefaultFormatInvalidPassword", testPostImagesFromRequestWithDefaultFormatInvalidPassword),
        ("testPostNotesSlideAddNewParagraph", testPostNotesSlideAddNewParagraph),
        ("testPostNotesSlideAddNewParagraphInvalidName", testPostNotesSlideAddNewParagraphInvalidName),
        ("testPostNotesSlideAddNewParagraphInvalidSlideIndex", testPostNotesSlideAddNewParagraphInvalidSlideIndex),
        ("testPostNotesSlideAddNewParagraphInvalidShapeIndex", testPostNotesSlideAddNewParagraphInvalidShapeIndex),
        ("testPostNotesSlideAddNewParagraphInvalidDto", testPostNotesSlideAddNewParagraphInvalidDto),
        ("testPostNotesSlideAddNewParagraphInvalidPosition", testPostNotesSlideAddNewParagraphInvalidPosition),
        ("testPostNotesSlideAddNewParagraphInvalidPassword", testPostNotesSlideAddNewParagraphInvalidPassword),
        ("testPostNotesSlideAddNewParagraphInvalidFolder", testPostNotesSlideAddNewParagraphInvalidFolder),
        ("testPostNotesSlideAddNewParagraphInvalidStorage", testPostNotesSlideAddNewParagraphInvalidStorage),
        ("testPostNotesSlideAddNewPortion", testPostNotesSlideAddNewPortion),
        ("testPostNotesSlideAddNewPortionInvalidName", testPostNotesSlideAddNewPortionInvalidName),
        ("testPostNotesSlideAddNewPortionInvalidSlideIndex", testPostNotesSlideAddNewPortionInvalidSlideIndex),
        ("testPostNotesSlideAddNewPortionInvalidShapeIndex", testPostNotesSlideAddNewPortionInvalidShapeIndex),
        ("testPostNotesSlideAddNewPortionInvalidParagraphIndex", testPostNotesSlideAddNewPortionInvalidParagraphIndex),
        ("testPostNotesSlideAddNewPortionInvalidDto", testPostNotesSlideAddNewPortionInvalidDto),
        ("testPostNotesSlideAddNewPortionInvalidPosition", testPostNotesSlideAddNewPortionInvalidPosition),
        ("testPostNotesSlideAddNewPortionInvalidPassword", testPostNotesSlideAddNewPortionInvalidPassword),
        ("testPostNotesSlideAddNewPortionInvalidFolder", testPostNotesSlideAddNewPortionInvalidFolder),
        ("testPostNotesSlideAddNewPortionInvalidStorage", testPostNotesSlideAddNewPortionInvalidStorage),
        ("testPostNotesSlideAddNewShape", testPostNotesSlideAddNewShape),
        ("testPostNotesSlideAddNewShapeInvalidName", testPostNotesSlideAddNewShapeInvalidName),
        ("testPostNotesSlideAddNewShapeInvalidSlideIndex", testPostNotesSlideAddNewShapeInvalidSlideIndex),
        ("testPostNotesSlideAddNewShapeInvalidDto", testPostNotesSlideAddNewShapeInvalidDto),
        ("testPostNotesSlideAddNewShapeInvalidShapeToClone", testPostNotesSlideAddNewShapeInvalidShapeToClone),
        ("testPostNotesSlideAddNewShapeInvalidPosition", testPostNotesSlideAddNewShapeInvalidPosition),
        ("testPostNotesSlideAddNewShapeInvalidPassword", testPostNotesSlideAddNewShapeInvalidPassword),
        ("testPostNotesSlideAddNewShapeInvalidFolder", testPostNotesSlideAddNewShapeInvalidFolder),
        ("testPostNotesSlideAddNewShapeInvalidStorage", testPostNotesSlideAddNewShapeInvalidStorage),
        ("testPostNotesSlideShapeSaveAs", testPostNotesSlideShapeSaveAs),
        ("testPostNotesSlideShapeSaveAsInvalidName", testPostNotesSlideShapeSaveAsInvalidName),
        ("testPostNotesSlideShapeSaveAsInvalidSlideIndex", testPostNotesSlideShapeSaveAsInvalidSlideIndex),
        ("testPostNotesSlideShapeSaveAsInvalidShapeIndex", testPostNotesSlideShapeSaveAsInvalidShapeIndex),
        ("testPostNotesSlideShapeSaveAsInvalidFormat", testPostNotesSlideShapeSaveAsInvalidFormat),
        ("testPostNotesSlideShapeSaveAsInvalidOptions", testPostNotesSlideShapeSaveAsInvalidOptions),
        ("testPostNotesSlideShapeSaveAsInvalidScaleX", testPostNotesSlideShapeSaveAsInvalidScaleX),
        ("testPostNotesSlideShapeSaveAsInvalidScaleY", testPostNotesSlideShapeSaveAsInvalidScaleY),
        ("testPostNotesSlideShapeSaveAsInvalidBounds", testPostNotesSlideShapeSaveAsInvalidBounds),
        ("testPostNotesSlideShapeSaveAsInvalidPassword", testPostNotesSlideShapeSaveAsInvalidPassword),
        ("testPostNotesSlideShapeSaveAsInvalidFolder", testPostNotesSlideShapeSaveAsInvalidFolder),
        ("testPostNotesSlideShapeSaveAsInvalidStorage", testPostNotesSlideShapeSaveAsInvalidStorage),
        ("testPostNotesSlideShapeSaveAsInvalidFontsFolder", testPostNotesSlideShapeSaveAsInvalidFontsFolder),
        ("testPostPresentationMerge", testPostPresentationMerge),
        ("testPostPresentationMergeInvalidName", testPostPresentationMergeInvalidName),
        ("testPostPresentationMergeInvalidRequest", testPostPresentationMergeInvalidRequest),
        ("testPostPresentationMergeInvalidPassword", testPostPresentationMergeInvalidPassword),
        ("testPostPresentationMergeInvalidFolder", testPostPresentationMergeInvalidFolder),
        ("testPostPresentationMergeInvalidStorage", testPostPresentationMergeInvalidStorage),
        ("testPostPresentationReplaceText", testPostPresentationReplaceText),
        ("testPostPresentationReplaceTextInvalidDocument", testPostPresentationReplaceTextInvalidDocument),
        ("testPostPresentationReplaceTextInvalidOldValue", testPostPresentationReplaceTextInvalidOldValue),
        ("testPostPresentationReplaceTextInvalidNewValue", testPostPresentationReplaceTextInvalidNewValue),
        ("testPostPresentationReplaceTextInvalidIgnoreCase", testPostPresentationReplaceTextInvalidIgnoreCase),
        ("testPostPresentationReplaceTextInvalidPassword", testPostPresentationReplaceTextInvalidPassword),
        ("testPostPresentationSplit", testPostPresentationSplit),
        ("testPostPresentationSplitInvalidDocument", testPostPresentationSplitInvalidDocument),
        ("testPostPresentationSplitInvalidFormat", testPostPresentationSplitInvalidFormat),
        ("testPostPresentationSplitInvalidWidth", testPostPresentationSplitInvalidWidth),
        ("testPostPresentationSplitInvalidHeight", testPostPresentationSplitInvalidHeight),
        ("testPostPresentationSplitInvalidFrom", testPostPresentationSplitInvalidFrom),
        ("testPostPresentationSplitInvalidTo", testPostPresentationSplitInvalidTo),
        ("testPostPresentationSplitInvalidPassword", testPostPresentationSplitInvalidPassword),
        ("testPostPresentationSplitInvalidStorage", testPostPresentationSplitInvalidStorage),
        ("testPostPresentationSplitInvalidFontsFolder", testPostPresentationSplitInvalidFontsFolder),
        ("testPostSection", testPostSection),
        ("testPostSectionInvalidName", testPostSectionInvalidName),
        ("testPostSectionInvalidSectionName", testPostSectionInvalidSectionName),
        ("testPostSectionInvalidSlideIndex", testPostSectionInvalidSlideIndex),
        ("testPostSectionInvalidPassword", testPostSectionInvalidPassword),
        ("testPostSectionInvalidFolder", testPostSectionInvalidFolder),
        ("testPostSectionInvalidStorage", testPostSectionInvalidStorage),
        ("testPostSectionMove", testPostSectionMove),
        ("testPostSectionMoveInvalidName", testPostSectionMoveInvalidName),
        ("testPostSectionMoveInvalidSectionIndex", testPostSectionMoveInvalidSectionIndex),
        ("testPostSectionMoveInvalidNewPosition", testPostSectionMoveInvalidNewPosition),
        ("testPostSectionMoveInvalidPassword", testPostSectionMoveInvalidPassword),
        ("testPostSectionMoveInvalidFolder", testPostSectionMoveInvalidFolder),
        ("testPostSectionMoveInvalidStorage", testPostSectionMoveInvalidStorage),
        ("testPostShapeSaveAs", testPostShapeSaveAs),
        ("testPostShapeSaveAsInvalidName", testPostShapeSaveAsInvalidName),
        ("testPostShapeSaveAsInvalidSlideIndex", testPostShapeSaveAsInvalidSlideIndex),
        ("testPostShapeSaveAsInvalidShapeIndex", testPostShapeSaveAsInvalidShapeIndex),
        ("testPostShapeSaveAsInvalidFormat", testPostShapeSaveAsInvalidFormat),
        ("testPostShapeSaveAsInvalidOptions", testPostShapeSaveAsInvalidOptions),
        ("testPostShapeSaveAsInvalidScaleX", testPostShapeSaveAsInvalidScaleX),
        ("testPostShapeSaveAsInvalidScaleY", testPostShapeSaveAsInvalidScaleY),
        ("testPostShapeSaveAsInvalidBounds", testPostShapeSaveAsInvalidBounds),
        ("testPostShapeSaveAsInvalidPassword", testPostShapeSaveAsInvalidPassword),
        ("testPostShapeSaveAsInvalidFolder", testPostShapeSaveAsInvalidFolder),
        ("testPostShapeSaveAsInvalidStorage", testPostShapeSaveAsInvalidStorage),
        ("testPostShapeSaveAsInvalidFontsFolder", testPostShapeSaveAsInvalidFontsFolder),
        ("testPostSlideAnimationEffect", testPostSlideAnimationEffect),
        ("testPostSlideAnimationEffectInvalidName", testPostSlideAnimationEffectInvalidName),
        ("testPostSlideAnimationEffectInvalidSlideIndex", testPostSlideAnimationEffectInvalidSlideIndex),
        ("testPostSlideAnimationEffectInvalidEffect", testPostSlideAnimationEffectInvalidEffect),
        ("testPostSlideAnimationEffectInvalidPassword", testPostSlideAnimationEffectInvalidPassword),
        ("testPostSlideAnimationEffectInvalidFolder", testPostSlideAnimationEffectInvalidFolder),
        ("testPostSlideAnimationEffectInvalidStorage", testPostSlideAnimationEffectInvalidStorage),
        ("testPostSlideAnimationInteractiveSequence", testPostSlideAnimationInteractiveSequence),
        ("testPostSlideAnimationInteractiveSequenceInvalidName", testPostSlideAnimationInteractiveSequenceInvalidName),
        ("testPostSlideAnimationInteractiveSequenceInvalidSlideIndex", testPostSlideAnimationInteractiveSequenceInvalidSlideIndex),
        ("testPostSlideAnimationInteractiveSequenceInvalidSequence", testPostSlideAnimationInteractiveSequenceInvalidSequence),
        ("testPostSlideAnimationInteractiveSequenceInvalidPassword", testPostSlideAnimationInteractiveSequenceInvalidPassword),
        ("testPostSlideAnimationInteractiveSequenceInvalidFolder", testPostSlideAnimationInteractiveSequenceInvalidFolder),
        ("testPostSlideAnimationInteractiveSequenceInvalidStorage", testPostSlideAnimationInteractiveSequenceInvalidStorage),
        ("testPostSlideAnimationInteractiveSequenceEffect", testPostSlideAnimationInteractiveSequenceEffect),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidName", testPostSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testPostSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testPostSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidEffect", testPostSlideAnimationInteractiveSequenceEffectInvalidEffect),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidPassword", testPostSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidFolder", testPostSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidStorage", testPostSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testPostSlideReplaceText", testPostSlideReplaceText),
        ("testPostSlideReplaceTextInvalidDocument", testPostSlideReplaceTextInvalidDocument),
        ("testPostSlideReplaceTextInvalidSlideIndex", testPostSlideReplaceTextInvalidSlideIndex),
        ("testPostSlideReplaceTextInvalidOldValue", testPostSlideReplaceTextInvalidOldValue),
        ("testPostSlideReplaceTextInvalidNewValue", testPostSlideReplaceTextInvalidNewValue),
        ("testPostSlideReplaceTextInvalidIgnoreCase", testPostSlideReplaceTextInvalidIgnoreCase),
        ("testPostSlideReplaceTextInvalidPassword", testPostSlideReplaceTextInvalidPassword),
        ("testPostSlideSaveAs", testPostSlideSaveAs),
        ("testPostSlideSaveAsInvalidName", testPostSlideSaveAsInvalidName),
        ("testPostSlideSaveAsInvalidSlideIndex", testPostSlideSaveAsInvalidSlideIndex),
        ("testPostSlideSaveAsInvalidFormat", testPostSlideSaveAsInvalidFormat),
        ("testPostSlideSaveAsInvalidOptions", testPostSlideSaveAsInvalidOptions),
        ("testPostSlideSaveAsInvalidWidth", testPostSlideSaveAsInvalidWidth),
        ("testPostSlideSaveAsInvalidHeight", testPostSlideSaveAsInvalidHeight),
        ("testPostSlideSaveAsInvalidPassword", testPostSlideSaveAsInvalidPassword),
        ("testPostSlideSaveAsInvalidFolder", testPostSlideSaveAsInvalidFolder),
        ("testPostSlideSaveAsInvalidStorage", testPostSlideSaveAsInvalidStorage),
        ("testPostSlideSaveAsInvalidFontsFolder", testPostSlideSaveAsInvalidFontsFolder),
        ("testPostSlidesAdd", testPostSlidesAdd),
        ("testPostSlidesAddInvalidName", testPostSlidesAddInvalidName),
        ("testPostSlidesAddInvalidLayoutAlias", testPostSlidesAddInvalidLayoutAlias),
        ("testPostSlidesAddInvalidPosition", testPostSlidesAddInvalidPosition),
        ("testPostSlidesAddInvalidPassword", testPostSlidesAddInvalidPassword),
        ("testPostSlidesAddInvalidFolder", testPostSlidesAddInvalidFolder),
        ("testPostSlidesAddInvalidStorage", testPostSlidesAddInvalidStorage),
        ("testPostSlidesConvert", testPostSlidesConvert),
        ("testPostSlidesConvertInvalidDocument", testPostSlidesConvertInvalidDocument),
        ("testPostSlidesConvertInvalidFormat", testPostSlidesConvertInvalidFormat),
        ("testPostSlidesConvertInvalidPassword", testPostSlidesConvertInvalidPassword),
        ("testPostSlidesConvertInvalidStorage", testPostSlidesConvertInvalidStorage),
        ("testPostSlidesConvertInvalidFontsFolder", testPostSlidesConvertInvalidFontsFolder),
        ("testPostSlidesCopy", testPostSlidesCopy),
        ("testPostSlidesCopyInvalidName", testPostSlidesCopyInvalidName),
        ("testPostSlidesCopyInvalidSlideToCopy", testPostSlidesCopyInvalidSlideToCopy),
        ("testPostSlidesCopyInvalidPosition", testPostSlidesCopyInvalidPosition),
        ("testPostSlidesCopyInvalidSource", testPostSlidesCopyInvalidSource),
        ("testPostSlidesCopyInvalidSourcePassword", testPostSlidesCopyInvalidSourcePassword),
        ("testPostSlidesCopyInvalidSourceStorage", testPostSlidesCopyInvalidSourceStorage),
        ("testPostSlidesCopyInvalidPassword", testPostSlidesCopyInvalidPassword),
        ("testPostSlidesCopyInvalidFolder", testPostSlidesCopyInvalidFolder),
        ("testPostSlidesCopyInvalidStorage", testPostSlidesCopyInvalidStorage),
        ("testPostSlidesDocument", testPostSlidesDocument),
        ("testPostSlidesDocumentInvalidName", testPostSlidesDocumentInvalidName),
        ("testPostSlidesDocumentInvalidData", testPostSlidesDocumentInvalidData),
        ("testPostSlidesDocumentInvalidInputPassword", testPostSlidesDocumentInvalidInputPassword),
        ("testPostSlidesDocumentInvalidPassword", testPostSlidesDocumentInvalidPassword),
        ("testPostSlidesDocumentInvalidFolder", testPostSlidesDocumentInvalidFolder),
        ("testPostSlidesDocumentInvalidStorage", testPostSlidesDocumentInvalidStorage),
        ("testPostSlidesDocumentFromHtml", testPostSlidesDocumentFromHtml),
        ("testPostSlidesDocumentFromHtmlInvalidName", testPostSlidesDocumentFromHtmlInvalidName),
        ("testPostSlidesDocumentFromHtmlInvalidHtml", testPostSlidesDocumentFromHtmlInvalidHtml),
        ("testPostSlidesDocumentFromHtmlInvalidPassword", testPostSlidesDocumentFromHtmlInvalidPassword),
        ("testPostSlidesDocumentFromHtmlInvalidFolder", testPostSlidesDocumentFromHtmlInvalidFolder),
        ("testPostSlidesDocumentFromHtmlInvalidStorage", testPostSlidesDocumentFromHtmlInvalidStorage),
        ("testPostSlidesDocumentFromPdf", testPostSlidesDocumentFromPdf),
        ("testPostSlidesDocumentFromPdfInvalidName", testPostSlidesDocumentFromPdfInvalidName),
        ("testPostSlidesDocumentFromPdfInvalidPdf", testPostSlidesDocumentFromPdfInvalidPdf),
        ("testPostSlidesDocumentFromPdfInvalidPassword", testPostSlidesDocumentFromPdfInvalidPassword),
        ("testPostSlidesDocumentFromPdfInvalidFolder", testPostSlidesDocumentFromPdfInvalidFolder),
        ("testPostSlidesDocumentFromPdfInvalidStorage", testPostSlidesDocumentFromPdfInvalidStorage),
        ("testPostSlidesDocumentFromSource", testPostSlidesDocumentFromSource),
        ("testPostSlidesDocumentFromSourceInvalidName", testPostSlidesDocumentFromSourceInvalidName),
        ("testPostSlidesDocumentFromSourceInvalidSourcePath", testPostSlidesDocumentFromSourceInvalidSourcePath),
        ("testPostSlidesDocumentFromSourceInvalidSourcePassword", testPostSlidesDocumentFromSourceInvalidSourcePassword),
        ("testPostSlidesDocumentFromSourceInvalidSourceStorage", testPostSlidesDocumentFromSourceInvalidSourceStorage),
        ("testPostSlidesDocumentFromSourceInvalidPassword", testPostSlidesDocumentFromSourceInvalidPassword),
        ("testPostSlidesDocumentFromSourceInvalidFolder", testPostSlidesDocumentFromSourceInvalidFolder),
        ("testPostSlidesDocumentFromSourceInvalidStorage", testPostSlidesDocumentFromSourceInvalidStorage),
        ("testPostSlidesDocumentFromTemplate", testPostSlidesDocumentFromTemplate),
        ("testPostSlidesDocumentFromTemplateInvalidName", testPostSlidesDocumentFromTemplateInvalidName),
        ("testPostSlidesDocumentFromTemplateInvalidTemplatePath", testPostSlidesDocumentFromTemplateInvalidTemplatePath),
        ("testPostSlidesDocumentFromTemplateInvalidData", testPostSlidesDocumentFromTemplateInvalidData),
        ("testPostSlidesDocumentFromTemplateInvalidTemplatePassword", testPostSlidesDocumentFromTemplateInvalidTemplatePassword),
        ("testPostSlidesDocumentFromTemplateInvalidTemplateStorage", testPostSlidesDocumentFromTemplateInvalidTemplateStorage),
        ("testPostSlidesDocumentFromTemplateInvalidIsImageDataEmbedded", testPostSlidesDocumentFromTemplateInvalidIsImageDataEmbedded),
        ("testPostSlidesDocumentFromTemplateInvalidPassword", testPostSlidesDocumentFromTemplateInvalidPassword),
        ("testPostSlidesDocumentFromTemplateInvalidFolder", testPostSlidesDocumentFromTemplateInvalidFolder),
        ("testPostSlidesDocumentFromTemplateInvalidStorage", testPostSlidesDocumentFromTemplateInvalidStorage),
        ("testPostSlidesMerge", testPostSlidesMerge),
        ("testPostSlidesMergeInvalidFiles", testPostSlidesMergeInvalidFiles),
        ("testPostSlidesMergeInvalidRequest", testPostSlidesMergeInvalidRequest),
        ("testPostSlidesMergeInvalidPassword", testPostSlidesMergeInvalidPassword),
        ("testPostSlidesPipeline", testPostSlidesPipeline),
        ("testPostSlidesPipelineInvalidPipeline", testPostSlidesPipelineInvalidPipeline),
        ("testPostSlidesPipelineInvalidFiles", testPostSlidesPipelineInvalidFiles),
        ("testPostSlidesPresentationReplaceText", testPostSlidesPresentationReplaceText),
        ("testPostSlidesPresentationReplaceTextInvalidName", testPostSlidesPresentationReplaceTextInvalidName),
        ("testPostSlidesPresentationReplaceTextInvalidOldValue", testPostSlidesPresentationReplaceTextInvalidOldValue),
        ("testPostSlidesPresentationReplaceTextInvalidNewValue", testPostSlidesPresentationReplaceTextInvalidNewValue),
        ("testPostSlidesPresentationReplaceTextInvalidIgnoreCase", testPostSlidesPresentationReplaceTextInvalidIgnoreCase),
        ("testPostSlidesPresentationReplaceTextInvalidPassword", testPostSlidesPresentationReplaceTextInvalidPassword),
        ("testPostSlidesPresentationReplaceTextInvalidFolder", testPostSlidesPresentationReplaceTextInvalidFolder),
        ("testPostSlidesPresentationReplaceTextInvalidStorage", testPostSlidesPresentationReplaceTextInvalidStorage),
        ("testPostSlidesReorder", testPostSlidesReorder),
        ("testPostSlidesReorderInvalidName", testPostSlidesReorderInvalidName),
        ("testPostSlidesReorderInvalidSlideIndex", testPostSlidesReorderInvalidSlideIndex),
        ("testPostSlidesReorderInvalidNewPosition", testPostSlidesReorderInvalidNewPosition),
        ("testPostSlidesReorderInvalidPassword", testPostSlidesReorderInvalidPassword),
        ("testPostSlidesReorderInvalidFolder", testPostSlidesReorderInvalidFolder),
        ("testPostSlidesReorderInvalidStorage", testPostSlidesReorderInvalidStorage),
        ("testPostSlidesReorderMany", testPostSlidesReorderMany),
        ("testPostSlidesReorderManyInvalidName", testPostSlidesReorderManyInvalidName),
        ("testPostSlidesReorderManyInvalidOldPositions", testPostSlidesReorderManyInvalidOldPositions),
        ("testPostSlidesReorderManyInvalidNewPositions", testPostSlidesReorderManyInvalidNewPositions),
        ("testPostSlidesReorderManyInvalidPassword", testPostSlidesReorderManyInvalidPassword),
        ("testPostSlidesReorderManyInvalidFolder", testPostSlidesReorderManyInvalidFolder),
        ("testPostSlidesReorderManyInvalidStorage", testPostSlidesReorderManyInvalidStorage),
        ("testPostSlidesSaveAs", testPostSlidesSaveAs),
        ("testPostSlidesSaveAsInvalidName", testPostSlidesSaveAsInvalidName),
        ("testPostSlidesSaveAsInvalidFormat", testPostSlidesSaveAsInvalidFormat),
        ("testPostSlidesSaveAsInvalidOptions", testPostSlidesSaveAsInvalidOptions),
        ("testPostSlidesSaveAsInvalidPassword", testPostSlidesSaveAsInvalidPassword),
        ("testPostSlidesSaveAsInvalidFolder", testPostSlidesSaveAsInvalidFolder),
        ("testPostSlidesSaveAsInvalidStorage", testPostSlidesSaveAsInvalidStorage),
        ("testPostSlidesSaveAsInvalidFontsFolder", testPostSlidesSaveAsInvalidFontsFolder),
        ("testPostSlidesSetDocumentProperties", testPostSlidesSetDocumentProperties),
        ("testPostSlidesSetDocumentPropertiesInvalidName", testPostSlidesSetDocumentPropertiesInvalidName),
        ("testPostSlidesSetDocumentPropertiesInvalidProperties", testPostSlidesSetDocumentPropertiesInvalidProperties),
        ("testPostSlidesSetDocumentPropertiesInvalidPassword", testPostSlidesSetDocumentPropertiesInvalidPassword),
        ("testPostSlidesSetDocumentPropertiesInvalidFolder", testPostSlidesSetDocumentPropertiesInvalidFolder),
        ("testPostSlidesSetDocumentPropertiesInvalidStorage", testPostSlidesSetDocumentPropertiesInvalidStorage),
        ("testPostSlidesSlideReplaceText", testPostSlidesSlideReplaceText),
        ("testPostSlidesSlideReplaceTextInvalidName", testPostSlidesSlideReplaceTextInvalidName),
        ("testPostSlidesSlideReplaceTextInvalidSlideIndex", testPostSlidesSlideReplaceTextInvalidSlideIndex),
        ("testPostSlidesSlideReplaceTextInvalidOldValue", testPostSlidesSlideReplaceTextInvalidOldValue),
        ("testPostSlidesSlideReplaceTextInvalidNewValue", testPostSlidesSlideReplaceTextInvalidNewValue),
        ("testPostSlidesSlideReplaceTextInvalidIgnoreCase", testPostSlidesSlideReplaceTextInvalidIgnoreCase),
        ("testPostSlidesSlideReplaceTextInvalidPassword", testPostSlidesSlideReplaceTextInvalidPassword),
        ("testPostSlidesSlideReplaceTextInvalidFolder", testPostSlidesSlideReplaceTextInvalidFolder),
        ("testPostSlidesSlideReplaceTextInvalidStorage", testPostSlidesSlideReplaceTextInvalidStorage),
        ("testPostSlidesSplit", testPostSlidesSplit),
        ("testPostSlidesSplitInvalidName", testPostSlidesSplitInvalidName),
        ("testPostSlidesSplitInvalidOptions", testPostSlidesSplitInvalidOptions),
        ("testPostSlidesSplitInvalidFormat", testPostSlidesSplitInvalidFormat),
        ("testPostSlidesSplitInvalidWidth", testPostSlidesSplitInvalidWidth),
        ("testPostSlidesSplitInvalidHeight", testPostSlidesSplitInvalidHeight),
        ("testPostSlidesSplitInvalidFrom", testPostSlidesSplitInvalidFrom),
        ("testPostSlidesSplitInvalidTo", testPostSlidesSplitInvalidTo),
        ("testPostSlidesSplitInvalidDestFolder", testPostSlidesSplitInvalidDestFolder),
        ("testPostSlidesSplitInvalidPassword", testPostSlidesSplitInvalidPassword),
        ("testPostSlidesSplitInvalidFolder", testPostSlidesSplitInvalidFolder),
        ("testPostSlidesSplitInvalidStorage", testPostSlidesSplitInvalidStorage),
        ("testPostSlidesSplitInvalidFontsFolder", testPostSlidesSplitInvalidFontsFolder),
        ("testPostSubshapeSaveAs", testPostSubshapeSaveAs),
        ("testPostSubshapeSaveAsInvalidName", testPostSubshapeSaveAsInvalidName),
        ("testPostSubshapeSaveAsInvalidSlideIndex", testPostSubshapeSaveAsInvalidSlideIndex),
        ("testPostSubshapeSaveAsInvalidPath", testPostSubshapeSaveAsInvalidPath),
        ("testPostSubshapeSaveAsInvalidShapeIndex", testPostSubshapeSaveAsInvalidShapeIndex),
        ("testPostSubshapeSaveAsInvalidFormat", testPostSubshapeSaveAsInvalidFormat),
        ("testPostSubshapeSaveAsInvalidOptions", testPostSubshapeSaveAsInvalidOptions),
        ("testPostSubshapeSaveAsInvalidScaleX", testPostSubshapeSaveAsInvalidScaleX),
        ("testPostSubshapeSaveAsInvalidScaleY", testPostSubshapeSaveAsInvalidScaleY),
        ("testPostSubshapeSaveAsInvalidBounds", testPostSubshapeSaveAsInvalidBounds),
        ("testPostSubshapeSaveAsInvalidPassword", testPostSubshapeSaveAsInvalidPassword),
        ("testPostSubshapeSaveAsInvalidFolder", testPostSubshapeSaveAsInvalidFolder),
        ("testPostSubshapeSaveAsInvalidStorage", testPostSubshapeSaveAsInvalidStorage),
        ("testPostSubshapeSaveAsInvalidFontsFolder", testPostSubshapeSaveAsInvalidFontsFolder),
        ("testPutChartCategory", testPutChartCategory),
        ("testPutChartCategoryInvalidName", testPutChartCategoryInvalidName),
        ("testPutChartCategoryInvalidSlideIndex", testPutChartCategoryInvalidSlideIndex),
        ("testPutChartCategoryInvalidShapeIndex", testPutChartCategoryInvalidShapeIndex),
        ("testPutChartCategoryInvalidCategoryIndex", testPutChartCategoryInvalidCategoryIndex),
        ("testPutChartCategoryInvalidCategory", testPutChartCategoryInvalidCategory),
        ("testPutChartCategoryInvalidPassword", testPutChartCategoryInvalidPassword),
        ("testPutChartCategoryInvalidFolder", testPutChartCategoryInvalidFolder),
        ("testPutChartCategoryInvalidStorage", testPutChartCategoryInvalidStorage),
        ("testPutChartDataPoint", testPutChartDataPoint),
        ("testPutChartDataPointInvalidName", testPutChartDataPointInvalidName),
        ("testPutChartDataPointInvalidSlideIndex", testPutChartDataPointInvalidSlideIndex),
        ("testPutChartDataPointInvalidShapeIndex", testPutChartDataPointInvalidShapeIndex),
        ("testPutChartDataPointInvalidSeriesIndex", testPutChartDataPointInvalidSeriesIndex),
        ("testPutChartDataPointInvalidPointIndex", testPutChartDataPointInvalidPointIndex),
        ("testPutChartDataPointInvalidDataPoint", testPutChartDataPointInvalidDataPoint),
        ("testPutChartDataPointInvalidPassword", testPutChartDataPointInvalidPassword),
        ("testPutChartDataPointInvalidFolder", testPutChartDataPointInvalidFolder),
        ("testPutChartDataPointInvalidStorage", testPutChartDataPointInvalidStorage),
        ("testPutChartSeries", testPutChartSeries),
        ("testPutChartSeriesInvalidName", testPutChartSeriesInvalidName),
        ("testPutChartSeriesInvalidSlideIndex", testPutChartSeriesInvalidSlideIndex),
        ("testPutChartSeriesInvalidShapeIndex", testPutChartSeriesInvalidShapeIndex),
        ("testPutChartSeriesInvalidSeriesIndex", testPutChartSeriesInvalidSeriesIndex),
        ("testPutChartSeriesInvalidSeries", testPutChartSeriesInvalidSeries),
        ("testPutChartSeriesInvalidPassword", testPutChartSeriesInvalidPassword),
        ("testPutChartSeriesInvalidFolder", testPutChartSeriesInvalidFolder),
        ("testPutChartSeriesInvalidStorage", testPutChartSeriesInvalidStorage),
        ("testPutExportShape", testPutExportShape),
        ("testPutExportShapeInvalidDocument", testPutExportShapeInvalidDocument),
        ("testPutExportShapeInvalidSlideIndex", testPutExportShapeInvalidSlideIndex),
        ("testPutExportShapeInvalidShapeIndex", testPutExportShapeInvalidShapeIndex),
        ("testPutExportShapeInvalidFormat", testPutExportShapeInvalidFormat),
        ("testPutExportShapeInvalidOutPath", testPutExportShapeInvalidOutPath),
        ("testPutExportShapeInvalidPassword", testPutExportShapeInvalidPassword),
        ("testPutExportShapeInvalidStorage", testPutExportShapeInvalidStorage),
        ("testPutExportShapeInvalidScaleX", testPutExportShapeInvalidScaleX),
        ("testPutExportShapeInvalidScaleY", testPutExportShapeInvalidScaleY),
        ("testPutExportShapeInvalidBounds", testPutExportShapeInvalidBounds),
        ("testPutExportShapeInvalidFontsFolder", testPutExportShapeInvalidFontsFolder),
        ("testPutExportSlide", testPutExportSlide),
        ("testPutExportSlideInvalidDocument", testPutExportSlideInvalidDocument),
        ("testPutExportSlideInvalidSlideIndex", testPutExportSlideInvalidSlideIndex),
        ("testPutExportSlideInvalidFormat", testPutExportSlideInvalidFormat),
        ("testPutExportSlideInvalidOutPath", testPutExportSlideInvalidOutPath),
        ("testPutExportSlideInvalidWidth", testPutExportSlideInvalidWidth),
        ("testPutExportSlideInvalidHeight", testPutExportSlideInvalidHeight),
        ("testPutExportSlideInvalidPassword", testPutExportSlideInvalidPassword),
        ("testPutExportSlideInvalidStorage", testPutExportSlideInvalidStorage),
        ("testPutExportSlideInvalidFontsFolder", testPutExportSlideInvalidFontsFolder),
        ("testPutLayoutSlide", testPutLayoutSlide),
        ("testPutLayoutSlideInvalidName", testPutLayoutSlideInvalidName),
        ("testPutLayoutSlideInvalidSlideIndex", testPutLayoutSlideInvalidSlideIndex),
        ("testPutLayoutSlideInvalidSlideDto", testPutLayoutSlideInvalidSlideDto),
        ("testPutLayoutSlideInvalidPassword", testPutLayoutSlideInvalidPassword),
        ("testPutLayoutSlideInvalidFolder", testPutLayoutSlideInvalidFolder),
        ("testPutLayoutSlideInvalidStorage", testPutLayoutSlideInvalidStorage),
        ("testPutNotesSlideHeaderFooter", testPutNotesSlideHeaderFooter),
        ("testPutNotesSlideHeaderFooterInvalidName", testPutNotesSlideHeaderFooterInvalidName),
        ("testPutNotesSlideHeaderFooterInvalidSlideIndex", testPutNotesSlideHeaderFooterInvalidSlideIndex),
        ("testPutNotesSlideHeaderFooterInvalidDto", testPutNotesSlideHeaderFooterInvalidDto),
        ("testPutNotesSlideHeaderFooterInvalidPassword", testPutNotesSlideHeaderFooterInvalidPassword),
        ("testPutNotesSlideHeaderFooterInvalidFolder", testPutNotesSlideHeaderFooterInvalidFolder),
        ("testPutNotesSlideHeaderFooterInvalidStorage", testPutNotesSlideHeaderFooterInvalidStorage),
        ("testPutNotesSlideShapeSaveAs", testPutNotesSlideShapeSaveAs),
        ("testPutNotesSlideShapeSaveAsInvalidName", testPutNotesSlideShapeSaveAsInvalidName),
        ("testPutNotesSlideShapeSaveAsInvalidSlideIndex", testPutNotesSlideShapeSaveAsInvalidSlideIndex),
        ("testPutNotesSlideShapeSaveAsInvalidShapeIndex", testPutNotesSlideShapeSaveAsInvalidShapeIndex),
        ("testPutNotesSlideShapeSaveAsInvalidFormat", testPutNotesSlideShapeSaveAsInvalidFormat),
        ("testPutNotesSlideShapeSaveAsInvalidOutPath", testPutNotesSlideShapeSaveAsInvalidOutPath),
        ("testPutNotesSlideShapeSaveAsInvalidOptions", testPutNotesSlideShapeSaveAsInvalidOptions),
        ("testPutNotesSlideShapeSaveAsInvalidScaleX", testPutNotesSlideShapeSaveAsInvalidScaleX),
        ("testPutNotesSlideShapeSaveAsInvalidScaleY", testPutNotesSlideShapeSaveAsInvalidScaleY),
        ("testPutNotesSlideShapeSaveAsInvalidBounds", testPutNotesSlideShapeSaveAsInvalidBounds),
        ("testPutNotesSlideShapeSaveAsInvalidPassword", testPutNotesSlideShapeSaveAsInvalidPassword),
        ("testPutNotesSlideShapeSaveAsInvalidFolder", testPutNotesSlideShapeSaveAsInvalidFolder),
        ("testPutNotesSlideShapeSaveAsInvalidStorage", testPutNotesSlideShapeSaveAsInvalidStorage),
        ("testPutNotesSlideShapeSaveAsInvalidFontsFolder", testPutNotesSlideShapeSaveAsInvalidFontsFolder),
        ("testPutPresentationMerge", testPutPresentationMerge),
        ("testPutPresentationMergeInvalidName", testPutPresentationMergeInvalidName),
        ("testPutPresentationMergeInvalidRequest", testPutPresentationMergeInvalidRequest),
        ("testPutPresentationMergeInvalidPassword", testPutPresentationMergeInvalidPassword),
        ("testPutPresentationMergeInvalidFolder", testPutPresentationMergeInvalidFolder),
        ("testPutPresentationMergeInvalidStorage", testPutPresentationMergeInvalidStorage),
        ("testPutPresentationSplit", testPutPresentationSplit),
        ("testPutPresentationSplitInvalidDocument", testPutPresentationSplitInvalidDocument),
        ("testPutPresentationSplitInvalidFormat", testPutPresentationSplitInvalidFormat),
        ("testPutPresentationSplitInvalidDestFolder", testPutPresentationSplitInvalidDestFolder),
        ("testPutPresentationSplitInvalidWidth", testPutPresentationSplitInvalidWidth),
        ("testPutPresentationSplitInvalidHeight", testPutPresentationSplitInvalidHeight),
        ("testPutPresentationSplitInvalidFrom", testPutPresentationSplitInvalidFrom),
        ("testPutPresentationSplitInvalidTo", testPutPresentationSplitInvalidTo),
        ("testPutPresentationSplitInvalidPassword", testPutPresentationSplitInvalidPassword),
        ("testPutPresentationSplitInvalidStorage", testPutPresentationSplitInvalidStorage),
        ("testPutPresentationSplitInvalidFontsFolder", testPutPresentationSplitInvalidFontsFolder),
        ("testPutSection", testPutSection),
        ("testPutSectionInvalidName", testPutSectionInvalidName),
        ("testPutSectionInvalidSectionIndex", testPutSectionInvalidSectionIndex),
        ("testPutSectionInvalidSectionName", testPutSectionInvalidSectionName),
        ("testPutSectionInvalidPassword", testPutSectionInvalidPassword),
        ("testPutSectionInvalidFolder", testPutSectionInvalidFolder),
        ("testPutSectionInvalidStorage", testPutSectionInvalidStorage),
        ("testPutSections", testPutSections),
        ("testPutSectionsInvalidName", testPutSectionsInvalidName),
        ("testPutSectionsInvalidSections", testPutSectionsInvalidSections),
        ("testPutSectionsInvalidPassword", testPutSectionsInvalidPassword),
        ("testPutSectionsInvalidFolder", testPutSectionsInvalidFolder),
        ("testPutSectionsInvalidStorage", testPutSectionsInvalidStorage),
        ("testPutSetParagraphPortionProperties", testPutSetParagraphPortionProperties),
        ("testPutSetParagraphPortionPropertiesInvalidName", testPutSetParagraphPortionPropertiesInvalidName),
        ("testPutSetParagraphPortionPropertiesInvalidSlideIndex", testPutSetParagraphPortionPropertiesInvalidSlideIndex),
        ("testPutSetParagraphPortionPropertiesInvalidShapeIndex", testPutSetParagraphPortionPropertiesInvalidShapeIndex),
        ("testPutSetParagraphPortionPropertiesInvalidParagraphIndex", testPutSetParagraphPortionPropertiesInvalidParagraphIndex),
        ("testPutSetParagraphPortionPropertiesInvalidPortionIndex", testPutSetParagraphPortionPropertiesInvalidPortionIndex),
        ("testPutSetParagraphPortionPropertiesInvalidDto", testPutSetParagraphPortionPropertiesInvalidDto),
        ("testPutSetParagraphPortionPropertiesInvalidPassword", testPutSetParagraphPortionPropertiesInvalidPassword),
        ("testPutSetParagraphPortionPropertiesInvalidFolder", testPutSetParagraphPortionPropertiesInvalidFolder),
        ("testPutSetParagraphPortionPropertiesInvalidStorage", testPutSetParagraphPortionPropertiesInvalidStorage),
        ("testPutSetParagraphProperties", testPutSetParagraphProperties),
        ("testPutSetParagraphPropertiesInvalidName", testPutSetParagraphPropertiesInvalidName),
        ("testPutSetParagraphPropertiesInvalidSlideIndex", testPutSetParagraphPropertiesInvalidSlideIndex),
        ("testPutSetParagraphPropertiesInvalidShapeIndex", testPutSetParagraphPropertiesInvalidShapeIndex),
        ("testPutSetParagraphPropertiesInvalidParagraphIndex", testPutSetParagraphPropertiesInvalidParagraphIndex),
        ("testPutSetParagraphPropertiesInvalidDto", testPutSetParagraphPropertiesInvalidDto),
        ("testPutSetParagraphPropertiesInvalidPassword", testPutSetParagraphPropertiesInvalidPassword),
        ("testPutSetParagraphPropertiesInvalidFolder", testPutSetParagraphPropertiesInvalidFolder),
        ("testPutSetParagraphPropertiesInvalidStorage", testPutSetParagraphPropertiesInvalidStorage),
        ("testPutSetSubshapeParagraphPortionProperties", testPutSetSubshapeParagraphPortionProperties),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidName", testPutSetSubshapeParagraphPortionPropertiesInvalidName),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidSlideIndex", testPutSetSubshapeParagraphPortionPropertiesInvalidSlideIndex),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidPath", testPutSetSubshapeParagraphPortionPropertiesInvalidPath),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidShapeIndex", testPutSetSubshapeParagraphPortionPropertiesInvalidShapeIndex),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidParagraphIndex", testPutSetSubshapeParagraphPortionPropertiesInvalidParagraphIndex),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidPortionIndex", testPutSetSubshapeParagraphPortionPropertiesInvalidPortionIndex),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidDto", testPutSetSubshapeParagraphPortionPropertiesInvalidDto),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidPassword", testPutSetSubshapeParagraphPortionPropertiesInvalidPassword),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidFolder", testPutSetSubshapeParagraphPortionPropertiesInvalidFolder),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidStorage", testPutSetSubshapeParagraphPortionPropertiesInvalidStorage),
        ("testPutSetSubshapeParagraphProperties", testPutSetSubshapeParagraphProperties),
        ("testPutSetSubshapeParagraphPropertiesInvalidName", testPutSetSubshapeParagraphPropertiesInvalidName),
        ("testPutSetSubshapeParagraphPropertiesInvalidSlideIndex", testPutSetSubshapeParagraphPropertiesInvalidSlideIndex),
        ("testPutSetSubshapeParagraphPropertiesInvalidPath", testPutSetSubshapeParagraphPropertiesInvalidPath),
        ("testPutSetSubshapeParagraphPropertiesInvalidShapeIndex", testPutSetSubshapeParagraphPropertiesInvalidShapeIndex),
        ("testPutSetSubshapeParagraphPropertiesInvalidParagraphIndex", testPutSetSubshapeParagraphPropertiesInvalidParagraphIndex),
        ("testPutSetSubshapeParagraphPropertiesInvalidDto", testPutSetSubshapeParagraphPropertiesInvalidDto),
        ("testPutSetSubshapeParagraphPropertiesInvalidPassword", testPutSetSubshapeParagraphPropertiesInvalidPassword),
        ("testPutSetSubshapeParagraphPropertiesInvalidFolder", testPutSetSubshapeParagraphPropertiesInvalidFolder),
        ("testPutSetSubshapeParagraphPropertiesInvalidStorage", testPutSetSubshapeParagraphPropertiesInvalidStorage),
        ("testPutShapeSaveAs", testPutShapeSaveAs),
        ("testPutShapeSaveAsInvalidName", testPutShapeSaveAsInvalidName),
        ("testPutShapeSaveAsInvalidSlideIndex", testPutShapeSaveAsInvalidSlideIndex),
        ("testPutShapeSaveAsInvalidShapeIndex", testPutShapeSaveAsInvalidShapeIndex),
        ("testPutShapeSaveAsInvalidFormat", testPutShapeSaveAsInvalidFormat),
        ("testPutShapeSaveAsInvalidOutPath", testPutShapeSaveAsInvalidOutPath),
        ("testPutShapeSaveAsInvalidOptions", testPutShapeSaveAsInvalidOptions),
        ("testPutShapeSaveAsInvalidScaleX", testPutShapeSaveAsInvalidScaleX),
        ("testPutShapeSaveAsInvalidScaleY", testPutShapeSaveAsInvalidScaleY),
        ("testPutShapeSaveAsInvalidBounds", testPutShapeSaveAsInvalidBounds),
        ("testPutShapeSaveAsInvalidPassword", testPutShapeSaveAsInvalidPassword),
        ("testPutShapeSaveAsInvalidFolder", testPutShapeSaveAsInvalidFolder),
        ("testPutShapeSaveAsInvalidStorage", testPutShapeSaveAsInvalidStorage),
        ("testPutShapeSaveAsInvalidFontsFolder", testPutShapeSaveAsInvalidFontsFolder),
        ("testPutSlideAnimation", testPutSlideAnimation),
        ("testPutSlideAnimationInvalidName", testPutSlideAnimationInvalidName),
        ("testPutSlideAnimationInvalidSlideIndex", testPutSlideAnimationInvalidSlideIndex),
        ("testPutSlideAnimationInvalidAnimation", testPutSlideAnimationInvalidAnimation),
        ("testPutSlideAnimationInvalidPassword", testPutSlideAnimationInvalidPassword),
        ("testPutSlideAnimationInvalidFolder", testPutSlideAnimationInvalidFolder),
        ("testPutSlideAnimationInvalidStorage", testPutSlideAnimationInvalidStorage),
        ("testPutSlideAnimationEffect", testPutSlideAnimationEffect),
        ("testPutSlideAnimationEffectInvalidName", testPutSlideAnimationEffectInvalidName),
        ("testPutSlideAnimationEffectInvalidSlideIndex", testPutSlideAnimationEffectInvalidSlideIndex),
        ("testPutSlideAnimationEffectInvalidEffectIndex", testPutSlideAnimationEffectInvalidEffectIndex),
        ("testPutSlideAnimationEffectInvalidEffect", testPutSlideAnimationEffectInvalidEffect),
        ("testPutSlideAnimationEffectInvalidPassword", testPutSlideAnimationEffectInvalidPassword),
        ("testPutSlideAnimationEffectInvalidFolder", testPutSlideAnimationEffectInvalidFolder),
        ("testPutSlideAnimationEffectInvalidStorage", testPutSlideAnimationEffectInvalidStorage),
        ("testPutSlideAnimationInteractiveSequenceEffect", testPutSlideAnimationInteractiveSequenceEffect),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidName", testPutSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testPutSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testPutSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidEffectIndex", testPutSlideAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidEffect", testPutSlideAnimationInteractiveSequenceEffectInvalidEffect),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidPassword", testPutSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidFolder", testPutSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidStorage", testPutSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testPutSlideHeaderFooter", testPutSlideHeaderFooter),
        ("testPutSlideHeaderFooterInvalidName", testPutSlideHeaderFooterInvalidName),
        ("testPutSlideHeaderFooterInvalidSlideIndex", testPutSlideHeaderFooterInvalidSlideIndex),
        ("testPutSlideHeaderFooterInvalidDto", testPutSlideHeaderFooterInvalidDto),
        ("testPutSlideHeaderFooterInvalidPassword", testPutSlideHeaderFooterInvalidPassword),
        ("testPutSlideHeaderFooterInvalidFolder", testPutSlideHeaderFooterInvalidFolder),
        ("testPutSlideHeaderFooterInvalidStorage", testPutSlideHeaderFooterInvalidStorage),
        ("testPutSlideSaveAs", testPutSlideSaveAs),
        ("testPutSlideSaveAsInvalidName", testPutSlideSaveAsInvalidName),
        ("testPutSlideSaveAsInvalidSlideIndex", testPutSlideSaveAsInvalidSlideIndex),
        ("testPutSlideSaveAsInvalidFormat", testPutSlideSaveAsInvalidFormat),
        ("testPutSlideSaveAsInvalidOutPath", testPutSlideSaveAsInvalidOutPath),
        ("testPutSlideSaveAsInvalidOptions", testPutSlideSaveAsInvalidOptions),
        ("testPutSlideSaveAsInvalidWidth", testPutSlideSaveAsInvalidWidth),
        ("testPutSlideSaveAsInvalidHeight", testPutSlideSaveAsInvalidHeight),
        ("testPutSlideSaveAsInvalidPassword", testPutSlideSaveAsInvalidPassword),
        ("testPutSlideSaveAsInvalidFolder", testPutSlideSaveAsInvalidFolder),
        ("testPutSlideSaveAsInvalidStorage", testPutSlideSaveAsInvalidStorage),
        ("testPutSlideSaveAsInvalidFontsFolder", testPutSlideSaveAsInvalidFontsFolder),
        ("testPutSlideShapeInfo", testPutSlideShapeInfo),
        ("testPutSlideShapeInfoInvalidName", testPutSlideShapeInfoInvalidName),
        ("testPutSlideShapeInfoInvalidSlideIndex", testPutSlideShapeInfoInvalidSlideIndex),
        ("testPutSlideShapeInfoInvalidShapeIndex", testPutSlideShapeInfoInvalidShapeIndex),
        ("testPutSlideShapeInfoInvalidDto", testPutSlideShapeInfoInvalidDto),
        ("testPutSlideShapeInfoInvalidPassword", testPutSlideShapeInfoInvalidPassword),
        ("testPutSlideShapeInfoInvalidFolder", testPutSlideShapeInfoInvalidFolder),
        ("testPutSlideShapeInfoInvalidStorage", testPutSlideShapeInfoInvalidStorage),
        ("testPutSlideSubshapeInfo", testPutSlideSubshapeInfo),
        ("testPutSlideSubshapeInfoInvalidName", testPutSlideSubshapeInfoInvalidName),
        ("testPutSlideSubshapeInfoInvalidSlideIndex", testPutSlideSubshapeInfoInvalidSlideIndex),
        ("testPutSlideSubshapeInfoInvalidPath", testPutSlideSubshapeInfoInvalidPath),
        ("testPutSlideSubshapeInfoInvalidShapeIndex", testPutSlideSubshapeInfoInvalidShapeIndex),
        ("testPutSlideSubshapeInfoInvalidDto", testPutSlideSubshapeInfoInvalidDto),
        ("testPutSlideSubshapeInfoInvalidPassword", testPutSlideSubshapeInfoInvalidPassword),
        ("testPutSlideSubshapeInfoInvalidFolder", testPutSlideSubshapeInfoInvalidFolder),
        ("testPutSlideSubshapeInfoInvalidStorage", testPutSlideSubshapeInfoInvalidStorage),
        ("testPutSlidesConvert", testPutSlidesConvert),
        ("testPutSlidesConvertInvalidDocument", testPutSlidesConvertInvalidDocument),
        ("testPutSlidesConvertInvalidFormat", testPutSlidesConvertInvalidFormat),
        ("testPutSlidesConvertInvalidOutPath", testPutSlidesConvertInvalidOutPath),
        ("testPutSlidesConvertInvalidPassword", testPutSlidesConvertInvalidPassword),
        ("testPutSlidesConvertInvalidStorage", testPutSlidesConvertInvalidStorage),
        ("testPutSlidesConvertInvalidFontsFolder", testPutSlidesConvertInvalidFontsFolder),
        ("testPutSlidesDocumentFromHtml", testPutSlidesDocumentFromHtml),
        ("testPutSlidesDocumentFromHtmlInvalidName", testPutSlidesDocumentFromHtmlInvalidName),
        ("testPutSlidesDocumentFromHtmlInvalidHtml", testPutSlidesDocumentFromHtmlInvalidHtml),
        ("testPutSlidesDocumentFromHtmlInvalidPassword", testPutSlidesDocumentFromHtmlInvalidPassword),
        ("testPutSlidesDocumentFromHtmlInvalidFolder", testPutSlidesDocumentFromHtmlInvalidFolder),
        ("testPutSlidesDocumentFromHtmlInvalidStorage", testPutSlidesDocumentFromHtmlInvalidStorage),
        ("testPutSlidesHeaderFooter", testPutSlidesHeaderFooter),
        ("testPutSlidesHeaderFooterInvalidName", testPutSlidesHeaderFooterInvalidName),
        ("testPutSlidesHeaderFooterInvalidDto", testPutSlidesHeaderFooterInvalidDto),
        ("testPutSlidesHeaderFooterInvalidPassword", testPutSlidesHeaderFooterInvalidPassword),
        ("testPutSlidesHeaderFooterInvalidFolder", testPutSlidesHeaderFooterInvalidFolder),
        ("testPutSlidesHeaderFooterInvalidStorage", testPutSlidesHeaderFooterInvalidStorage),
        ("testPutSlidesMerge", testPutSlidesMerge),
        ("testPutSlidesMergeInvalidOutPath", testPutSlidesMergeInvalidOutPath),
        ("testPutSlidesMergeInvalidFiles", testPutSlidesMergeInvalidFiles),
        ("testPutSlidesMergeInvalidRequest", testPutSlidesMergeInvalidRequest),
        ("testPutSlidesMergeInvalidPassword", testPutSlidesMergeInvalidPassword),
        ("testPutSlidesMergeInvalidStorage", testPutSlidesMergeInvalidStorage),
        ("testPutSlidesProtectionProperties", testPutSlidesProtectionProperties),
        ("testPutSlidesProtectionPropertiesInvalidName", testPutSlidesProtectionPropertiesInvalidName),
        ("testPutSlidesProtectionPropertiesInvalidDto", testPutSlidesProtectionPropertiesInvalidDto),
        ("testPutSlidesProtectionPropertiesInvalidPassword", testPutSlidesProtectionPropertiesInvalidPassword),
        ("testPutSlidesProtectionPropertiesInvalidFolder", testPutSlidesProtectionPropertiesInvalidFolder),
        ("testPutSlidesProtectionPropertiesInvalidStorage", testPutSlidesProtectionPropertiesInvalidStorage),
        ("testPutSlidesSaveAs", testPutSlidesSaveAs),
        ("testPutSlidesSaveAsInvalidName", testPutSlidesSaveAsInvalidName),
        ("testPutSlidesSaveAsInvalidFormat", testPutSlidesSaveAsInvalidFormat),
        ("testPutSlidesSaveAsInvalidOutPath", testPutSlidesSaveAsInvalidOutPath),
        ("testPutSlidesSaveAsInvalidOptions", testPutSlidesSaveAsInvalidOptions),
        ("testPutSlidesSaveAsInvalidPassword", testPutSlidesSaveAsInvalidPassword),
        ("testPutSlidesSaveAsInvalidFolder", testPutSlidesSaveAsInvalidFolder),
        ("testPutSlidesSaveAsInvalidStorage", testPutSlidesSaveAsInvalidStorage),
        ("testPutSlidesSaveAsInvalidFontsFolder", testPutSlidesSaveAsInvalidFontsFolder),
        ("testPutSlidesSetDocumentProperty", testPutSlidesSetDocumentProperty),
        ("testPutSlidesSetDocumentPropertyInvalidName", testPutSlidesSetDocumentPropertyInvalidName),
        ("testPutSlidesSetDocumentPropertyInvalidPropertyName", testPutSlidesSetDocumentPropertyInvalidPropertyName),
        ("testPutSlidesSetDocumentPropertyInvalidProperty", testPutSlidesSetDocumentPropertyInvalidProperty),
        ("testPutSlidesSetDocumentPropertyInvalidPassword", testPutSlidesSetDocumentPropertyInvalidPassword),
        ("testPutSlidesSetDocumentPropertyInvalidFolder", testPutSlidesSetDocumentPropertyInvalidFolder),
        ("testPutSlidesSetDocumentPropertyInvalidStorage", testPutSlidesSetDocumentPropertyInvalidStorage),
        ("testPutSlidesSlide", testPutSlidesSlide),
        ("testPutSlidesSlideInvalidName", testPutSlidesSlideInvalidName),
        ("testPutSlidesSlideInvalidSlideIndex", testPutSlidesSlideInvalidSlideIndex),
        ("testPutSlidesSlideInvalidSlideDto", testPutSlidesSlideInvalidSlideDto),
        ("testPutSlidesSlideInvalidPassword", testPutSlidesSlideInvalidPassword),
        ("testPutSlidesSlideInvalidFolder", testPutSlidesSlideInvalidFolder),
        ("testPutSlidesSlideInvalidStorage", testPutSlidesSlideInvalidStorage),
        ("testPutSlidesSlideBackground", testPutSlidesSlideBackground),
        ("testPutSlidesSlideBackgroundInvalidName", testPutSlidesSlideBackgroundInvalidName),
        ("testPutSlidesSlideBackgroundInvalidSlideIndex", testPutSlidesSlideBackgroundInvalidSlideIndex),
        ("testPutSlidesSlideBackgroundInvalidBackground", testPutSlidesSlideBackgroundInvalidBackground),
        ("testPutSlidesSlideBackgroundInvalidPassword", testPutSlidesSlideBackgroundInvalidPassword),
        ("testPutSlidesSlideBackgroundInvalidFolder", testPutSlidesSlideBackgroundInvalidFolder),
        ("testPutSlidesSlideBackgroundInvalidStorage", testPutSlidesSlideBackgroundInvalidStorage),
        ("testPutSlidesSlideBackgroundColor", testPutSlidesSlideBackgroundColor),
        ("testPutSlidesSlideBackgroundColorInvalidName", testPutSlidesSlideBackgroundColorInvalidName),
        ("testPutSlidesSlideBackgroundColorInvalidSlideIndex", testPutSlidesSlideBackgroundColorInvalidSlideIndex),
        ("testPutSlidesSlideBackgroundColorInvalidColor", testPutSlidesSlideBackgroundColorInvalidColor),
        ("testPutSlidesSlideBackgroundColorInvalidPassword", testPutSlidesSlideBackgroundColorInvalidPassword),
        ("testPutSlidesSlideBackgroundColorInvalidFolder", testPutSlidesSlideBackgroundColorInvalidFolder),
        ("testPutSlidesSlideBackgroundColorInvalidStorage", testPutSlidesSlideBackgroundColorInvalidStorage),
        ("testPutSlidesSlideProperties", testPutSlidesSlideProperties),
        ("testPutSlidesSlidePropertiesInvalidName", testPutSlidesSlidePropertiesInvalidName),
        ("testPutSlidesSlidePropertiesInvalidDto", testPutSlidesSlidePropertiesInvalidDto),
        ("testPutSlidesSlidePropertiesInvalidPassword", testPutSlidesSlidePropertiesInvalidPassword),
        ("testPutSlidesSlidePropertiesInvalidFolder", testPutSlidesSlidePropertiesInvalidFolder),
        ("testPutSlidesSlidePropertiesInvalidStorage", testPutSlidesSlidePropertiesInvalidStorage),
        ("testPutSlidesSlideSize", testPutSlidesSlideSize),
        ("testPutSlidesSlideSizeInvalidName", testPutSlidesSlideSizeInvalidName),
        ("testPutSlidesSlideSizeInvalidWidth", testPutSlidesSlideSizeInvalidWidth),
        ("testPutSlidesSlideSizeInvalidHeight", testPutSlidesSlideSizeInvalidHeight),
        ("testPutSlidesSlideSizeInvalidSizeType", testPutSlidesSlideSizeInvalidSizeType),
        ("testPutSlidesSlideSizeInvalidScaleType", testPutSlidesSlideSizeInvalidScaleType),
        ("testPutSlidesSlideSizeInvalidPassword", testPutSlidesSlideSizeInvalidPassword),
        ("testPutSlidesSlideSizeInvalidFolder", testPutSlidesSlideSizeInvalidFolder),
        ("testPutSlidesSlideSizeInvalidStorage", testPutSlidesSlideSizeInvalidStorage),
        ("testPutSlidesViewProperties", testPutSlidesViewProperties),
        ("testPutSlidesViewPropertiesInvalidName", testPutSlidesViewPropertiesInvalidName),
        ("testPutSlidesViewPropertiesInvalidDto", testPutSlidesViewPropertiesInvalidDto),
        ("testPutSlidesViewPropertiesInvalidPassword", testPutSlidesViewPropertiesInvalidPassword),
        ("testPutSlidesViewPropertiesInvalidFolder", testPutSlidesViewPropertiesInvalidFolder),
        ("testPutSlidesViewPropertiesInvalidStorage", testPutSlidesViewPropertiesInvalidStorage),
        ("testPutSubshapeSaveAs", testPutSubshapeSaveAs),
        ("testPutSubshapeSaveAsInvalidName", testPutSubshapeSaveAsInvalidName),
        ("testPutSubshapeSaveAsInvalidSlideIndex", testPutSubshapeSaveAsInvalidSlideIndex),
        ("testPutSubshapeSaveAsInvalidPath", testPutSubshapeSaveAsInvalidPath),
        ("testPutSubshapeSaveAsInvalidShapeIndex", testPutSubshapeSaveAsInvalidShapeIndex),
        ("testPutSubshapeSaveAsInvalidFormat", testPutSubshapeSaveAsInvalidFormat),
        ("testPutSubshapeSaveAsInvalidOutPath", testPutSubshapeSaveAsInvalidOutPath),
        ("testPutSubshapeSaveAsInvalidOptions", testPutSubshapeSaveAsInvalidOptions),
        ("testPutSubshapeSaveAsInvalidScaleX", testPutSubshapeSaveAsInvalidScaleX),
        ("testPutSubshapeSaveAsInvalidScaleY", testPutSubshapeSaveAsInvalidScaleY),
        ("testPutSubshapeSaveAsInvalidBounds", testPutSubshapeSaveAsInvalidBounds),
        ("testPutSubshapeSaveAsInvalidPassword", testPutSubshapeSaveAsInvalidPassword),
        ("testPutSubshapeSaveAsInvalidFolder", testPutSubshapeSaveAsInvalidFolder),
        ("testPutSubshapeSaveAsInvalidStorage", testPutSubshapeSaveAsInvalidStorage),
        ("testPutSubshapeSaveAsInvalidFontsFolder", testPutSubshapeSaveAsInvalidFontsFolder),
        ("testPutUpdateNotesSlide", testPutUpdateNotesSlide),
        ("testPutUpdateNotesSlideInvalidName", testPutUpdateNotesSlideInvalidName),
        ("testPutUpdateNotesSlideInvalidSlideIndex", testPutUpdateNotesSlideInvalidSlideIndex),
        ("testPutUpdateNotesSlideInvalidDto", testPutUpdateNotesSlideInvalidDto),
        ("testPutUpdateNotesSlideInvalidPassword", testPutUpdateNotesSlideInvalidPassword),
        ("testPutUpdateNotesSlideInvalidFolder", testPutUpdateNotesSlideInvalidFolder),
        ("testPutUpdateNotesSlideInvalidStorage", testPutUpdateNotesSlideInvalidStorage),
        ("testPutUpdateNotesSlideShape", testPutUpdateNotesSlideShape),
        ("testPutUpdateNotesSlideShapeInvalidName", testPutUpdateNotesSlideShapeInvalidName),
        ("testPutUpdateNotesSlideShapeInvalidSlideIndex", testPutUpdateNotesSlideShapeInvalidSlideIndex),
        ("testPutUpdateNotesSlideShapeInvalidShapeIndex", testPutUpdateNotesSlideShapeInvalidShapeIndex),
        ("testPutUpdateNotesSlideShapeInvalidDto", testPutUpdateNotesSlideShapeInvalidDto),
        ("testPutUpdateNotesSlideShapeInvalidPassword", testPutUpdateNotesSlideShapeInvalidPassword),
        ("testPutUpdateNotesSlideShapeInvalidFolder", testPutUpdateNotesSlideShapeInvalidFolder),
        ("testPutUpdateNotesSlideShapeInvalidStorage", testPutUpdateNotesSlideShapeInvalidStorage),
        ("testPutUpdateNotesSlideShapeParagraph", testPutUpdateNotesSlideShapeParagraph),
        ("testPutUpdateNotesSlideShapeParagraphInvalidName", testPutUpdateNotesSlideShapeParagraphInvalidName),
        ("testPutUpdateNotesSlideShapeParagraphInvalidSlideIndex", testPutUpdateNotesSlideShapeParagraphInvalidSlideIndex),
        ("testPutUpdateNotesSlideShapeParagraphInvalidShapeIndex", testPutUpdateNotesSlideShapeParagraphInvalidShapeIndex),
        ("testPutUpdateNotesSlideShapeParagraphInvalidParagraphIndex", testPutUpdateNotesSlideShapeParagraphInvalidParagraphIndex),
        ("testPutUpdateNotesSlideShapeParagraphInvalidDto", testPutUpdateNotesSlideShapeParagraphInvalidDto),
        ("testPutUpdateNotesSlideShapeParagraphInvalidPassword", testPutUpdateNotesSlideShapeParagraphInvalidPassword),
        ("testPutUpdateNotesSlideShapeParagraphInvalidFolder", testPutUpdateNotesSlideShapeParagraphInvalidFolder),
        ("testPutUpdateNotesSlideShapeParagraphInvalidStorage", testPutUpdateNotesSlideShapeParagraphInvalidStorage),
        ("testPutUpdateNotesSlideShapePortion", testPutUpdateNotesSlideShapePortion),
        ("testPutUpdateNotesSlideShapePortionInvalidName", testPutUpdateNotesSlideShapePortionInvalidName),
        ("testPutUpdateNotesSlideShapePortionInvalidSlideIndex", testPutUpdateNotesSlideShapePortionInvalidSlideIndex),
        ("testPutUpdateNotesSlideShapePortionInvalidShapeIndex", testPutUpdateNotesSlideShapePortionInvalidShapeIndex),
        ("testPutUpdateNotesSlideShapePortionInvalidParagraphIndex", testPutUpdateNotesSlideShapePortionInvalidParagraphIndex),
        ("testPutUpdateNotesSlideShapePortionInvalidPortionIndex", testPutUpdateNotesSlideShapePortionInvalidPortionIndex),
        ("testPutUpdateNotesSlideShapePortionInvalidDto", testPutUpdateNotesSlideShapePortionInvalidDto),
        ("testPutUpdateNotesSlideShapePortionInvalidPassword", testPutUpdateNotesSlideShapePortionInvalidPassword),
        ("testPutUpdateNotesSlideShapePortionInvalidFolder", testPutUpdateNotesSlideShapePortionInvalidFolder),
        ("testPutUpdateNotesSlideShapePortionInvalidStorage", testPutUpdateNotesSlideShapePortionInvalidStorage),
        ("testStorageExists", testStorageExists),
        ("testStorageExistsInvalidStorageName", testStorageExistsInvalidStorageName),
        ("testUploadFile", testUploadFile),
        ("testUploadFileInvalidPath", testUploadFileInvalidPath),
        ("testUploadFileInvalidFile", testUploadFileInvalidFile),
        ("testUploadFileInvalidStorageName", testUploadFileInvalidStorageName),
    ];
    
    internal let testTimeout: TimeInterval = 200.0 

    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        super.tearDown()
    }    
    
    func testCopyFile() {
        let expectation = self.expectation(description: "testcopyFile")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        TestUtils.initialize("copyFile") { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidSrcPath() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramSrcPath = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "srcPath", value: paramSrcPath as Any, type: "String")
        TestUtils.initialize("copyFile", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidDestPath() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramDestPath = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "destPath", value: paramDestPath as Any, type: "String")
        TestUtils.initialize("copyFile", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramSrcStorageName = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "srcStorageName", value: paramSrcStorageName as Any, type: "String")
        TestUtils.initialize("copyFile", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidDestStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramDestStorageName = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "destStorageName", value: paramDestStorageName as Any, type: "String")
        TestUtils.initialize("copyFile", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidVersionId() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("copyFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyFolder() {
        let expectation = self.expectation(description: "testcopyFolder")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        TestUtils.initialize("copyFolder") { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidSrcPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        paramSrcPath = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "srcPath", value: paramSrcPath as Any, type: "String")
        TestUtils.initialize("copyFolder", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidDestPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        paramDestPath = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "destPath", value: paramDestPath as Any, type: "String")
        TestUtils.initialize("copyFolder", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        paramSrcStorageName = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "srcStorageName", value: paramSrcStorageName as Any, type: "String")
        TestUtils.initialize("copyFolder", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidDestStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        paramDestStorageName = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "destStorageName", value: paramDestStorageName as Any, type: "String")
        TestUtils.initialize("copyFolder", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateFolder() {
        let expectation = self.expectation(description: "testcreateFolder")
        let paramPath : String = TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String")
        TestUtils.initialize("createFolder") { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateFolderInvalidPath() {
        let expectation = self.expectation(description: "testcreateFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "createFolder", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("createFolder", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateFolderInvalidStorageName() {
        let expectation = self.expectation(description: "testcreateFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "createFolder", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("createFolder", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartCategory() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        TestUtils.initialize("deleteChartCategory") { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidCategoryIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramCategoryIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "categoryIndex", value: paramCategoryIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartCategory", "categoryIndex", paramCategoryIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "categoryIndex", parameterValue: paramCategoryIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartDataPoint() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("deleteChartDataPoint") { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidPointIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramPointIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", value: paramPointIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartDataPoint", "pointIndex", paramPointIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "pointIndex", parameterValue: paramPointIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartSeries() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        TestUtils.initialize("deleteChartSeries") { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteFile() {
        let expectation = self.expectation(description: "testdeleteFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        TestUtils.initialize("deleteFile") { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidPath() {
        let expectation = self.expectation(description: "testdeleteFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidStorageName() {
        let expectation = self.expectation(description: "testdeleteFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("deleteFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidVersionId() {
        let expectation = self.expectation(description: "testdeleteFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("deleteFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteFolder() {
        let expectation = self.expectation(description: "testdeleteFolder")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        let paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        TestUtils.initialize("deleteFolder") { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidPath() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        var paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteFolder", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidStorageName() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        var paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("deleteFolder", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidRecursive() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        var paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        paramRecursive = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "recursive", value: paramRecursive as Any, type: "Bool")
        TestUtils.initialize("deleteFolder", "recursive", paramRecursive) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "recursive", parameterValue: paramRecursive as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlide() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlide") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideParagraph() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideParagraphs() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramParagraphs = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", value: paramParagraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "paragraphs", parameterValue: paramParagraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlidePortion() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlidePortion") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlidePortions() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlidePortions") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramPortions = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "portions", value: paramPortions as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlidePortions", "portions", paramPortions) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "portions", parameterValue: paramPortions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideShape() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideShapes() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlideShapes") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramShapes = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", value: paramShapes as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlideShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteParagraph() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        TestUtils.initialize("deleteParagraph") { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        TestUtils.initialize("deleteParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramParagraphs = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "paragraphs", value: paramParagraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteParagraphs", "paragraphs", paramParagraphs) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "paragraphs", parameterValue: paramParagraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeletePortion() {
        let expectation = self.expectation(description: "testdeletePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        TestUtils.initialize("deletePortion") { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidName() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deletePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deletePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deletePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deletePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeletePortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        TestUtils.initialize("deletePortions") { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deletePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramPortions = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "portions", value: paramPortions as Any, type: "[Int]")
        TestUtils.initialize("deletePortions", "portions", paramPortions) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "portions", parameterValue: paramPortions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deletePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deletePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deletePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSection() {
        let expectation = self.expectation(description: "testdeleteSection")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        TestUtils.initialize("deleteSection") { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidName() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidSectionIndex() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramSectionIndex = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "sectionIndex", value: paramSectionIndex as Any, type: "Int")
        TestUtils.initialize("deleteSection", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidWithSlides() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramWithSlides = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "withSlides", value: paramWithSlides as Any, type: "Bool")
        TestUtils.initialize("deleteSection", "withSlides", paramWithSlides) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "withSlides", parameterValue: paramWithSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSections() {
        let expectation = self.expectation(description: "testdeleteSections")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        let paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        TestUtils.initialize("deleteSections") { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidSections() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramSections = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "sections", value: paramSections as Any, type: "[Int]")
        TestUtils.initialize("deleteSections", "sections", paramSections) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "sections", parameterValue: paramSections as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidWithSlides() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramWithSlides = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "withSlides", value: paramWithSlides as Any, type: "Bool")
        TestUtils.initialize("deleteSections", "withSlides", paramWithSlides) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "withSlides", parameterValue: paramWithSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimation() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideAnimation") { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationEffect() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String")
        paramEffectIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", value: paramEffectIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramSequenceIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", value: paramSequenceIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSequenceIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: paramSequenceIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramEffectIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", value: paramEffectIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationInteractiveSequences() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationMainSequence() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence") { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideByIndex() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideByIndex") { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideByIndex", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideShape() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideShape") { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideShapes() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideShapes") { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String")
        paramShapes = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "shapes", value: paramShapes as Any, type: "[Int]")
        TestUtils.initialize("deleteSlideShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideSubshape() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideSubshape") { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideSubshape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideSubshapes() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideSubshapes") { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideSubshapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String")
        paramShapes = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "shapes", value: paramShapes as Any, type: "[Int]")
        TestUtils.initialize("deleteSlideSubshapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlidesCleanSlidesList() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String")
        let paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList") { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidSlides() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String")
        paramSlides = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", value: paramSlides as Any, type: "[Int]")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "slides", paramSlides) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "slides", parameterValue: paramSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlidesDocumentProperties() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties") { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlidesDocumentProperty() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty") { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String")
        paramPropertyName = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", value: paramPropertyName as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlidesSlideBackground() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlidesSlideBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapeParagraph() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapeParagraphs() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramParagraphs = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", value: paramParagraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteSubshapeParagraphs", "paragraphs", paramParagraphs) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "paragraphs", parameterValue: paramParagraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapePortion() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapePortion") { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapePortions() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapePortions") { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramPortions = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "portions", value: paramPortions as Any, type: "[Int]")
        TestUtils.initialize("deleteSubshapePortions", "portions", paramPortions) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "portions", parameterValue: paramPortions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadFile() {
        let expectation = self.expectation(description: "testdownloadFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        TestUtils.initialize("downloadFile") { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidPath() {
        let expectation = self.expectation(description: "testdownloadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("downloadFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidStorageName() {
        let expectation = self.expectation(description: "testdownloadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("downloadFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidVersionId() {
        let expectation = self.expectation(description: "testdownloadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("downloadFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetDiscUsage() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String")
        TestUtils.initialize("getDiscUsage") { (response, error) -> Void in
            SlidesAPI.getDiscUsage(paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDiscUsageInvalidStorageName() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "getDiscUsage", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("getDiscUsage", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getDiscUsage(paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDiscUsage", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFileVersions() {
        let expectation = self.expectation(description: "testgetFileVersions")
        let paramPath : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String")
        TestUtils.initialize("getFileVersions") { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFileVersionsInvalidPath() {
        let expectation = self.expectation(description: "testgetFileVersions")
        var paramPath : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getFileVersions", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getFileVersions", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFileVersionsInvalidStorageName() {
        let expectation = self.expectation(description: "testgetFileVersions")
        var paramPath : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "getFileVersions", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("getFileVersions", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFilesList() {
        let expectation = self.expectation(description: "testgetFilesList")
        let paramPath : String = TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String")
        TestUtils.initialize("getFilesList") { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFilesListInvalidPath() {
        let expectation = self.expectation(description: "testgetFilesList")
        var paramPath : String = TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getFilesList", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getFilesList", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFilesListInvalidStorageName() {
        let expectation = self.expectation(description: "testgetFilesList")
        var paramPath : String = TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "getFilesList", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("getFilesList", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetLayoutSlide() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        TestUtils.initialize("getLayoutSlide") { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getLayoutSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetLayoutSlidesList() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        let paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String")
        TestUtils.initialize("getLayoutSlidesList") { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesListInvalidName() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesListInvalidPassword() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesListInvalidFolder() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesListInvalidStorage() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetMasterSlide() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        TestUtils.initialize("getMasterSlide") { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidName() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getMasterSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetMasterSlidesList() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        let paramName : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String")
        TestUtils.initialize("getMasterSlidesList") { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesListInvalidName() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesListInvalidPassword() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesListInvalidFolder() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesListInvalidStorage() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlide() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlide") { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideExists() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideExists") { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideExists", "name", paramName) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideExists", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideExists", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideExists", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideExists", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideHeaderFooter() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShape() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapeParagraph() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapeParagraphs() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapePortion() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideShapePortion") { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapePortions() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideShapePortions") { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapes() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideShapes") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideWithFormat() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        TestUtils.initialize("getNotesSlideWithFormat") { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidWidth() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidHeight() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidFontsFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraphPortion() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        let paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        TestUtils.initialize("getParagraphPortion") { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidName() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraphPortions() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        let paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String")
        TestUtils.initialize("getParagraphPortions") { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidName() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSections() {
        let expectation = self.expectation(description: "testgetSections")
        let paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        TestUtils.initialize("getSections") { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidName() {
        let expectation = self.expectation(description: "testgetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSections", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSections", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSections", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSections", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideAnimation() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String")
        TestUtils.initialize("getSlideAnimation") { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideAnimation", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideHeaderFooter() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("getSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShape() {
        let expectation = self.expectation(description: "testgetSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String")
        TestUtils.initialize("getSlideShape") { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShapeParagraph() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("getSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShapeParagraphs() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String")
        TestUtils.initialize("getSlideShapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShapes() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String")
        TestUtils.initialize("getSlideShapes") { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideSubshape() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String")
        TestUtils.initialize("getSlideSubshape") { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidName() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideSubshapeParagraph() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideSubshapeParagraphs() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidPath() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideSubshapes() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String")
        TestUtils.initialize("getSlideSubshapes") { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidPath() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesApiInfo() {
        let expectation = self.expectation(description: "testgetSlidesApiInfo")
        TestUtils.initialize("getSlidesApiInfo") { (response, error) -> Void in
            SlidesAPI.getApiInfo() { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesDocument() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String")
        TestUtils.initialize("getSlidesDocument") { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesDocumentProperties() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("getSlidesDocumentProperties") { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesDocumentProperty() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("getSlidesDocumentProperty") { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String")
        paramPropertyName = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", value: paramPropertyName as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesImageWithDefaultFormat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat") { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidIndex() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String")
        paramIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", value: paramIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesImageWithFormat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String")
        TestUtils.initialize("getSlidesImageWithFormat") { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidIndex() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String")
        paramIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "index", value: paramIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesImageWithFormat", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesImages() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String")
        TestUtils.initialize("getSlidesImages") { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImagesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImagesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImagesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImagesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesPlaceholder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String")
        TestUtils.initialize("getSlidesPlaceholder") { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholder", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidPlaceholderIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String")
        paramPlaceholderIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", value: paramPlaceholderIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholder", "placeholderIndex", paramPlaceholderIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "placeholderIndex", parameterValue: paramPlaceholderIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesPlaceholders() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String")
        TestUtils.initialize("getSlidesPlaceholders") { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholders", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesPresentationTextItems() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String")
        let paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems") { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidWithEmpty() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String")
        paramWithEmpty = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", value: paramWithEmpty as Any, type: "Bool")
        TestUtils.initialize("getSlidesPresentationTextItems", "withEmpty", paramWithEmpty) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "withEmpty", parameterValue: paramWithEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesProtectionProperties() {
        let expectation = self.expectation(description: "testgetSlidesProtectionProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "storage", type: "String")
        TestUtils.initialize("getSlidesProtectionProperties") { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesProtectionPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesProtectionProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesProtectionProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesProtectionProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesProtectionPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesProtectionProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesProtectionProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesProtectionProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesProtectionPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesProtectionProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesProtectionProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesProtectionProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesProtectionPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesProtectionProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesProtectionProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesProtectionProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesProtectionProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlide() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String")
        TestUtils.initialize("getSlidesSlide") { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideBackground() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String")
        TestUtils.initialize("getSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideComments() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String")
        TestUtils.initialize("getSlidesSlideComments") { (response, error) -> Void in
            SlidesAPI.getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideComments", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideImages() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String")
        TestUtils.initialize("getSlidesSlideImages") { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideImages", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideProperties() {
        let expectation = self.expectation(description: "testgetSlidesSlideProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "storage", type: "String")
        TestUtils.initialize("getSlidesSlideProperties") { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidePropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesSlideProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidePropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesSlideProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidePropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidePropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideTextItems() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String")
        TestUtils.initialize("getSlidesSlideTextItems") { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideTextItems", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidWithEmpty() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String")
        paramWithEmpty = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", value: paramWithEmpty as Any, type: "Bool")
        TestUtils.initialize("getSlidesSlideTextItems", "withEmpty", paramWithEmpty) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "withEmpty", parameterValue: paramWithEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlidesList() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String")
        TestUtils.initialize("getSlidesSlidesList") { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidesListInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidesListInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidesListInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidesListInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesTheme() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String")
        TestUtils.initialize("getSlidesTheme") { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesTheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesThemeColorScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme") { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeColorScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesThemeFontScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme") { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeFontScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesThemeFormatScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme") { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeFormatScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesViewProperties() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String")
        TestUtils.initialize("getSlidesViewProperties") { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesViewPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlidesViewProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlidesViewProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesViewProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesViewPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlidesViewProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlidesViewProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesViewProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesViewPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlidesViewProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlidesViewProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesViewProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesViewPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlidesViewProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlidesViewProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesViewProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapeParagraphPortion() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        let paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion") { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapeParagraphPortions() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        let paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions") { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveFile() {
        let expectation = self.expectation(description: "testmoveFile")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        TestUtils.initialize("moveFile") { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidSrcPath() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramSrcPath = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "srcPath", value: paramSrcPath as Any, type: "String")
        TestUtils.initialize("moveFile", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidDestPath() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramDestPath = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "destPath", value: paramDestPath as Any, type: "String")
        TestUtils.initialize("moveFile", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramSrcStorageName = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "srcStorageName", value: paramSrcStorageName as Any, type: "String")
        TestUtils.initialize("moveFile", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidDestStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramDestStorageName = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "destStorageName", value: paramDestStorageName as Any, type: "String")
        TestUtils.initialize("moveFile", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidVersionId() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("moveFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveFolder() {
        let expectation = self.expectation(description: "testmoveFolder")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        TestUtils.initialize("moveFolder") { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidSrcPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        paramSrcPath = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "srcPath", value: paramSrcPath as Any, type: "String")
        TestUtils.initialize("moveFolder", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidDestPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        paramDestPath = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "destPath", value: paramDestPath as Any, type: "String")
        TestUtils.initialize("moveFolder", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        paramSrcStorageName = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "srcStorageName", value: paramSrcStorageName as Any, type: "String")
        TestUtils.initialize("moveFolder", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidDestStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        paramDestStorageName = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "destStorageName", value: paramDestStorageName as Any, type: "String")
        TestUtils.initialize("moveFolder", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testObjectExists() {
        let expectation = self.expectation(description: "testobjectExists")
        let paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        TestUtils.initialize("objectExists") { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidPath() {
        let expectation = self.expectation(description: "testobjectExists")
        var paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("objectExists", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidStorageName() {
        let expectation = self.expectation(description: "testobjectExists")
        var paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("objectExists", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidVersionId() {
        let expectation = self.expectation(description: "testobjectExists")
        var paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("objectExists", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewParagraph() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        TestUtils.initialize("postAddNewParagraph") { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("postAddNewParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewPortion() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        let paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        TestUtils.initialize("postAddNewPortion") { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("postAddNewPortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewShape() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        let paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        TestUtils.initialize("postAddNewShape") { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("postAddNewShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        paramShapeToClone = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "shapeToClone", value: paramShapeToClone as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "shapeToClone", paramShapeToClone) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "shapeToClone", parameterValue: paramShapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewSubshape() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        TestUtils.initialize("postAddNewSubshape") { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("postAddNewSubshape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramShapeToClone = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", value: paramShapeToClone as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshape", "shapeToClone", paramShapeToClone) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "shapeToClone", parameterValue: paramShapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshape", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewSubshapeParagraph() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("postAddNewSubshapeParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapeParagraph", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewSubshapePortion() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        TestUtils.initialize("postAddNewSubshapePortion") { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidPath() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("postAddNewSubshapePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapePortion", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNotesSlide() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("postAddNotesSlide") { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "dto", value: paramDto as Any, type: "NotesSlide")
        TestUtils.initialize("postAddNotesSlide", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAlignShapes() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        TestUtils.initialize("postAlignShapes") { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAlignShapesInvalidName() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postAlignShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postAlignShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAlignShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAlignShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postAlignShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postAlignShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAlignShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAlignShapesInvalidAlignmentType() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        paramAlignmentType = TestUtils.getInvalidTestValue(functionName: "postAlignShapes", name: "alignmentType", value: paramAlignmentType as Any, type: "String")
        TestUtils.initialize("postAlignShapes", "alignmentType", paramAlignmentType) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAlignShapes", parameterName: "alignmentType", parameterValue: paramAlignmentType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAlignShapesInvalidAlignToSlide() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        paramAlignToSlide = TestUtils.getInvalidTestValue(functionName: "postAlignShapes", name: "alignToSlide", value: paramAlignToSlide as Any, type: "Bool")
        TestUtils.initialize("postAlignShapes", "alignToSlide", paramAlignToSlide) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAlignShapes", parameterName: "alignToSlide", parameterValue: paramAlignToSlide as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAlignShapesInvalidShapes() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        paramShapes = TestUtils.getInvalidTestValue(functionName: "postAlignShapes", name: "shapes", value: paramShapes as Any, type: "[Int]")
        TestUtils.initialize("postAlignShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAlignShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAlignShapesInvalidPassword() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postAlignShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postAlignShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAlignShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAlignShapesInvalidFolder() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postAlignShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postAlignShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAlignShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAlignShapesInvalidStorage() {
        let expectation = self.expectation(description: "testpostAlignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postAlignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "postAlignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "postAlignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postAlignShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postAlignShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postAlignShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAlignShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostChartCategory() {
        let expectation = self.expectation(description: "testpostChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "shapeIndex", type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "postChartCategory", name: "category", type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "storage", type: "String")
        TestUtils.initialize("postChartCategory") { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testpostChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "postChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postChartCategory", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "postChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postChartCategory", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "postChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postChartCategory", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartCategoryInvalidCategory() {
        let expectation = self.expectation(description: "testpostChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "postChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "storage", type: "String")
        paramCategory = TestUtils.getInvalidTestValue(functionName: "postChartCategory", name: "category", value: paramCategory as Any, type: "ChartCategory")
        TestUtils.initialize("postChartCategory", "category", paramCategory) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartCategory", parameterName: "category", parameterValue: paramCategory as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testpostChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "postChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postChartCategory", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testpostChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "postChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postChartCategory", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testpostChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "postChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartCategory", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postChartCategory", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostChartDataPoint() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("postChartDataPoint") { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postChartDataPoint", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postChartDataPoint", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postChartDataPoint", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "postChartDataPoint", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("postChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartDataPointInvalidDataPoint() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        paramDataPoint = TestUtils.getInvalidTestValue(functionName: "postChartDataPoint", name: "dataPoint", value: paramDataPoint as Any, type: "DataPoint")
        TestUtils.initialize("postChartDataPoint", "dataPoint", paramDataPoint) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartDataPoint", parameterName: "dataPoint", parameterValue: paramDataPoint as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postChartDataPoint", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postChartDataPoint", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testpostChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartDataPoint", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postChartDataPoint", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostChartSeries() {
        let expectation = self.expectation(description: "testpostChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int")
        let paramSeries : Series = TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String")
        TestUtils.initialize("postChartSeries") { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidSeries() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String")
        paramSeries = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "series", value: paramSeries as Any, type: "Series")
        TestUtils.initialize("postChartSeries", "series", paramSeries) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "series", parameterValue: paramSeries as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostCopyLayoutSlideFromSourcePresentation() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        let paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation") { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidName() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFrom() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        paramCloneFrom = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", value: paramCloneFrom as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", paramCloneFrom) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFrom", parameterValue: paramCloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        paramCloneFromPosition = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", value: paramCloneFromPosition as Any, type: "Int")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromPosition", parameterValue: paramCloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        paramCloneFromPassword = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", value: paramCloneFromPassword as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromPassword", parameterValue: paramCloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        paramCloneFromStorage = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", value: paramCloneFromStorage as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromStorage", parameterValue: paramCloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidPassword() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidFolder() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidStorage() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostCopyMasterSlideFromSourcePresentation() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        let paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation") { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidName() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidCloneFrom() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramCloneFrom = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", value: paramCloneFrom as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFrom", paramCloneFrom) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFrom", parameterValue: paramCloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramCloneFromPosition = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", value: paramCloneFromPosition as Any, type: "Int")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", paramCloneFromPosition) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromPosition", parameterValue: paramCloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramCloneFromPassword = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", value: paramCloneFromPassword as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", paramCloneFromPassword) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromPassword", parameterValue: paramCloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramCloneFromStorage = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", value: paramCloneFromStorage as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", paramCloneFromStorage) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromStorage", parameterValue: paramCloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidApplyToAll() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramApplyToAll = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", value: paramApplyToAll as Any, type: "Bool")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "applyToAll", paramApplyToAll) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "applyToAll", parameterValue: paramApplyToAll as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidPassword() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidFolder() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidStorage() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostExportImageWithDefaultFormat() {
        let expectation = self.expectation(description: "testpostExportImageWithDefaultFormat")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "document", type: "Data")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "index", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "password", type: "String")
        TestUtils.initialize("postExportImageWithDefaultFormat") { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImageWithDefaultFormatInvalidDocument() {
        let expectation = self.expectation(description: "testpostExportImageWithDefaultFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postExportImageWithDefaultFormat", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postExportImageWithDefaultFormat", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImageWithDefaultFormat", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImageWithDefaultFormatInvalidIndex() {
        let expectation = self.expectation(description: "testpostExportImageWithDefaultFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "password", type: "String")
        paramIndex = TestUtils.getInvalidTestValue(functionName: "postExportImageWithDefaultFormat", name: "index", value: paramIndex as Any, type: "Int")
        TestUtils.initialize("postExportImageWithDefaultFormat", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImageWithDefaultFormat", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImageWithDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testpostExportImageWithDefaultFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithDefaultFormat", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postExportImageWithDefaultFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postExportImageWithDefaultFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImageWithDefaultFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostExportImageWithFormat() {
        let expectation = self.expectation(description: "testpostExportImageWithFormat")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "document", type: "Data")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "index", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "password", type: "String")
        TestUtils.initialize("postExportImageWithFormat") { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImageWithFormatInvalidDocument() {
        let expectation = self.expectation(description: "testpostExportImageWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postExportImageWithFormat", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postExportImageWithFormat", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImageWithFormat", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImageWithFormatInvalidIndex() {
        let expectation = self.expectation(description: "testpostExportImageWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "password", type: "String")
        paramIndex = TestUtils.getInvalidTestValue(functionName: "postExportImageWithFormat", name: "index", value: paramIndex as Any, type: "Int")
        TestUtils.initialize("postExportImageWithFormat", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImageWithFormat", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImageWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testpostExportImageWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "password", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postExportImageWithFormat", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postExportImageWithFormat", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImageWithFormat", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImageWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testpostExportImageWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImageWithFormat", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postExportImageWithFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postExportImageWithFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImageWithFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostExportImagesFromRequestWithFormat() {
        let expectation = self.expectation(description: "testpostExportImagesFromRequestWithFormat")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "password", type: "String")
        TestUtils.initialize("postExportImagesFromRequestWithFormat") { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesFromRequestWithFormatInvalidDocument() {
        let expectation = self.expectation(description: "testpostExportImagesFromRequestWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postExportImagesFromRequestWithFormat", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesFromRequestWithFormat", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesFromRequestWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testpostExportImagesFromRequestWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "password", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postExportImagesFromRequestWithFormat", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesFromRequestWithFormat", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesFromRequestWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testpostExportImagesFromRequestWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postExportImagesFromRequestWithFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postExportImagesFromRequestWithFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesFromRequestWithFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostExportImagesWithDefaultFormat() {
        let expectation = self.expectation(description: "testpostExportImagesWithDefaultFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "storage", type: "String")
        TestUtils.initialize("postExportImagesWithDefaultFormat") { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithDefaultFormatInvalidName() {
        let expectation = self.expectation(description: "testpostExportImagesWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithDefaultFormat", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postExportImagesWithDefaultFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithDefaultFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testpostExportImagesWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithDefaultFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postExportImagesWithDefaultFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithDefaultFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithDefaultFormatInvalidFolder() {
        let expectation = self.expectation(description: "testpostExportImagesWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithDefaultFormat", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postExportImagesWithDefaultFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithDefaultFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithDefaultFormatInvalidStorage() {
        let expectation = self.expectation(description: "testpostExportImagesWithDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithDefaultFormat", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithDefaultFormat", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postExportImagesWithDefaultFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithDefaultFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostExportImagesWithFormat() {
        let expectation = self.expectation(description: "testpostExportImagesWithFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "storage", type: "String")
        TestUtils.initialize("postExportImagesWithFormat") { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithFormatInvalidName() {
        let expectation = self.expectation(description: "testpostExportImagesWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithFormat", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postExportImagesWithFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testpostExportImagesWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "storage", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithFormat", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postExportImagesWithFormat", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithFormat", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testpostExportImagesWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postExportImagesWithFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithFormatInvalidFolder() {
        let expectation = self.expectation(description: "testpostExportImagesWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithFormat", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postExportImagesWithFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportImagesWithFormatInvalidStorage() {
        let expectation = self.expectation(description: "testpostExportImagesWithFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportImagesWithFormat", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postExportImagesWithFormat", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postExportImagesWithFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportImagesWithFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostExportShape() {
        let expectation = self.expectation(description: "testpostExportShape")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        TestUtils.initialize("postExportShape") { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidDocument() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postExportShape", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postExportShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postExportShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidFormat() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postExportShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidPassword() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postExportShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidStorage() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postExportShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("postExportShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("postExportShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidBounds() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("postExportShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportShape", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportShape", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postExportShape", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postExportShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostExportSlide() {
        let expectation = self.expectation(description: "testpostExportSlide")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        TestUtils.initialize("postExportSlide") { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportSlideInvalidDocument() {
        let expectation = self.expectation(description: "testpostExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postExportSlide", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postExportSlide", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportSlide", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postExportSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postExportSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportSlideInvalidFormat() {
        let expectation = self.expectation(description: "testpostExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postExportSlide", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postExportSlide", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportSlide", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportSlideInvalidWidth() {
        let expectation = self.expectation(description: "testpostExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "postExportSlide", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("postExportSlide", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportSlide", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportSlideInvalidHeight() {
        let expectation = self.expectation(description: "testpostExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "postExportSlide", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("postExportSlide", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportSlide", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportSlideInvalidPassword() {
        let expectation = self.expectation(description: "testpostExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postExportSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postExportSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportSlideInvalidStorage() {
        let expectation = self.expectation(description: "testpostExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postExportSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postExportSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostExportSlideInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postExportSlide", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postExportSlide", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postExportSlide", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postExportSlide", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostGetNotesSlide() {
        let expectation = self.expectation(description: "testpostGetNotesSlide")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "password", type: "String")
        TestUtils.initialize("postGetNotesSlide") { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideInvalidDocument() {
        let expectation = self.expectation(description: "testpostGetNotesSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlide", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postGetNotesSlide", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlide", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostGetNotesSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "password", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testpostGetNotesSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postGetNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostGetNotesSlideExists() {
        let expectation = self.expectation(description: "testpostGetNotesSlideExists")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "password", type: "String")
        TestUtils.initialize("postGetNotesSlideExists") { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideExistsInvalidDocument() {
        let expectation = self.expectation(description: "testpostGetNotesSlideExists")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideExists", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postGetNotesSlideExists", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideExists", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideExistsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostGetNotesSlideExists")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "password", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlideExists", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideExists", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideExistsInvalidPassword() {
        let expectation = self.expectation(description: "testpostGetNotesSlideExists")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideExists", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postGetNotesSlideExists", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideExists", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostGetNotesSlideWithFormat() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String")
        TestUtils.initialize("postGetNotesSlideWithFormat") { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidDocument() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postGetNotesSlideWithFormat", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlideWithFormat", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postGetNotesSlideWithFormat", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidWidth() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlideWithFormat", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidHeight() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlideWithFormat", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postGetNotesSlideWithFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postGetNotesSlideWithFormat", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostImagesFromRequestWithDefaultFormat() {
        let expectation = self.expectation(description: "testpostImagesFromRequestWithDefaultFormat")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postImagesFromRequestWithDefaultFormat", name: "document", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postImagesFromRequestWithDefaultFormat", name: "password", type: "String")
        TestUtils.initialize("postImagesFromRequestWithDefaultFormat") { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostImagesFromRequestWithDefaultFormatInvalidDocument() {
        let expectation = self.expectation(description: "testpostImagesFromRequestWithDefaultFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postImagesFromRequestWithDefaultFormat", name: "document", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postImagesFromRequestWithDefaultFormat", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postImagesFromRequestWithDefaultFormat", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postImagesFromRequestWithDefaultFormat", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postImagesFromRequestWithDefaultFormat", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostImagesFromRequestWithDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testpostImagesFromRequestWithDefaultFormat")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postImagesFromRequestWithDefaultFormat", name: "document", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postImagesFromRequestWithDefaultFormat", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postImagesFromRequestWithDefaultFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postImagesFromRequestWithDefaultFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postImagesFromRequestWithDefaultFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostNotesSlideAddNewParagraph() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph") { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidName() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidDto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostNotesSlideAddNewPortion() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        let paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion") { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidName() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidDto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("postNotesSlideAddNewPortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidPosition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidPassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidStorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostNotesSlideAddNewShape() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        let paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape") { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidName() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidDto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("postNotesSlideAddNewShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        paramShapeToClone = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", value: paramShapeToClone as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "shapeToClone", paramShapeToClone) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "shapeToClone", parameterValue: paramShapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidPosition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidPassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidStorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostNotesSlideShapeSaveAs() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostPresentationMerge() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        let paramName : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String")
        let paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String")
        TestUtils.initialize("postPresentationMerge") { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidName() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "name", paramName) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidRequest() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String")
        paramRequest = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "request", value: paramRequest as Any, type: "PresentationsMergeRequest")
        TestUtils.initialize("postPresentationMerge", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidPassword() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidFolder() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidStorage() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostPresentationReplaceText() {
        let expectation = self.expectation(description: "testpostPresentationReplaceText")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "document", type: "Data")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "password", type: "String")
        TestUtils.initialize("postPresentationReplaceText") { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationReplaceTextInvalidDocument() {
        let expectation = self.expectation(description: "testpostPresentationReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postPresentationReplaceText", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postPresentationReplaceText", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationReplaceText", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationReplaceTextInvalidOldValue() {
        let expectation = self.expectation(description: "testpostPresentationReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "password", type: "String")
        paramOldValue = TestUtils.getInvalidTestValue(functionName: "postPresentationReplaceText", name: "oldValue", value: paramOldValue as Any, type: "String")
        TestUtils.initialize("postPresentationReplaceText", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationReplaceText", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationReplaceTextInvalidNewValue() {
        let expectation = self.expectation(description: "testpostPresentationReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "password", type: "String")
        paramNewValue = TestUtils.getInvalidTestValue(functionName: "postPresentationReplaceText", name: "newValue", value: paramNewValue as Any, type: "String")
        TestUtils.initialize("postPresentationReplaceText", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationReplaceText", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationReplaceTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testpostPresentationReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "password", type: "String")
        paramIgnoreCase = TestUtils.getInvalidTestValue(functionName: "postPresentationReplaceText", name: "ignoreCase", value: paramIgnoreCase as Any, type: "Bool")
        TestUtils.initialize("postPresentationReplaceText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationReplaceText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationReplaceTextInvalidPassword() {
        let expectation = self.expectation(description: "testpostPresentationReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationReplaceText", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postPresentationReplaceText", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postPresentationReplaceText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationReplaceText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostPresentationSplit() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        TestUtils.initialize("postPresentationSplit") { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidDocument() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postPresentationSplit", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidFormat() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postPresentationSplit", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidWidth() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("postPresentationSplit", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidHeight() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("postPresentationSplit", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidFrom() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramFrom = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "from", value: paramFrom as Any, type: "Int")
        TestUtils.initialize("postPresentationSplit", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidTo() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramTo = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "to", value: paramTo as Any, type: "Int")
        TestUtils.initialize("postPresentationSplit", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidPassword() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postPresentationSplit", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidStorage() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postPresentationSplit", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationSplitInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postPresentationSplit", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postPresentationSplit", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postPresentationSplit", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationSplit", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSection() {
        let expectation = self.expectation(description: "testpostSection")
        let paramName : String = TestUtils.getTestValue(functionName: "postSection", name: "name", type: "String")
        let paramSectionName : String = TestUtils.getTestValue(functionName: "postSection", name: "sectionName", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSection", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSection", name: "storage", type: "String")
        TestUtils.initialize("postSection") { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionInvalidName() {
        let expectation = self.expectation(description: "testpostSection")
        var paramName : String = TestUtils.getTestValue(functionName: "postSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "postSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionInvalidSectionName() {
        let expectation = self.expectation(description: "testpostSection")
        var paramName : String = TestUtils.getTestValue(functionName: "postSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "postSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSection", name: "storage", type: "String")
        paramSectionName = TestUtils.getInvalidTestValue(functionName: "postSection", name: "sectionName", value: paramSectionName as Any, type: "String")
        TestUtils.initialize("postSection", "sectionName", paramSectionName) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSection", parameterName: "sectionName", parameterValue: paramSectionName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSection")
        var paramName : String = TestUtils.getTestValue(functionName: "postSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "postSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSection", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSection", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSection", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSection", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionInvalidPassword() {
        let expectation = self.expectation(description: "testpostSection")
        var paramName : String = TestUtils.getTestValue(functionName: "postSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "postSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionInvalidFolder() {
        let expectation = self.expectation(description: "testpostSection")
        var paramName : String = TestUtils.getTestValue(functionName: "postSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "postSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionInvalidStorage() {
        let expectation = self.expectation(description: "testpostSection")
        var paramName : String = TestUtils.getTestValue(functionName: "postSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "postSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSectionMove() {
        let expectation = self.expectation(description: "testpostSectionMove")
        let paramName : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "sectionIndex", type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "newPosition", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "storage", type: "String")
        TestUtils.initialize("postSectionMove") { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionMoveInvalidName() {
        let expectation = self.expectation(description: "testpostSectionMove")
        var paramName : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSectionMove", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSectionMove", "name", paramName) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSectionMove", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionMoveInvalidSectionIndex() {
        let expectation = self.expectation(description: "testpostSectionMove")
        var paramName : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "storage", type: "String")
        paramSectionIndex = TestUtils.getInvalidTestValue(functionName: "postSectionMove", name: "sectionIndex", value: paramSectionIndex as Any, type: "Int")
        TestUtils.initialize("postSectionMove", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSectionMove", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionMoveInvalidNewPosition() {
        let expectation = self.expectation(description: "testpostSectionMove")
        var paramName : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "storage", type: "String")
        paramNewPosition = TestUtils.getInvalidTestValue(functionName: "postSectionMove", name: "newPosition", value: paramNewPosition as Any, type: "Int")
        TestUtils.initialize("postSectionMove", "newPosition", paramNewPosition) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSectionMove", parameterName: "newPosition", parameterValue: paramNewPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionMoveInvalidPassword() {
        let expectation = self.expectation(description: "testpostSectionMove")
        var paramName : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSectionMove", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSectionMove", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSectionMove", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionMoveInvalidFolder() {
        let expectation = self.expectation(description: "testpostSectionMove")
        var paramName : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSectionMove", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSectionMove", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSectionMove", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSectionMoveInvalidStorage() {
        let expectation = self.expectation(description: "testpostSectionMove")
        var paramName : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSectionMove", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSectionMove", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSectionMove", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSectionMove", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSectionMove", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostShapeSaveAs() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("postShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postShapeSaveAs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postShapeSaveAs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("postShapeSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("postShapeSaveAs", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("postShapeSaveAs", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideAnimationEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("postSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String")
        paramEffect = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "effect", value: paramEffect as Any, type: "Effect")
        TestUtils.initialize("postSlideAnimationEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidSequence() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramSequence = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", value: paramSequence as Any, type: "InteractiveSequence")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "sequence", paramSequence) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "sequence", parameterValue: paramSequence as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSequenceIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: paramSequenceIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramEffect = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", value: paramEffect as Any, type: "Effect")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideReplaceText() {
        let expectation = self.expectation(description: "testpostSlideReplaceText")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "slideIndex", type: "Int")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "password", type: "String")
        TestUtils.initialize("postSlideReplaceText") { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideReplaceTextInvalidDocument() {
        let expectation = self.expectation(description: "testpostSlideReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postSlideReplaceText", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postSlideReplaceText", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideReplaceText", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideReplaceTextInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "password", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideReplaceText", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideReplaceText", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideReplaceText", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideReplaceTextInvalidOldValue() {
        let expectation = self.expectation(description: "testpostSlideReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "password", type: "String")
        paramOldValue = TestUtils.getInvalidTestValue(functionName: "postSlideReplaceText", name: "oldValue", value: paramOldValue as Any, type: "String")
        TestUtils.initialize("postSlideReplaceText", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideReplaceText", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideReplaceTextInvalidNewValue() {
        let expectation = self.expectation(description: "testpostSlideReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "password", type: "String")
        paramNewValue = TestUtils.getInvalidTestValue(functionName: "postSlideReplaceText", name: "newValue", value: paramNewValue as Any, type: "String")
        TestUtils.initialize("postSlideReplaceText", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideReplaceText", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideReplaceTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testpostSlideReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "password", type: "String")
        paramIgnoreCase = TestUtils.getInvalidTestValue(functionName: "postSlideReplaceText", name: "ignoreCase", value: paramIgnoreCase as Any, type: "Bool")
        TestUtils.initialize("postSlideReplaceText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideReplaceText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideReplaceTextInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideReplaceText")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideReplaceText", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlideReplaceText", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlideReplaceText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideReplaceText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideSaveAs() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("postSlideSaveAs") { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("postSlideSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidWidth() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidHeight() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesAdd() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String")
        TestUtils.initialize("postSlidesAdd") { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidLayoutAlias() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String")
        paramLayoutAlias = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "layoutAlias", value: paramLayoutAlias as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "layoutAlias", paramLayoutAlias) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "layoutAlias", parameterValue: paramLayoutAlias as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidPosition() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postSlidesAdd", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesConvert() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String")
        TestUtils.initialize("postSlidesConvert") { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidDocument() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("postSlidesConvert", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidFormat() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesCopy() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        let paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        let paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        let paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        TestUtils.initialize("postSlidesCopy") { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidSlideToCopy() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramSlideToCopy = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "slideToCopy", value: paramSlideToCopy as Any, type: "Int")
        TestUtils.initialize("postSlidesCopy", "slideToCopy", paramSlideToCopy) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "slideToCopy", parameterValue: paramSlideToCopy as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidPosition() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("postSlidesCopy", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidSource() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramSource = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "source", value: paramSource as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "source", paramSource) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "source", parameterValue: paramSource as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidSourcePassword() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramSourcePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "sourcePassword", value: paramSourcePassword as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "sourcePassword", paramSourcePassword) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "sourcePassword", parameterValue: paramSourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidSourceStorage() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramSourceStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "sourceStorage", value: paramSourceStorage as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "sourceStorage", paramSourceStorage) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "sourceStorage", parameterValue: paramSourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocument() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String")
        let paramData : Data = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data")
        let paramInputPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String")
        TestUtils.initialize("postSlidesDocument") { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidData() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String")
        paramData = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "data", value: paramData as Any, type: "Data")
        TestUtils.initialize("postSlidesDocument", "data", paramData) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "data", parameterValue: paramData as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidInputPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String")
        paramInputPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "inputPassword", value: paramInputPassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "inputPassword", paramInputPassword) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "inputPassword", parameterValue: paramInputPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocumentFromHtml() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String")
        let paramHtml : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml") { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "name", paramName) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidHtml() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String")
        paramHtml = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", value: paramHtml as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "html", paramHtml) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "html", parameterValue: paramHtml as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocumentFromPdf() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromPdf")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "name", type: "String")
        let paramPdf : Data = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "pdf", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "storage", type: "String")
        TestUtils.initialize("postSlidesDocumentFromPdf") { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromPdfInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromPdf", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromPdf", "name", paramName) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromPdf", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromPdfInvalidPdf() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "storage", type: "String")
        paramPdf = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromPdf", name: "pdf", value: paramPdf as Any, type: "Data")
        TestUtils.initialize("postSlidesDocumentFromPdf", "pdf", paramPdf) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromPdf", parameterName: "pdf", parameterValue: paramPdf as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromPdfInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromPdf", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromPdf", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromPdf", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromPdfInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromPdf", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromPdf", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromPdf", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromPdfInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromPdf", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromPdf", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromPdf", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromPdf", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocumentFromSource() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String")
        let paramSourcePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String")
        let paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String")
        let paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource") { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidSourcePath() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String")
        paramSourcePath = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", value: paramSourcePath as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourcePath", paramSourcePath) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourcePath", parameterValue: paramSourcePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidSourcePassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String")
        paramSourcePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", value: paramSourcePassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourcePassword", paramSourcePassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourcePassword", parameterValue: paramSourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidSourceStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String")
        paramSourceStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", value: paramSourceStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourceStorage", paramSourceStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourceStorage", parameterValue: paramSourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocumentFromTemplate() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        let paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        let paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate") { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidTemplatePath() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramTemplatePath = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", value: paramTemplatePath as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templatePath", paramTemplatePath) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templatePath", parameterValue: paramTemplatePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidData() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramData = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", value: paramData as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "data", paramData) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "data", parameterValue: paramData as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidTemplatePassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramTemplatePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", value: paramTemplatePassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templatePassword", paramTemplatePassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templatePassword", parameterValue: paramTemplatePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidTemplateStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramTemplateStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", value: paramTemplateStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templateStorage", paramTemplateStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templateStorage", parameterValue: paramTemplateStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidIsImageDataEmbedded() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramIsImageDataEmbedded = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", value: paramIsImageDataEmbedded as Any, type: "Bool")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "isImageDataEmbedded", parameterValue: paramIsImageDataEmbedded as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesMerge() {
        let expectation = self.expectation(description: "testpostSlidesMerge")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "files", type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "request", type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "password", type: "String")
        TestUtils.initialize("postSlidesMerge") { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesMergeInvalidFiles() {
        let expectation = self.expectation(description: "testpostSlidesMerge")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "password", type: "String")
        paramFiles = TestUtils.getInvalidTestValue(functionName: "postSlidesMerge", name: "files", value: paramFiles as Any, type: "[Data]")
        TestUtils.initialize("postSlidesMerge", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesMerge", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesMergeInvalidRequest() {
        let expectation = self.expectation(description: "testpostSlidesMerge")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "password", type: "String")
        paramRequest = TestUtils.getInvalidTestValue(functionName: "postSlidesMerge", name: "request", value: paramRequest as Any, type: "OrderedMergeRequest")
        TestUtils.initialize("postSlidesMerge", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesMerge", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesMergeInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesMerge")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesMerge", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesMerge", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesMerge", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesMerge", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesPipeline() {
        let expectation = self.expectation(description: "testpostSlidesPipeline")
        let paramPipeline : Pipeline = TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "pipeline", type: "Pipeline")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "files", type: "[Data]")
        TestUtils.initialize("postSlidesPipeline") { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPipelineInvalidPipeline() {
        let expectation = self.expectation(description: "testpostSlidesPipeline")
        var paramPipeline : Pipeline = TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "pipeline", type: "Pipeline")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "files", type: "[Data]")
        paramPipeline = TestUtils.getInvalidTestValue(functionName: "postSlidesPipeline", name: "pipeline", value: paramPipeline as Any, type: "Pipeline")
        TestUtils.initialize("postSlidesPipeline", "pipeline", paramPipeline) { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPipeline", parameterName: "pipeline", parameterValue: paramPipeline as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPipelineInvalidFiles() {
        let expectation = self.expectation(description: "testpostSlidesPipeline")
        var paramPipeline : Pipeline = TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "pipeline", type: "Pipeline")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "files", type: "[Data]")
        paramFiles = TestUtils.getInvalidTestValue(functionName: "postSlidesPipeline", name: "files", value: paramFiles as Any, type: "[Data]")
        TestUtils.initialize("postSlidesPipeline", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPipeline", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesPresentationReplaceText() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText") { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "name", paramName) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidOldValue() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String")
        paramOldValue = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", value: paramOldValue as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidNewValue() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String")
        paramNewValue = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", value: paramNewValue as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String")
        paramIgnoreCase = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", value: paramIgnoreCase as Any, type: "Bool")
        TestUtils.initialize("postSlidesPresentationReplaceText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesReorder() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String")
        TestUtils.initialize("postSlidesReorder") { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "name", paramName) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSlidesReorder", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidNewPosition() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String")
        paramNewPosition = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "newPosition", value: paramNewPosition as Any, type: "Int")
        TestUtils.initialize("postSlidesReorder", "newPosition", paramNewPosition) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "newPosition", parameterValue: paramNewPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesReorderMany() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String")
        TestUtils.initialize("postSlidesReorderMany") { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "name", paramName) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidOldPositions() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String")
        paramOldPositions = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", value: paramOldPositions as Any, type: "[Int]")
        TestUtils.initialize("postSlidesReorderMany", "oldPositions", paramOldPositions) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "oldPositions", parameterValue: paramOldPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidNewPositions() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String")
        paramNewPositions = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "newPositions", value: paramNewPositions as Any, type: "[Int]")
        TestUtils.initialize("postSlidesReorderMany", "newPositions", paramNewPositions) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "newPositions", parameterValue: paramNewPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesSaveAs() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("postSlidesSaveAs") { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("postSlidesSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesSetDocumentProperties() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String")
        let paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties") { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidProperties() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String")
        paramProperties = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", value: paramProperties as Any, type: "DocumentProperties")
        TestUtils.initialize("postSlidesSetDocumentProperties", "properties", paramProperties) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "properties", parameterValue: paramProperties as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesSlideReplaceText() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText") { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "name", paramName) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSlidesSlideReplaceText", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidOldValue() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        paramOldValue = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", value: paramOldValue as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidNewValue() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        paramNewValue = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", value: paramNewValue as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        paramIgnoreCase = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", value: paramIgnoreCase as Any, type: "Bool")
        TestUtils.initialize("postSlidesSlideReplaceText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesSplit() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        let paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        let paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        TestUtils.initialize("postSlidesSplit") { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "name", paramName) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidOptions() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("postSlidesSplit", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidFormat() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidWidth() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidHeight() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidFrom() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramFrom = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "from", value: paramFrom as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidTo() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramTo = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "to", value: paramTo as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidDestFolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramDestFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "destFolder", value: paramDestFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "destFolder", paramDestFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "destFolder", parameterValue: paramDestFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var paramName : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSubshapeSaveAs() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("postSubshapeSaveAs") { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("postSubshapeSaveAs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidPath() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("postSubshapeSaveAs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("postSubshapeSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("postSubshapeSaveAs", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("postSubshapeSaveAs", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutChartCategory() {
        let expectation = self.expectation(description: "testputChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        TestUtils.initialize("putChartCategory") { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testputChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putChartCategory", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putChartCategory", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putChartCategory", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartCategoryInvalidCategoryIndex() {
        let expectation = self.expectation(description: "testputChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        paramCategoryIndex = TestUtils.getInvalidTestValue(functionName: "putChartCategory", name: "categoryIndex", value: paramCategoryIndex as Any, type: "Int")
        TestUtils.initialize("putChartCategory", "categoryIndex", paramCategoryIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartCategory", parameterName: "categoryIndex", parameterValue: paramCategoryIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartCategoryInvalidCategory() {
        let expectation = self.expectation(description: "testputChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        paramCategory = TestUtils.getInvalidTestValue(functionName: "putChartCategory", name: "category", value: paramCategory as Any, type: "ChartCategory")
        TestUtils.initialize("putChartCategory", "category", paramCategory) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartCategory", parameterName: "category", parameterValue: paramCategory as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testputChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putChartCategory", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testputChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putChartCategory", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testputChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "putChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "putChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartCategory", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putChartCategory", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutChartDataPoint() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("putChartDataPoint") { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("putChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidPointIndex() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramPointIndex = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "pointIndex", value: paramPointIndex as Any, type: "Int")
        TestUtils.initialize("putChartDataPoint", "pointIndex", paramPointIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "pointIndex", parameterValue: paramPointIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidDataPoint() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramDataPoint = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "dataPoint", value: paramDataPoint as Any, type: "DataPoint")
        TestUtils.initialize("putChartDataPoint", "dataPoint", paramDataPoint) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "dataPoint", parameterValue: paramDataPoint as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testputChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartDataPoint", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putChartDataPoint", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutChartSeries() {
        let expectation = self.expectation(description: "testputChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        let paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        TestUtils.initialize("putChartSeries") { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testputChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testputChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("putChartSeries", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidSeries() {
        let expectation = self.expectation(description: "testputChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        paramSeries = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "series", value: paramSeries as Any, type: "Series")
        TestUtils.initialize("putChartSeries", "series", paramSeries) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "series", parameterValue: paramSeries as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testputChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testputChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testputChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutExportShape() {
        let expectation = self.expectation(description: "testputExportShape")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        TestUtils.initialize("putExportShape") { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidDocument() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("putExportShape", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putExportShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putExportShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidFormat() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putExportShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidOutPath() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putExportShape", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidPassword() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putExportShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidStorage() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putExportShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("putExportShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("putExportShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidBounds() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("putExportShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputExportShape")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportShape", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putExportShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportShape", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportShape", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportShape", name: "storage", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putExportShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putExportShape", name: "bounds", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportShape", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putExportShape", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putExportShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramPassword, paramStorage, paramScaleX, paramScaleY, paramBounds, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutExportSlide() {
        let expectation = self.expectation(description: "testputExportSlide")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        TestUtils.initialize("putExportSlide") { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidDocument() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("putExportSlide", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putExportSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidFormat() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putExportSlide", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidOutPath() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putExportSlide", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidWidth() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("putExportSlide", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidHeight() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("putExportSlide", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidPassword() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putExportSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidStorage() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putExportSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutExportSlideInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputExportSlide")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putExportSlide", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putExportSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putExportSlide", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putExportSlide", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putExportSlide", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putExportSlide", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutLayoutSlide() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String")
        TestUtils.initialize("putLayoutSlide") { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putLayoutSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidSlideDto() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String")
        paramSlideDto = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "slideDto", value: paramSlideDto as Any, type: "LayoutSlide")
        TestUtils.initialize("putLayoutSlide", "slideDto", paramSlideDto) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "slideDto", parameterValue: paramSlideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutNotesSlideHeaderFooter() {
        let expectation = self.expectation(description: "testputNotesSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("putNotesSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testputNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putNotesSlideHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putNotesSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putNotesSlideHeaderFooter", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putNotesSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testputNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putNotesSlideHeaderFooter", name: "dto", value: paramDto as Any, type: "NotesSlideHeaderFooter")
        TestUtils.initialize("putNotesSlideHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testputNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putNotesSlideHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putNotesSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testputNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putNotesSlideHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putNotesSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testputNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putNotesSlideHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putNotesSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutNotesSlideShapeSaveAs() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutPresentationMerge() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        let paramName : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String")
        TestUtils.initialize("putPresentationMerge") { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidName() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "name", paramName) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidRequest() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String")
        paramRequest = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "request", value: paramRequest as Any, type: "OrderedMergeRequest")
        TestUtils.initialize("putPresentationMerge", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidPassword() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidFolder() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidStorage() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutPresentationSplit() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        let paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        TestUtils.initialize("putPresentationSplit") { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidDocument() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("putPresentationSplit", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidFormat() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putPresentationSplit", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidDestFolder() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramDestFolder = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "destFolder", value: paramDestFolder as Any, type: "String")
        TestUtils.initialize("putPresentationSplit", "destFolder", paramDestFolder) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "destFolder", parameterValue: paramDestFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidWidth() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("putPresentationSplit", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidHeight() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("putPresentationSplit", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidFrom() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramFrom = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "from", value: paramFrom as Any, type: "Int")
        TestUtils.initialize("putPresentationSplit", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidTo() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramTo = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "to", value: paramTo as Any, type: "Int")
        TestUtils.initialize("putPresentationSplit", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidPassword() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putPresentationSplit", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidStorage() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putPresentationSplit", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationSplitInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputPresentationSplit")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putPresentationSplit", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putPresentationSplit", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putPresentationSplit", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationSplit", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSection() {
        let expectation = self.expectation(description: "testputSection")
        let paramName : String = TestUtils.getTestValue(functionName: "putSection", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "putSection", name: "sectionIndex", type: "Int")
        let paramSectionName : String = TestUtils.getTestValue(functionName: "putSection", name: "sectionName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSection", name: "storage", type: "String")
        TestUtils.initialize("putSection") { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionInvalidName() {
        let expectation = self.expectation(description: "testputSection")
        var paramName : String = TestUtils.getTestValue(functionName: "putSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "putSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "putSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionInvalidSectionIndex() {
        let expectation = self.expectation(description: "testputSection")
        var paramName : String = TestUtils.getTestValue(functionName: "putSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "putSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "putSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSection", name: "storage", type: "String")
        paramSectionIndex = TestUtils.getInvalidTestValue(functionName: "putSection", name: "sectionIndex", value: paramSectionIndex as Any, type: "Int")
        TestUtils.initialize("putSection", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSection", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionInvalidSectionName() {
        let expectation = self.expectation(description: "testputSection")
        var paramName : String = TestUtils.getTestValue(functionName: "putSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "putSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "putSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSection", name: "storage", type: "String")
        paramSectionName = TestUtils.getInvalidTestValue(functionName: "putSection", name: "sectionName", value: paramSectionName as Any, type: "String")
        TestUtils.initialize("putSection", "sectionName", paramSectionName) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSection", parameterName: "sectionName", parameterValue: paramSectionName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionInvalidPassword() {
        let expectation = self.expectation(description: "testputSection")
        var paramName : String = TestUtils.getTestValue(functionName: "putSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "putSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "putSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionInvalidFolder() {
        let expectation = self.expectation(description: "testputSection")
        var paramName : String = TestUtils.getTestValue(functionName: "putSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "putSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "putSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionInvalidStorage() {
        let expectation = self.expectation(description: "testputSection")
        var paramName : String = TestUtils.getTestValue(functionName: "putSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "putSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "putSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSections() {
        let expectation = self.expectation(description: "testputSections")
        let paramName : String = TestUtils.getTestValue(functionName: "putSections", name: "name", type: "String")
        let paramSections : Sections = TestUtils.getTestValue(functionName: "putSections", name: "sections", type: "Sections")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSections", name: "storage", type: "String")
        TestUtils.initialize("putSections") { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionsInvalidName() {
        let expectation = self.expectation(description: "testputSections")
        var paramName : String = TestUtils.getTestValue(functionName: "putSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "putSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSections", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSections", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionsInvalidSections() {
        let expectation = self.expectation(description: "testputSections")
        var paramName : String = TestUtils.getTestValue(functionName: "putSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "putSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSections", name: "storage", type: "String")
        paramSections = TestUtils.getInvalidTestValue(functionName: "putSections", name: "sections", value: paramSections as Any, type: "Sections")
        TestUtils.initialize("putSections", "sections", paramSections) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSections", parameterName: "sections", parameterValue: paramSections as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testputSections")
        var paramName : String = TestUtils.getTestValue(functionName: "putSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "putSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSections", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSections", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testputSections")
        var paramName : String = TestUtils.getTestValue(functionName: "putSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "putSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSections", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSections", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testputSections")
        var paramName : String = TestUtils.getTestValue(functionName: "putSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "putSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSections", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSections", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSetParagraphPortionProperties() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties") { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidPortionIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("putSetParagraphPortionProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSetParagraphProperties() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        TestUtils.initialize("putSetParagraphProperties") { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("putSetParagraphProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSetSubshapeParagraphPortionProperties() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties") { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidPath() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidPortionIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSetSubshapeParagraphProperties() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties") { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidPath() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutShapeSaveAs() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("putShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putShapeSaveAs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putShapeSaveAs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("putShapeSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("putShapeSaveAs", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("putShapeSaveAs", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideAnimation() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String")
        TestUtils.initialize("putSlideAnimation") { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidAnimation() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String")
        paramAnimation = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "animation", value: paramAnimation as Any, type: "SlideAnimation")
        TestUtils.initialize("putSlideAnimation", "animation", paramAnimation) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "animation", parameterValue: paramAnimation as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideAnimationEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("putSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String")
        paramEffectIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", value: paramEffectIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String")
        paramEffect = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "effect", value: paramEffect as Any, type: "Effect")
        TestUtils.initialize("putSlideAnimationEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSequenceIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: paramSequenceIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramEffectIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", value: paramEffectIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramEffect = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", value: paramEffect as Any, type: "Effect")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideHeaderFooter() {
        let expectation = self.expectation(description: "testputSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("putSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testputSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlideHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideHeaderFooter", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testputSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSlideHeaderFooter", name: "dto", value: paramDto as Any, type: "HeaderFooter")
        TestUtils.initialize("putSlideHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlideHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlideHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlideHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideSaveAs() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("putSlideSaveAs") { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("putSlideSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidWidth() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidHeight() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideShapeInfo() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String")
        TestUtils.initialize("putSlideShapeInfo") { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidName() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideShapeInfo", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putSlideShapeInfo", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidDto() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("putSlideShapeInfo", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideSubshapeInfo() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        TestUtils.initialize("putSlideSubshapeInfo") { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidName() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideSubshapeInfo", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidPath() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putSlideSubshapeInfo", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidDto() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("putSlideSubshapeInfo", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesConvert() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String")
        TestUtils.initialize("putSlidesConvert") { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidDocument() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("putSlidesConvert", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidFormat() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidOutPath() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesDocumentFromHtml() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String")
        let paramHtml : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml") { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidName() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "name", paramName) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidHtml() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String")
        paramHtml = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", value: paramHtml as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "html", paramHtml) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "html", parameterValue: paramHtml as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesHeaderFooter() {
        let expectation = self.expectation(description: "testputSlidesHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "name", type: "String")
        let paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "dto", type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("putSlidesHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testputSlidesHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testputSlidesHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSlidesHeaderFooter", name: "dto", value: paramDto as Any, type: "HeaderFooter")
        TestUtils.initialize("putSlidesHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesMerge() {
        let expectation = self.expectation(description: "testputSlidesMerge")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "outPath", type: "String")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "files", type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "request", type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "storage", type: "String")
        TestUtils.initialize("putSlidesMerge") { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesMergeInvalidOutPath() {
        let expectation = self.expectation(description: "testputSlidesMerge")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "storage", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putSlidesMerge", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putSlidesMerge", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesMerge", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesMergeInvalidFiles() {
        let expectation = self.expectation(description: "testputSlidesMerge")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "storage", type: "String")
        paramFiles = TestUtils.getInvalidTestValue(functionName: "putSlidesMerge", name: "files", value: paramFiles as Any, type: "[Data]")
        TestUtils.initialize("putSlidesMerge", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesMerge", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesMergeInvalidRequest() {
        let expectation = self.expectation(description: "testputSlidesMerge")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "storage", type: "String")
        paramRequest = TestUtils.getInvalidTestValue(functionName: "putSlidesMerge", name: "request", value: paramRequest as Any, type: "OrderedMergeRequest")
        TestUtils.initialize("putSlidesMerge", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesMerge", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesMergeInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesMerge")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesMerge", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesMerge", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesMerge", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesMergeInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesMerge")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesMerge", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesMerge", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesMerge", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramPassword, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesMerge", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesProtectionProperties() {
        let expectation = self.expectation(description: "testputSlidesProtectionProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "name", type: "String")
        let paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "dto", type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "storage", type: "String")
        TestUtils.initialize("putSlidesProtectionProperties") { (response, error) -> Void in
            SlidesAPI.setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesProtectionPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesProtectionProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesProtectionProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesProtectionProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesProtectionPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSlidesProtectionProperties", name: "dto", value: paramDto as Any, type: "ProtectionProperties")
        TestUtils.initialize("putSlidesProtectionProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesProtectionProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesProtectionPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesProtectionProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesProtectionProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesProtectionProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesProtectionPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesProtectionProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesProtectionProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesProtectionProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesProtectionPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesProtectionProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesProtectionProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesProtectionProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setProtectionProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesProtectionProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSaveAs() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("putSlidesSaveAs") { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("putSlidesSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSetDocumentProperty() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty") { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String")
        paramPropertyName = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", value: paramPropertyName as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidProperty() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String")
        paramProperty = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", value: paramProperty as Any, type: "DocumentProperty")
        TestUtils.initialize("putSlidesSetDocumentProperty", "property", paramProperty) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "property", parameterValue: paramProperty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlide() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String")
        TestUtils.initialize("putSlidesSlide") { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidSlideDto() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String")
        paramSlideDto = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "slideDto", value: paramSlideDto as Any, type: "Slide")
        TestUtils.initialize("putSlidesSlide", "slideDto", paramSlideDto) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "slideDto", parameterValue: paramSlideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlideBackground() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String")
        TestUtils.initialize("putSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidBackground() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String")
        paramBackground = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "background", value: paramBackground as Any, type: "SlideBackground")
        TestUtils.initialize("putSlidesSlideBackground", "background", paramBackground) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "background", parameterValue: paramBackground as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlideBackgroundColor() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int")
        let paramColor : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor") { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidColor() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String")
        paramColor = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", value: paramColor as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "color", paramColor) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "color", parameterValue: paramColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlideProperties() {
        let expectation = self.expectation(description: "testputSlidesSlideProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "name", type: "String")
        let paramDto : SlideProperties = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "dto", type: "SlideProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "storage", type: "String")
        TestUtils.initialize("putSlidesSlideProperties") { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlidePropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesSlideProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlidePropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideProperties", name: "dto", value: paramDto as Any, type: "SlideProperties")
        TestUtils.initialize("putSlidesSlideProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlidePropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesSlideProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlidePropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlidePropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlideSize() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        let paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        let paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        TestUtils.initialize("putSlidesSlideSize") { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        var paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        var paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "name", paramName) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidWidth() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        var paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        var paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideSize", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidHeight() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        var paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        var paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideSize", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidSizeType() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        var paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        var paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        paramSizeType = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "sizeType", value: paramSizeType as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "sizeType", paramSizeType) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "sizeType", parameterValue: paramSizeType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidScaleType() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        var paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        var paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        paramScaleType = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "scaleType", value: paramScaleType as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "scaleType", paramScaleType) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "scaleType", parameterValue: paramScaleType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        var paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        var paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        var paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        var paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int")
        var paramSizeType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String")
        var paramScaleType : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(paramName, paramWidth, paramHeight, paramSizeType, paramScaleType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesViewProperties() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String")
        let paramDto : ViewProperties = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String")
        TestUtils.initialize("putSlidesViewProperties") { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSlidesViewProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "dto", value: paramDto as Any, type: "ViewProperties")
        TestUtils.initialize("putSlidesViewProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSlidesViewProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSlidesViewProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSlidesViewProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSubshapeSaveAs() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        let paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        TestUtils.initialize("putSubshapeSaveAs") { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putSubshapeSaveAs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidPath() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putSubshapeSaveAs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("putSubshapeSaveAs", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("putSubshapeSaveAs", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("putSubshapeSaveAs", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var paramName : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutUpdateNotesSlide() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("putUpdateNotesSlide") { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidDto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "dto", value: paramDto as Any, type: "NotesSlide")
        TestUtils.initialize("putUpdateNotesSlide", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutUpdateNotesSlideShape() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidDto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("putUpdateNotesSlideShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutUpdateNotesSlideShapeParagraph() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidDto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutUpdateNotesSlideShapePortion() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        let paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion") { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidName() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidDto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testStorageExists() {
        let expectation = self.expectation(description: "teststorageExists")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String")
        TestUtils.initialize("storageExists") { (response, error) -> Void in
            SlidesAPI.storageExists(paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testStorageExistsInvalidStorageName() {
        let expectation = self.expectation(description: "teststorageExists")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "storageExists", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("storageExists", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.storageExists(paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "storageExists", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUploadFile() {
        let expectation = self.expectation(description: "testuploadFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        let paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        TestUtils.initialize("uploadFile") { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidPath() {
        let expectation = self.expectation(description: "testuploadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        var paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("uploadFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidFile() {
        let expectation = self.expectation(description: "testuploadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        var paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        paramFile = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "file", value: paramFile as Any, type: "Data")
        TestUtils.initialize("uploadFile", "file", paramFile) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "file", parameterValue: paramFile as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidStorageName() {
        let expectation = self.expectation(description: "testuploadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        var paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("uploadFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
}
