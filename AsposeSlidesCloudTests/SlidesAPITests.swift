/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2020 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


import XCTest
@testable import AsposeSlidesCloud

class SlidesAPITests : XCTestCase {
    static var allTests : [(String, (SlidesAPITests) -> () -> ())] = [
        ("testCopyFile", testCopyFile),
        ("testCopyFileInvalidSrcPath", testCopyFileInvalidSrcPath),
        ("testCopyFileInvalidDestPath", testCopyFileInvalidDestPath),
        ("testCopyFileInvalidSrcStorageName", testCopyFileInvalidSrcStorageName),
        ("testCopyFileInvalidDestStorageName", testCopyFileInvalidDestStorageName),
        ("testCopyFileInvalidVersionId", testCopyFileInvalidVersionId),
        ("testCopyFolder", testCopyFolder),
        ("testCopyFolderInvalidSrcPath", testCopyFolderInvalidSrcPath),
        ("testCopyFolderInvalidDestPath", testCopyFolderInvalidDestPath),
        ("testCopyFolderInvalidSrcStorageName", testCopyFolderInvalidSrcStorageName),
        ("testCopyFolderInvalidDestStorageName", testCopyFolderInvalidDestStorageName),
        ("testCreateFolder", testCreateFolder),
        ("testCreateFolderInvalidPath", testCreateFolderInvalidPath),
        ("testCreateFolderInvalidStorageName", testCreateFolderInvalidStorageName),
        ("testDeleteChartSeries", testDeleteChartSeries),
        ("testDeleteChartSeriesInvalidName", testDeleteChartSeriesInvalidName),
        ("testDeleteChartSeriesInvalidSlideIndex", testDeleteChartSeriesInvalidSlideIndex),
        ("testDeleteChartSeriesInvalidShapeIndex", testDeleteChartSeriesInvalidShapeIndex),
        ("testDeleteChartSeriesInvalidSeriesIndex", testDeleteChartSeriesInvalidSeriesIndex),
        ("testDeleteChartSeriesInvalidPassword", testDeleteChartSeriesInvalidPassword),
        ("testDeleteChartSeriesInvalidFolder", testDeleteChartSeriesInvalidFolder),
        ("testDeleteChartSeriesInvalidStorage", testDeleteChartSeriesInvalidStorage),
        ("testDeleteFile", testDeleteFile),
        ("testDeleteFileInvalidPath", testDeleteFileInvalidPath),
        ("testDeleteFileInvalidStorageName", testDeleteFileInvalidStorageName),
        ("testDeleteFileInvalidVersionId", testDeleteFileInvalidVersionId),
        ("testDeleteFolder", testDeleteFolder),
        ("testDeleteFolderInvalidPath", testDeleteFolderInvalidPath),
        ("testDeleteFolderInvalidStorageName", testDeleteFolderInvalidStorageName),
        ("testDeleteFolderInvalidRecursive", testDeleteFolderInvalidRecursive),
        ("testDeleteNotesSlide", testDeleteNotesSlide),
        ("testDeleteNotesSlideInvalidName", testDeleteNotesSlideInvalidName),
        ("testDeleteNotesSlideInvalidSlideIndex", testDeleteNotesSlideInvalidSlideIndex),
        ("testDeleteNotesSlideInvalidPassword", testDeleteNotesSlideInvalidPassword),
        ("testDeleteNotesSlideInvalidFolder", testDeleteNotesSlideInvalidFolder),
        ("testDeleteNotesSlideInvalidStorage", testDeleteNotesSlideInvalidStorage),
        ("testDeleteNotesSlideParagraph", testDeleteNotesSlideParagraph),
        ("testDeleteNotesSlideParagraphInvalidName", testDeleteNotesSlideParagraphInvalidName),
        ("testDeleteNotesSlideParagraphInvalidSlideIndex", testDeleteNotesSlideParagraphInvalidSlideIndex),
        ("testDeleteNotesSlideParagraphInvalidShapeIndex", testDeleteNotesSlideParagraphInvalidShapeIndex),
        ("testDeleteNotesSlideParagraphInvalidParagraphIndex", testDeleteNotesSlideParagraphInvalidParagraphIndex),
        ("testDeleteNotesSlideParagraphInvalidPassword", testDeleteNotesSlideParagraphInvalidPassword),
        ("testDeleteNotesSlideParagraphInvalidFolder", testDeleteNotesSlideParagraphInvalidFolder),
        ("testDeleteNotesSlideParagraphInvalidStorage", testDeleteNotesSlideParagraphInvalidStorage),
        ("testDeleteNotesSlideParagraphs", testDeleteNotesSlideParagraphs),
        ("testDeleteNotesSlideParagraphsInvalidName", testDeleteNotesSlideParagraphsInvalidName),
        ("testDeleteNotesSlideParagraphsInvalidSlideIndex", testDeleteNotesSlideParagraphsInvalidSlideIndex),
        ("testDeleteNotesSlideParagraphsInvalidShapeIndex", testDeleteNotesSlideParagraphsInvalidShapeIndex),
        ("testDeleteNotesSlideParagraphsInvalidParagraphs", testDeleteNotesSlideParagraphsInvalidParagraphs),
        ("testDeleteNotesSlideParagraphsInvalidPassword", testDeleteNotesSlideParagraphsInvalidPassword),
        ("testDeleteNotesSlideParagraphsInvalidFolder", testDeleteNotesSlideParagraphsInvalidFolder),
        ("testDeleteNotesSlideParagraphsInvalidStorage", testDeleteNotesSlideParagraphsInvalidStorage),
        ("testDeleteNotesSlidePortion", testDeleteNotesSlidePortion),
        ("testDeleteNotesSlidePortionInvalidName", testDeleteNotesSlidePortionInvalidName),
        ("testDeleteNotesSlidePortionInvalidSlideIndex", testDeleteNotesSlidePortionInvalidSlideIndex),
        ("testDeleteNotesSlidePortionInvalidShapeIndex", testDeleteNotesSlidePortionInvalidShapeIndex),
        ("testDeleteNotesSlidePortionInvalidParagraphIndex", testDeleteNotesSlidePortionInvalidParagraphIndex),
        ("testDeleteNotesSlidePortionInvalidPortionIndex", testDeleteNotesSlidePortionInvalidPortionIndex),
        ("testDeleteNotesSlidePortionInvalidPassword", testDeleteNotesSlidePortionInvalidPassword),
        ("testDeleteNotesSlidePortionInvalidFolder", testDeleteNotesSlidePortionInvalidFolder),
        ("testDeleteNotesSlidePortionInvalidStorage", testDeleteNotesSlidePortionInvalidStorage),
        ("testDeleteNotesSlidePortions", testDeleteNotesSlidePortions),
        ("testDeleteNotesSlidePortionsInvalidName", testDeleteNotesSlidePortionsInvalidName),
        ("testDeleteNotesSlidePortionsInvalidSlideIndex", testDeleteNotesSlidePortionsInvalidSlideIndex),
        ("testDeleteNotesSlidePortionsInvalidShapeIndex", testDeleteNotesSlidePortionsInvalidShapeIndex),
        ("testDeleteNotesSlidePortionsInvalidParagraphIndex", testDeleteNotesSlidePortionsInvalidParagraphIndex),
        ("testDeleteNotesSlidePortionsInvalidPortions", testDeleteNotesSlidePortionsInvalidPortions),
        ("testDeleteNotesSlidePortionsInvalidPassword", testDeleteNotesSlidePortionsInvalidPassword),
        ("testDeleteNotesSlidePortionsInvalidFolder", testDeleteNotesSlidePortionsInvalidFolder),
        ("testDeleteNotesSlidePortionsInvalidStorage", testDeleteNotesSlidePortionsInvalidStorage),
        ("testDeleteNotesSlideShape", testDeleteNotesSlideShape),
        ("testDeleteNotesSlideShapeInvalidName", testDeleteNotesSlideShapeInvalidName),
        ("testDeleteNotesSlideShapeInvalidSlideIndex", testDeleteNotesSlideShapeInvalidSlideIndex),
        ("testDeleteNotesSlideShapeInvalidShapeIndex", testDeleteNotesSlideShapeInvalidShapeIndex),
        ("testDeleteNotesSlideShapeInvalidPassword", testDeleteNotesSlideShapeInvalidPassword),
        ("testDeleteNotesSlideShapeInvalidFolder", testDeleteNotesSlideShapeInvalidFolder),
        ("testDeleteNotesSlideShapeInvalidStorage", testDeleteNotesSlideShapeInvalidStorage),
        ("testDeleteNotesSlideShapes", testDeleteNotesSlideShapes),
        ("testDeleteNotesSlideShapesInvalidName", testDeleteNotesSlideShapesInvalidName),
        ("testDeleteNotesSlideShapesInvalidSlideIndex", testDeleteNotesSlideShapesInvalidSlideIndex),
        ("testDeleteNotesSlideShapesInvalidShapes", testDeleteNotesSlideShapesInvalidShapes),
        ("testDeleteNotesSlideShapesInvalidPassword", testDeleteNotesSlideShapesInvalidPassword),
        ("testDeleteNotesSlideShapesInvalidFolder", testDeleteNotesSlideShapesInvalidFolder),
        ("testDeleteNotesSlideShapesInvalidStorage", testDeleteNotesSlideShapesInvalidStorage),
        ("testDeleteParagraph", testDeleteParagraph),
        ("testDeleteParagraphInvalidName", testDeleteParagraphInvalidName),
        ("testDeleteParagraphInvalidSlideIndex", testDeleteParagraphInvalidSlideIndex),
        ("testDeleteParagraphInvalidShapeIndex", testDeleteParagraphInvalidShapeIndex),
        ("testDeleteParagraphInvalidParagraphIndex", testDeleteParagraphInvalidParagraphIndex),
        ("testDeleteParagraphInvalidPassword", testDeleteParagraphInvalidPassword),
        ("testDeleteParagraphInvalidFolder", testDeleteParagraphInvalidFolder),
        ("testDeleteParagraphInvalidStorage", testDeleteParagraphInvalidStorage),
        ("testDeleteParagraphs", testDeleteParagraphs),
        ("testDeleteParagraphsInvalidName", testDeleteParagraphsInvalidName),
        ("testDeleteParagraphsInvalidSlideIndex", testDeleteParagraphsInvalidSlideIndex),
        ("testDeleteParagraphsInvalidShapeIndex", testDeleteParagraphsInvalidShapeIndex),
        ("testDeleteParagraphsInvalidParagraphs", testDeleteParagraphsInvalidParagraphs),
        ("testDeleteParagraphsInvalidPassword", testDeleteParagraphsInvalidPassword),
        ("testDeleteParagraphsInvalidFolder", testDeleteParagraphsInvalidFolder),
        ("testDeleteParagraphsInvalidStorage", testDeleteParagraphsInvalidStorage),
        ("testDeletePortion", testDeletePortion),
        ("testDeletePortionInvalidName", testDeletePortionInvalidName),
        ("testDeletePortionInvalidSlideIndex", testDeletePortionInvalidSlideIndex),
        ("testDeletePortionInvalidShapeIndex", testDeletePortionInvalidShapeIndex),
        ("testDeletePortionInvalidParagraphIndex", testDeletePortionInvalidParagraphIndex),
        ("testDeletePortionInvalidPortionIndex", testDeletePortionInvalidPortionIndex),
        ("testDeletePortionInvalidPassword", testDeletePortionInvalidPassword),
        ("testDeletePortionInvalidFolder", testDeletePortionInvalidFolder),
        ("testDeletePortionInvalidStorage", testDeletePortionInvalidStorage),
        ("testDeletePortions", testDeletePortions),
        ("testDeletePortionsInvalidName", testDeletePortionsInvalidName),
        ("testDeletePortionsInvalidSlideIndex", testDeletePortionsInvalidSlideIndex),
        ("testDeletePortionsInvalidShapeIndex", testDeletePortionsInvalidShapeIndex),
        ("testDeletePortionsInvalidParagraphIndex", testDeletePortionsInvalidParagraphIndex),
        ("testDeletePortionsInvalidPortions", testDeletePortionsInvalidPortions),
        ("testDeletePortionsInvalidPassword", testDeletePortionsInvalidPassword),
        ("testDeletePortionsInvalidFolder", testDeletePortionsInvalidFolder),
        ("testDeletePortionsInvalidStorage", testDeletePortionsInvalidStorage),
        ("testDeleteSlideAnimation", testDeleteSlideAnimation),
        ("testDeleteSlideAnimationInvalidName", testDeleteSlideAnimationInvalidName),
        ("testDeleteSlideAnimationInvalidSlideIndex", testDeleteSlideAnimationInvalidSlideIndex),
        ("testDeleteSlideAnimationInvalidPassword", testDeleteSlideAnimationInvalidPassword),
        ("testDeleteSlideAnimationInvalidFolder", testDeleteSlideAnimationInvalidFolder),
        ("testDeleteSlideAnimationInvalidStorage", testDeleteSlideAnimationInvalidStorage),
        ("testDeleteSlideAnimationEffect", testDeleteSlideAnimationEffect),
        ("testDeleteSlideAnimationEffectInvalidName", testDeleteSlideAnimationEffectInvalidName),
        ("testDeleteSlideAnimationEffectInvalidSlideIndex", testDeleteSlideAnimationEffectInvalidSlideIndex),
        ("testDeleteSlideAnimationEffectInvalidEffectIndex", testDeleteSlideAnimationEffectInvalidEffectIndex),
        ("testDeleteSlideAnimationEffectInvalidPassword", testDeleteSlideAnimationEffectInvalidPassword),
        ("testDeleteSlideAnimationEffectInvalidFolder", testDeleteSlideAnimationEffectInvalidFolder),
        ("testDeleteSlideAnimationEffectInvalidStorage", testDeleteSlideAnimationEffectInvalidStorage),
        ("testDeleteSlideAnimationInteractiveSequence", testDeleteSlideAnimationInteractiveSequence),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidName", testDeleteSlideAnimationInteractiveSequenceInvalidName),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidSlideIndex", testDeleteSlideAnimationInteractiveSequenceInvalidSlideIndex),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidSequenceIndex", testDeleteSlideAnimationInteractiveSequenceInvalidSequenceIndex),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidPassword", testDeleteSlideAnimationInteractiveSequenceInvalidPassword),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidFolder", testDeleteSlideAnimationInteractiveSequenceInvalidFolder),
        ("testDeleteSlideAnimationInteractiveSequenceInvalidStorage", testDeleteSlideAnimationInteractiveSequenceInvalidStorage),
        ("testDeleteSlideAnimationInteractiveSequenceEffect", testDeleteSlideAnimationInteractiveSequenceEffect),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidName", testDeleteSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testDeleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testDeleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndex", testDeleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidPassword", testDeleteSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidFolder", testDeleteSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testDeleteSlideAnimationInteractiveSequenceEffectInvalidStorage", testDeleteSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testDeleteSlideAnimationInteractiveSequences", testDeleteSlideAnimationInteractiveSequences),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidName", testDeleteSlideAnimationInteractiveSequencesInvalidName),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidSlideIndex", testDeleteSlideAnimationInteractiveSequencesInvalidSlideIndex),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidPassword", testDeleteSlideAnimationInteractiveSequencesInvalidPassword),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidFolder", testDeleteSlideAnimationInteractiveSequencesInvalidFolder),
        ("testDeleteSlideAnimationInteractiveSequencesInvalidStorage", testDeleteSlideAnimationInteractiveSequencesInvalidStorage),
        ("testDeleteSlideAnimationMainSequence", testDeleteSlideAnimationMainSequence),
        ("testDeleteSlideAnimationMainSequenceInvalidName", testDeleteSlideAnimationMainSequenceInvalidName),
        ("testDeleteSlideAnimationMainSequenceInvalidSlideIndex", testDeleteSlideAnimationMainSequenceInvalidSlideIndex),
        ("testDeleteSlideAnimationMainSequenceInvalidPassword", testDeleteSlideAnimationMainSequenceInvalidPassword),
        ("testDeleteSlideAnimationMainSequenceInvalidFolder", testDeleteSlideAnimationMainSequenceInvalidFolder),
        ("testDeleteSlideAnimationMainSequenceInvalidStorage", testDeleteSlideAnimationMainSequenceInvalidStorage),
        ("testDeleteSlideByIndex", testDeleteSlideByIndex),
        ("testDeleteSlideByIndexInvalidName", testDeleteSlideByIndexInvalidName),
        ("testDeleteSlideByIndexInvalidSlideIndex", testDeleteSlideByIndexInvalidSlideIndex),
        ("testDeleteSlideByIndexInvalidPassword", testDeleteSlideByIndexInvalidPassword),
        ("testDeleteSlideByIndexInvalidFolder", testDeleteSlideByIndexInvalidFolder),
        ("testDeleteSlideByIndexInvalidStorage", testDeleteSlideByIndexInvalidStorage),
        ("testDeleteSlideShape", testDeleteSlideShape),
        ("testDeleteSlideShapeInvalidName", testDeleteSlideShapeInvalidName),
        ("testDeleteSlideShapeInvalidSlideIndex", testDeleteSlideShapeInvalidSlideIndex),
        ("testDeleteSlideShapeInvalidShapeIndex", testDeleteSlideShapeInvalidShapeIndex),
        ("testDeleteSlideShapeInvalidPassword", testDeleteSlideShapeInvalidPassword),
        ("testDeleteSlideShapeInvalidFolder", testDeleteSlideShapeInvalidFolder),
        ("testDeleteSlideShapeInvalidStorage", testDeleteSlideShapeInvalidStorage),
        ("testDeleteSlideShapes", testDeleteSlideShapes),
        ("testDeleteSlideShapesInvalidName", testDeleteSlideShapesInvalidName),
        ("testDeleteSlideShapesInvalidSlideIndex", testDeleteSlideShapesInvalidSlideIndex),
        ("testDeleteSlideShapesInvalidShapes", testDeleteSlideShapesInvalidShapes),
        ("testDeleteSlideShapesInvalidPassword", testDeleteSlideShapesInvalidPassword),
        ("testDeleteSlideShapesInvalidFolder", testDeleteSlideShapesInvalidFolder),
        ("testDeleteSlideShapesInvalidStorage", testDeleteSlideShapesInvalidStorage),
        ("testDeleteSlideSubshape", testDeleteSlideSubshape),
        ("testDeleteSlideSubshapeInvalidName", testDeleteSlideSubshapeInvalidName),
        ("testDeleteSlideSubshapeInvalidSlideIndex", testDeleteSlideSubshapeInvalidSlideIndex),
        ("testDeleteSlideSubshapeInvalidPath", testDeleteSlideSubshapeInvalidPath),
        ("testDeleteSlideSubshapeInvalidShapeIndex", testDeleteSlideSubshapeInvalidShapeIndex),
        ("testDeleteSlideSubshapeInvalidPassword", testDeleteSlideSubshapeInvalidPassword),
        ("testDeleteSlideSubshapeInvalidFolder", testDeleteSlideSubshapeInvalidFolder),
        ("testDeleteSlideSubshapeInvalidStorage", testDeleteSlideSubshapeInvalidStorage),
        ("testDeleteSlideSubshapes", testDeleteSlideSubshapes),
        ("testDeleteSlideSubshapesInvalidName", testDeleteSlideSubshapesInvalidName),
        ("testDeleteSlideSubshapesInvalidSlideIndex", testDeleteSlideSubshapesInvalidSlideIndex),
        ("testDeleteSlideSubshapesInvalidPath", testDeleteSlideSubshapesInvalidPath),
        ("testDeleteSlideSubshapesInvalidShapes", testDeleteSlideSubshapesInvalidShapes),
        ("testDeleteSlideSubshapesInvalidPassword", testDeleteSlideSubshapesInvalidPassword),
        ("testDeleteSlideSubshapesInvalidFolder", testDeleteSlideSubshapesInvalidFolder),
        ("testDeleteSlideSubshapesInvalidStorage", testDeleteSlideSubshapesInvalidStorage),
        ("testDeleteSlidesCleanSlidesList", testDeleteSlidesCleanSlidesList),
        ("testDeleteSlidesCleanSlidesListInvalidName", testDeleteSlidesCleanSlidesListInvalidName),
        ("testDeleteSlidesCleanSlidesListInvalidSlides", testDeleteSlidesCleanSlidesListInvalidSlides),
        ("testDeleteSlidesCleanSlidesListInvalidPassword", testDeleteSlidesCleanSlidesListInvalidPassword),
        ("testDeleteSlidesCleanSlidesListInvalidFolder", testDeleteSlidesCleanSlidesListInvalidFolder),
        ("testDeleteSlidesCleanSlidesListInvalidStorage", testDeleteSlidesCleanSlidesListInvalidStorage),
        ("testDeleteSlidesDocumentProperties", testDeleteSlidesDocumentProperties),
        ("testDeleteSlidesDocumentPropertiesInvalidName", testDeleteSlidesDocumentPropertiesInvalidName),
        ("testDeleteSlidesDocumentPropertiesInvalidPassword", testDeleteSlidesDocumentPropertiesInvalidPassword),
        ("testDeleteSlidesDocumentPropertiesInvalidFolder", testDeleteSlidesDocumentPropertiesInvalidFolder),
        ("testDeleteSlidesDocumentPropertiesInvalidStorage", testDeleteSlidesDocumentPropertiesInvalidStorage),
        ("testDeleteSlidesDocumentProperty", testDeleteSlidesDocumentProperty),
        ("testDeleteSlidesDocumentPropertyInvalidName", testDeleteSlidesDocumentPropertyInvalidName),
        ("testDeleteSlidesDocumentPropertyInvalidPropertyName", testDeleteSlidesDocumentPropertyInvalidPropertyName),
        ("testDeleteSlidesDocumentPropertyInvalidPassword", testDeleteSlidesDocumentPropertyInvalidPassword),
        ("testDeleteSlidesDocumentPropertyInvalidFolder", testDeleteSlidesDocumentPropertyInvalidFolder),
        ("testDeleteSlidesDocumentPropertyInvalidStorage", testDeleteSlidesDocumentPropertyInvalidStorage),
        ("testDeleteSlidesSlideBackground", testDeleteSlidesSlideBackground),
        ("testDeleteSlidesSlideBackgroundInvalidName", testDeleteSlidesSlideBackgroundInvalidName),
        ("testDeleteSlidesSlideBackgroundInvalidSlideIndex", testDeleteSlidesSlideBackgroundInvalidSlideIndex),
        ("testDeleteSlidesSlideBackgroundInvalidPassword", testDeleteSlidesSlideBackgroundInvalidPassword),
        ("testDeleteSlidesSlideBackgroundInvalidFolder", testDeleteSlidesSlideBackgroundInvalidFolder),
        ("testDeleteSlidesSlideBackgroundInvalidStorage", testDeleteSlidesSlideBackgroundInvalidStorage),
        ("testDeleteSubshapeParagraph", testDeleteSubshapeParagraph),
        ("testDeleteSubshapeParagraphInvalidName", testDeleteSubshapeParagraphInvalidName),
        ("testDeleteSubshapeParagraphInvalidSlideIndex", testDeleteSubshapeParagraphInvalidSlideIndex),
        ("testDeleteSubshapeParagraphInvalidPath", testDeleteSubshapeParagraphInvalidPath),
        ("testDeleteSubshapeParagraphInvalidShapeIndex", testDeleteSubshapeParagraphInvalidShapeIndex),
        ("testDeleteSubshapeParagraphInvalidParagraphIndex", testDeleteSubshapeParagraphInvalidParagraphIndex),
        ("testDeleteSubshapeParagraphInvalidPassword", testDeleteSubshapeParagraphInvalidPassword),
        ("testDeleteSubshapeParagraphInvalidFolder", testDeleteSubshapeParagraphInvalidFolder),
        ("testDeleteSubshapeParagraphInvalidStorage", testDeleteSubshapeParagraphInvalidStorage),
        ("testDeleteSubshapeParagraphs", testDeleteSubshapeParagraphs),
        ("testDeleteSubshapeParagraphsInvalidName", testDeleteSubshapeParagraphsInvalidName),
        ("testDeleteSubshapeParagraphsInvalidSlideIndex", testDeleteSubshapeParagraphsInvalidSlideIndex),
        ("testDeleteSubshapeParagraphsInvalidPath", testDeleteSubshapeParagraphsInvalidPath),
        ("testDeleteSubshapeParagraphsInvalidShapeIndex", testDeleteSubshapeParagraphsInvalidShapeIndex),
        ("testDeleteSubshapeParagraphsInvalidParagraphs", testDeleteSubshapeParagraphsInvalidParagraphs),
        ("testDeleteSubshapeParagraphsInvalidPassword", testDeleteSubshapeParagraphsInvalidPassword),
        ("testDeleteSubshapeParagraphsInvalidFolder", testDeleteSubshapeParagraphsInvalidFolder),
        ("testDeleteSubshapeParagraphsInvalidStorage", testDeleteSubshapeParagraphsInvalidStorage),
        ("testDeleteSubshapePortion", testDeleteSubshapePortion),
        ("testDeleteSubshapePortionInvalidName", testDeleteSubshapePortionInvalidName),
        ("testDeleteSubshapePortionInvalidSlideIndex", testDeleteSubshapePortionInvalidSlideIndex),
        ("testDeleteSubshapePortionInvalidPath", testDeleteSubshapePortionInvalidPath),
        ("testDeleteSubshapePortionInvalidShapeIndex", testDeleteSubshapePortionInvalidShapeIndex),
        ("testDeleteSubshapePortionInvalidParagraphIndex", testDeleteSubshapePortionInvalidParagraphIndex),
        ("testDeleteSubshapePortionInvalidPortionIndex", testDeleteSubshapePortionInvalidPortionIndex),
        ("testDeleteSubshapePortionInvalidPassword", testDeleteSubshapePortionInvalidPassword),
        ("testDeleteSubshapePortionInvalidFolder", testDeleteSubshapePortionInvalidFolder),
        ("testDeleteSubshapePortionInvalidStorage", testDeleteSubshapePortionInvalidStorage),
        ("testDeleteSubshapePortions", testDeleteSubshapePortions),
        ("testDeleteSubshapePortionsInvalidName", testDeleteSubshapePortionsInvalidName),
        ("testDeleteSubshapePortionsInvalidSlideIndex", testDeleteSubshapePortionsInvalidSlideIndex),
        ("testDeleteSubshapePortionsInvalidPath", testDeleteSubshapePortionsInvalidPath),
        ("testDeleteSubshapePortionsInvalidShapeIndex", testDeleteSubshapePortionsInvalidShapeIndex),
        ("testDeleteSubshapePortionsInvalidParagraphIndex", testDeleteSubshapePortionsInvalidParagraphIndex),
        ("testDeleteSubshapePortionsInvalidPortions", testDeleteSubshapePortionsInvalidPortions),
        ("testDeleteSubshapePortionsInvalidPassword", testDeleteSubshapePortionsInvalidPassword),
        ("testDeleteSubshapePortionsInvalidFolder", testDeleteSubshapePortionsInvalidFolder),
        ("testDeleteSubshapePortionsInvalidStorage", testDeleteSubshapePortionsInvalidStorage),
        ("testDownloadFile", testDownloadFile),
        ("testDownloadFileInvalidPath", testDownloadFileInvalidPath),
        ("testDownloadFileInvalidStorageName", testDownloadFileInvalidStorageName),
        ("testDownloadFileInvalidVersionId", testDownloadFileInvalidVersionId),
        ("testGetDiscUsage", testGetDiscUsage),
        ("testGetDiscUsageInvalidStorageName", testGetDiscUsageInvalidStorageName),
        ("testGetFileVersions", testGetFileVersions),
        ("testGetFileVersionsInvalidPath", testGetFileVersionsInvalidPath),
        ("testGetFileVersionsInvalidStorageName", testGetFileVersionsInvalidStorageName),
        ("testGetFilesList", testGetFilesList),
        ("testGetFilesListInvalidPath", testGetFilesListInvalidPath),
        ("testGetFilesListInvalidStorageName", testGetFilesListInvalidStorageName),
        ("testGetLayoutSlide", testGetLayoutSlide),
        ("testGetLayoutSlideInvalidName", testGetLayoutSlideInvalidName),
        ("testGetLayoutSlideInvalidSlideIndex", testGetLayoutSlideInvalidSlideIndex),
        ("testGetLayoutSlideInvalidPassword", testGetLayoutSlideInvalidPassword),
        ("testGetLayoutSlideInvalidFolder", testGetLayoutSlideInvalidFolder),
        ("testGetLayoutSlideInvalidStorage", testGetLayoutSlideInvalidStorage),
        ("testGetLayoutSlidesList", testGetLayoutSlidesList),
        ("testGetLayoutSlidesListInvalidName", testGetLayoutSlidesListInvalidName),
        ("testGetLayoutSlidesListInvalidPassword", testGetLayoutSlidesListInvalidPassword),
        ("testGetLayoutSlidesListInvalidFolder", testGetLayoutSlidesListInvalidFolder),
        ("testGetLayoutSlidesListInvalidStorage", testGetLayoutSlidesListInvalidStorage),
        ("testGetMasterSlide", testGetMasterSlide),
        ("testGetMasterSlideInvalidName", testGetMasterSlideInvalidName),
        ("testGetMasterSlideInvalidSlideIndex", testGetMasterSlideInvalidSlideIndex),
        ("testGetMasterSlideInvalidPassword", testGetMasterSlideInvalidPassword),
        ("testGetMasterSlideInvalidFolder", testGetMasterSlideInvalidFolder),
        ("testGetMasterSlideInvalidStorage", testGetMasterSlideInvalidStorage),
        ("testGetMasterSlidesList", testGetMasterSlidesList),
        ("testGetMasterSlidesListInvalidName", testGetMasterSlidesListInvalidName),
        ("testGetMasterSlidesListInvalidPassword", testGetMasterSlidesListInvalidPassword),
        ("testGetMasterSlidesListInvalidFolder", testGetMasterSlidesListInvalidFolder),
        ("testGetMasterSlidesListInvalidStorage", testGetMasterSlidesListInvalidStorage),
        ("testGetNotesSlide", testGetNotesSlide),
        ("testGetNotesSlideInvalidName", testGetNotesSlideInvalidName),
        ("testGetNotesSlideInvalidSlideIndex", testGetNotesSlideInvalidSlideIndex),
        ("testGetNotesSlideInvalidPassword", testGetNotesSlideInvalidPassword),
        ("testGetNotesSlideInvalidFolder", testGetNotesSlideInvalidFolder),
        ("testGetNotesSlideInvalidStorage", testGetNotesSlideInvalidStorage),
        ("testGetNotesSlideExists", testGetNotesSlideExists),
        ("testGetNotesSlideExistsInvalidName", testGetNotesSlideExistsInvalidName),
        ("testGetNotesSlideExistsInvalidSlideIndex", testGetNotesSlideExistsInvalidSlideIndex),
        ("testGetNotesSlideExistsInvalidPassword", testGetNotesSlideExistsInvalidPassword),
        ("testGetNotesSlideExistsInvalidFolder", testGetNotesSlideExistsInvalidFolder),
        ("testGetNotesSlideExistsInvalidStorage", testGetNotesSlideExistsInvalidStorage),
        ("testGetNotesSlideShape", testGetNotesSlideShape),
        ("testGetNotesSlideShapeInvalidName", testGetNotesSlideShapeInvalidName),
        ("testGetNotesSlideShapeInvalidSlideIndex", testGetNotesSlideShapeInvalidSlideIndex),
        ("testGetNotesSlideShapeInvalidShapeIndex", testGetNotesSlideShapeInvalidShapeIndex),
        ("testGetNotesSlideShapeInvalidPassword", testGetNotesSlideShapeInvalidPassword),
        ("testGetNotesSlideShapeInvalidFolder", testGetNotesSlideShapeInvalidFolder),
        ("testGetNotesSlideShapeInvalidStorage", testGetNotesSlideShapeInvalidStorage),
        ("testGetNotesSlideShapeParagraph", testGetNotesSlideShapeParagraph),
        ("testGetNotesSlideShapeParagraphInvalidName", testGetNotesSlideShapeParagraphInvalidName),
        ("testGetNotesSlideShapeParagraphInvalidSlideIndex", testGetNotesSlideShapeParagraphInvalidSlideIndex),
        ("testGetNotesSlideShapeParagraphInvalidShapeIndex", testGetNotesSlideShapeParagraphInvalidShapeIndex),
        ("testGetNotesSlideShapeParagraphInvalidParagraphIndex", testGetNotesSlideShapeParagraphInvalidParagraphIndex),
        ("testGetNotesSlideShapeParagraphInvalidPassword", testGetNotesSlideShapeParagraphInvalidPassword),
        ("testGetNotesSlideShapeParagraphInvalidFolder", testGetNotesSlideShapeParagraphInvalidFolder),
        ("testGetNotesSlideShapeParagraphInvalidStorage", testGetNotesSlideShapeParagraphInvalidStorage),
        ("testGetNotesSlideShapeParagraphs", testGetNotesSlideShapeParagraphs),
        ("testGetNotesSlideShapeParagraphsInvalidName", testGetNotesSlideShapeParagraphsInvalidName),
        ("testGetNotesSlideShapeParagraphsInvalidSlideIndex", testGetNotesSlideShapeParagraphsInvalidSlideIndex),
        ("testGetNotesSlideShapeParagraphsInvalidShapeIndex", testGetNotesSlideShapeParagraphsInvalidShapeIndex),
        ("testGetNotesSlideShapeParagraphsInvalidPassword", testGetNotesSlideShapeParagraphsInvalidPassword),
        ("testGetNotesSlideShapeParagraphsInvalidFolder", testGetNotesSlideShapeParagraphsInvalidFolder),
        ("testGetNotesSlideShapeParagraphsInvalidStorage", testGetNotesSlideShapeParagraphsInvalidStorage),
        ("testGetNotesSlideShapePortion", testGetNotesSlideShapePortion),
        ("testGetNotesSlideShapePortionInvalidName", testGetNotesSlideShapePortionInvalidName),
        ("testGetNotesSlideShapePortionInvalidSlideIndex", testGetNotesSlideShapePortionInvalidSlideIndex),
        ("testGetNotesSlideShapePortionInvalidShapeIndex", testGetNotesSlideShapePortionInvalidShapeIndex),
        ("testGetNotesSlideShapePortionInvalidParagraphIndex", testGetNotesSlideShapePortionInvalidParagraphIndex),
        ("testGetNotesSlideShapePortionInvalidPortionIndex", testGetNotesSlideShapePortionInvalidPortionIndex),
        ("testGetNotesSlideShapePortionInvalidPassword", testGetNotesSlideShapePortionInvalidPassword),
        ("testGetNotesSlideShapePortionInvalidFolder", testGetNotesSlideShapePortionInvalidFolder),
        ("testGetNotesSlideShapePortionInvalidStorage", testGetNotesSlideShapePortionInvalidStorage),
        ("testGetNotesSlideShapePortions", testGetNotesSlideShapePortions),
        ("testGetNotesSlideShapePortionsInvalidName", testGetNotesSlideShapePortionsInvalidName),
        ("testGetNotesSlideShapePortionsInvalidSlideIndex", testGetNotesSlideShapePortionsInvalidSlideIndex),
        ("testGetNotesSlideShapePortionsInvalidShapeIndex", testGetNotesSlideShapePortionsInvalidShapeIndex),
        ("testGetNotesSlideShapePortionsInvalidParagraphIndex", testGetNotesSlideShapePortionsInvalidParagraphIndex),
        ("testGetNotesSlideShapePortionsInvalidPassword", testGetNotesSlideShapePortionsInvalidPassword),
        ("testGetNotesSlideShapePortionsInvalidFolder", testGetNotesSlideShapePortionsInvalidFolder),
        ("testGetNotesSlideShapePortionsInvalidStorage", testGetNotesSlideShapePortionsInvalidStorage),
        ("testGetNotesSlideShapes", testGetNotesSlideShapes),
        ("testGetNotesSlideShapesInvalidName", testGetNotesSlideShapesInvalidName),
        ("testGetNotesSlideShapesInvalidSlideIndex", testGetNotesSlideShapesInvalidSlideIndex),
        ("testGetNotesSlideShapesInvalidPassword", testGetNotesSlideShapesInvalidPassword),
        ("testGetNotesSlideShapesInvalidFolder", testGetNotesSlideShapesInvalidFolder),
        ("testGetNotesSlideShapesInvalidStorage", testGetNotesSlideShapesInvalidStorage),
        ("testGetNotesSlideWithFormat", testGetNotesSlideWithFormat),
        ("testGetNotesSlideWithFormatInvalidName", testGetNotesSlideWithFormatInvalidName),
        ("testGetNotesSlideWithFormatInvalidSlideIndex", testGetNotesSlideWithFormatInvalidSlideIndex),
        ("testGetNotesSlideWithFormatInvalidFormat", testGetNotesSlideWithFormatInvalidFormat),
        ("testGetNotesSlideWithFormatInvalidWidth", testGetNotesSlideWithFormatInvalidWidth),
        ("testGetNotesSlideWithFormatInvalidHeight", testGetNotesSlideWithFormatInvalidHeight),
        ("testGetNotesSlideWithFormatInvalidPassword", testGetNotesSlideWithFormatInvalidPassword),
        ("testGetNotesSlideWithFormatInvalidFolder", testGetNotesSlideWithFormatInvalidFolder),
        ("testGetNotesSlideWithFormatInvalidStorage", testGetNotesSlideWithFormatInvalidStorage),
        ("testGetNotesSlideWithFormatInvalidFontsFolder", testGetNotesSlideWithFormatInvalidFontsFolder),
        ("testGetParagraphPortion", testGetParagraphPortion),
        ("testGetParagraphPortionInvalidName", testGetParagraphPortionInvalidName),
        ("testGetParagraphPortionInvalidSlideIndex", testGetParagraphPortionInvalidSlideIndex),
        ("testGetParagraphPortionInvalidShapeIndex", testGetParagraphPortionInvalidShapeIndex),
        ("testGetParagraphPortionInvalidParagraphIndex", testGetParagraphPortionInvalidParagraphIndex),
        ("testGetParagraphPortionInvalidPortionIndex", testGetParagraphPortionInvalidPortionIndex),
        ("testGetParagraphPortionInvalidPassword", testGetParagraphPortionInvalidPassword),
        ("testGetParagraphPortionInvalidFolder", testGetParagraphPortionInvalidFolder),
        ("testGetParagraphPortionInvalidStorage", testGetParagraphPortionInvalidStorage),
        ("testGetParagraphPortions", testGetParagraphPortions),
        ("testGetParagraphPortionsInvalidName", testGetParagraphPortionsInvalidName),
        ("testGetParagraphPortionsInvalidSlideIndex", testGetParagraphPortionsInvalidSlideIndex),
        ("testGetParagraphPortionsInvalidShapeIndex", testGetParagraphPortionsInvalidShapeIndex),
        ("testGetParagraphPortionsInvalidParagraphIndex", testGetParagraphPortionsInvalidParagraphIndex),
        ("testGetParagraphPortionsInvalidPassword", testGetParagraphPortionsInvalidPassword),
        ("testGetParagraphPortionsInvalidFolder", testGetParagraphPortionsInvalidFolder),
        ("testGetParagraphPortionsInvalidStorage", testGetParagraphPortionsInvalidStorage),
        ("testGetSlideAnimation", testGetSlideAnimation),
        ("testGetSlideAnimationInvalidName", testGetSlideAnimationInvalidName),
        ("testGetSlideAnimationInvalidSlideIndex", testGetSlideAnimationInvalidSlideIndex),
        ("testGetSlideAnimationInvalidShapeIndex", testGetSlideAnimationInvalidShapeIndex),
        ("testGetSlideAnimationInvalidPassword", testGetSlideAnimationInvalidPassword),
        ("testGetSlideAnimationInvalidFolder", testGetSlideAnimationInvalidFolder),
        ("testGetSlideAnimationInvalidStorage", testGetSlideAnimationInvalidStorage),
        ("testGetSlideShape", testGetSlideShape),
        ("testGetSlideShapeInvalidName", testGetSlideShapeInvalidName),
        ("testGetSlideShapeInvalidSlideIndex", testGetSlideShapeInvalidSlideIndex),
        ("testGetSlideShapeInvalidShapeIndex", testGetSlideShapeInvalidShapeIndex),
        ("testGetSlideShapeInvalidPassword", testGetSlideShapeInvalidPassword),
        ("testGetSlideShapeInvalidFolder", testGetSlideShapeInvalidFolder),
        ("testGetSlideShapeInvalidStorage", testGetSlideShapeInvalidStorage),
        ("testGetSlideShapeParagraph", testGetSlideShapeParagraph),
        ("testGetSlideShapeParagraphInvalidName", testGetSlideShapeParagraphInvalidName),
        ("testGetSlideShapeParagraphInvalidSlideIndex", testGetSlideShapeParagraphInvalidSlideIndex),
        ("testGetSlideShapeParagraphInvalidShapeIndex", testGetSlideShapeParagraphInvalidShapeIndex),
        ("testGetSlideShapeParagraphInvalidParagraphIndex", testGetSlideShapeParagraphInvalidParagraphIndex),
        ("testGetSlideShapeParagraphInvalidPassword", testGetSlideShapeParagraphInvalidPassword),
        ("testGetSlideShapeParagraphInvalidFolder", testGetSlideShapeParagraphInvalidFolder),
        ("testGetSlideShapeParagraphInvalidStorage", testGetSlideShapeParagraphInvalidStorage),
        ("testGetSlideShapeParagraphs", testGetSlideShapeParagraphs),
        ("testGetSlideShapeParagraphsInvalidName", testGetSlideShapeParagraphsInvalidName),
        ("testGetSlideShapeParagraphsInvalidSlideIndex", testGetSlideShapeParagraphsInvalidSlideIndex),
        ("testGetSlideShapeParagraphsInvalidShapeIndex", testGetSlideShapeParagraphsInvalidShapeIndex),
        ("testGetSlideShapeParagraphsInvalidPassword", testGetSlideShapeParagraphsInvalidPassword),
        ("testGetSlideShapeParagraphsInvalidFolder", testGetSlideShapeParagraphsInvalidFolder),
        ("testGetSlideShapeParagraphsInvalidStorage", testGetSlideShapeParagraphsInvalidStorage),
        ("testGetSlideShapes", testGetSlideShapes),
        ("testGetSlideShapesInvalidName", testGetSlideShapesInvalidName),
        ("testGetSlideShapesInvalidSlideIndex", testGetSlideShapesInvalidSlideIndex),
        ("testGetSlideShapesInvalidPassword", testGetSlideShapesInvalidPassword),
        ("testGetSlideShapesInvalidFolder", testGetSlideShapesInvalidFolder),
        ("testGetSlideShapesInvalidStorage", testGetSlideShapesInvalidStorage),
        ("testGetSlideSubshape", testGetSlideSubshape),
        ("testGetSlideSubshapeInvalidName", testGetSlideSubshapeInvalidName),
        ("testGetSlideSubshapeInvalidSlideIndex", testGetSlideSubshapeInvalidSlideIndex),
        ("testGetSlideSubshapeInvalidPath", testGetSlideSubshapeInvalidPath),
        ("testGetSlideSubshapeInvalidShapeIndex", testGetSlideSubshapeInvalidShapeIndex),
        ("testGetSlideSubshapeInvalidPassword", testGetSlideSubshapeInvalidPassword),
        ("testGetSlideSubshapeInvalidFolder", testGetSlideSubshapeInvalidFolder),
        ("testGetSlideSubshapeInvalidStorage", testGetSlideSubshapeInvalidStorage),
        ("testGetSlideSubshapeParagraph", testGetSlideSubshapeParagraph),
        ("testGetSlideSubshapeParagraphInvalidName", testGetSlideSubshapeParagraphInvalidName),
        ("testGetSlideSubshapeParagraphInvalidSlideIndex", testGetSlideSubshapeParagraphInvalidSlideIndex),
        ("testGetSlideSubshapeParagraphInvalidPath", testGetSlideSubshapeParagraphInvalidPath),
        ("testGetSlideSubshapeParagraphInvalidShapeIndex", testGetSlideSubshapeParagraphInvalidShapeIndex),
        ("testGetSlideSubshapeParagraphInvalidParagraphIndex", testGetSlideSubshapeParagraphInvalidParagraphIndex),
        ("testGetSlideSubshapeParagraphInvalidPassword", testGetSlideSubshapeParagraphInvalidPassword),
        ("testGetSlideSubshapeParagraphInvalidFolder", testGetSlideSubshapeParagraphInvalidFolder),
        ("testGetSlideSubshapeParagraphInvalidStorage", testGetSlideSubshapeParagraphInvalidStorage),
        ("testGetSlideSubshapeParagraphs", testGetSlideSubshapeParagraphs),
        ("testGetSlideSubshapeParagraphsInvalidName", testGetSlideSubshapeParagraphsInvalidName),
        ("testGetSlideSubshapeParagraphsInvalidSlideIndex", testGetSlideSubshapeParagraphsInvalidSlideIndex),
        ("testGetSlideSubshapeParagraphsInvalidPath", testGetSlideSubshapeParagraphsInvalidPath),
        ("testGetSlideSubshapeParagraphsInvalidShapeIndex", testGetSlideSubshapeParagraphsInvalidShapeIndex),
        ("testGetSlideSubshapeParagraphsInvalidPassword", testGetSlideSubshapeParagraphsInvalidPassword),
        ("testGetSlideSubshapeParagraphsInvalidFolder", testGetSlideSubshapeParagraphsInvalidFolder),
        ("testGetSlideSubshapeParagraphsInvalidStorage", testGetSlideSubshapeParagraphsInvalidStorage),
        ("testGetSlideSubshapes", testGetSlideSubshapes),
        ("testGetSlideSubshapesInvalidName", testGetSlideSubshapesInvalidName),
        ("testGetSlideSubshapesInvalidSlideIndex", testGetSlideSubshapesInvalidSlideIndex),
        ("testGetSlideSubshapesInvalidPath", testGetSlideSubshapesInvalidPath),
        ("testGetSlideSubshapesInvalidPassword", testGetSlideSubshapesInvalidPassword),
        ("testGetSlideSubshapesInvalidFolder", testGetSlideSubshapesInvalidFolder),
        ("testGetSlideSubshapesInvalidStorage", testGetSlideSubshapesInvalidStorage),
        ("testGetSlidesApiInfo", testGetSlidesApiInfo),
        ("testGetSlidesDocument", testGetSlidesDocument),
        ("testGetSlidesDocumentInvalidName", testGetSlidesDocumentInvalidName),
        ("testGetSlidesDocumentInvalidPassword", testGetSlidesDocumentInvalidPassword),
        ("testGetSlidesDocumentInvalidStorage", testGetSlidesDocumentInvalidStorage),
        ("testGetSlidesDocumentInvalidFolder", testGetSlidesDocumentInvalidFolder),
        ("testGetSlidesDocumentProperties", testGetSlidesDocumentProperties),
        ("testGetSlidesDocumentPropertiesInvalidName", testGetSlidesDocumentPropertiesInvalidName),
        ("testGetSlidesDocumentPropertiesInvalidPassword", testGetSlidesDocumentPropertiesInvalidPassword),
        ("testGetSlidesDocumentPropertiesInvalidFolder", testGetSlidesDocumentPropertiesInvalidFolder),
        ("testGetSlidesDocumentPropertiesInvalidStorage", testGetSlidesDocumentPropertiesInvalidStorage),
        ("testGetSlidesDocumentProperty", testGetSlidesDocumentProperty),
        ("testGetSlidesDocumentPropertyInvalidName", testGetSlidesDocumentPropertyInvalidName),
        ("testGetSlidesDocumentPropertyInvalidPropertyName", testGetSlidesDocumentPropertyInvalidPropertyName),
        ("testGetSlidesDocumentPropertyInvalidPassword", testGetSlidesDocumentPropertyInvalidPassword),
        ("testGetSlidesDocumentPropertyInvalidFolder", testGetSlidesDocumentPropertyInvalidFolder),
        ("testGetSlidesDocumentPropertyInvalidStorage", testGetSlidesDocumentPropertyInvalidStorage),
        ("testGetSlidesImageWithDefaultFormat", testGetSlidesImageWithDefaultFormat),
        ("testGetSlidesImageWithDefaultFormatInvalidName", testGetSlidesImageWithDefaultFormatInvalidName),
        ("testGetSlidesImageWithDefaultFormatInvalidIndex", testGetSlidesImageWithDefaultFormatInvalidIndex),
        ("testGetSlidesImageWithDefaultFormatInvalidPassword", testGetSlidesImageWithDefaultFormatInvalidPassword),
        ("testGetSlidesImageWithDefaultFormatInvalidFolder", testGetSlidesImageWithDefaultFormatInvalidFolder),
        ("testGetSlidesImageWithDefaultFormatInvalidStorage", testGetSlidesImageWithDefaultFormatInvalidStorage),
        ("testGetSlidesImageWithFormat", testGetSlidesImageWithFormat),
        ("testGetSlidesImageWithFormatInvalidName", testGetSlidesImageWithFormatInvalidName),
        ("testGetSlidesImageWithFormatInvalidIndex", testGetSlidesImageWithFormatInvalidIndex),
        ("testGetSlidesImageWithFormatInvalidFormat", testGetSlidesImageWithFormatInvalidFormat),
        ("testGetSlidesImageWithFormatInvalidPassword", testGetSlidesImageWithFormatInvalidPassword),
        ("testGetSlidesImageWithFormatInvalidFolder", testGetSlidesImageWithFormatInvalidFolder),
        ("testGetSlidesImageWithFormatInvalidStorage", testGetSlidesImageWithFormatInvalidStorage),
        ("testGetSlidesImages", testGetSlidesImages),
        ("testGetSlidesImagesInvalidName", testGetSlidesImagesInvalidName),
        ("testGetSlidesImagesInvalidPassword", testGetSlidesImagesInvalidPassword),
        ("testGetSlidesImagesInvalidFolder", testGetSlidesImagesInvalidFolder),
        ("testGetSlidesImagesInvalidStorage", testGetSlidesImagesInvalidStorage),
        ("testGetSlidesPlaceholder", testGetSlidesPlaceholder),
        ("testGetSlidesPlaceholderInvalidName", testGetSlidesPlaceholderInvalidName),
        ("testGetSlidesPlaceholderInvalidSlideIndex", testGetSlidesPlaceholderInvalidSlideIndex),
        ("testGetSlidesPlaceholderInvalidPlaceholderIndex", testGetSlidesPlaceholderInvalidPlaceholderIndex),
        ("testGetSlidesPlaceholderInvalidPassword", testGetSlidesPlaceholderInvalidPassword),
        ("testGetSlidesPlaceholderInvalidFolder", testGetSlidesPlaceholderInvalidFolder),
        ("testGetSlidesPlaceholderInvalidStorage", testGetSlidesPlaceholderInvalidStorage),
        ("testGetSlidesPlaceholders", testGetSlidesPlaceholders),
        ("testGetSlidesPlaceholdersInvalidName", testGetSlidesPlaceholdersInvalidName),
        ("testGetSlidesPlaceholdersInvalidSlideIndex", testGetSlidesPlaceholdersInvalidSlideIndex),
        ("testGetSlidesPlaceholdersInvalidPassword", testGetSlidesPlaceholdersInvalidPassword),
        ("testGetSlidesPlaceholdersInvalidFolder", testGetSlidesPlaceholdersInvalidFolder),
        ("testGetSlidesPlaceholdersInvalidStorage", testGetSlidesPlaceholdersInvalidStorage),
        ("testGetSlidesPresentationTextItems", testGetSlidesPresentationTextItems),
        ("testGetSlidesPresentationTextItemsInvalidName", testGetSlidesPresentationTextItemsInvalidName),
        ("testGetSlidesPresentationTextItemsInvalidWithEmpty", testGetSlidesPresentationTextItemsInvalidWithEmpty),
        ("testGetSlidesPresentationTextItemsInvalidPassword", testGetSlidesPresentationTextItemsInvalidPassword),
        ("testGetSlidesPresentationTextItemsInvalidFolder", testGetSlidesPresentationTextItemsInvalidFolder),
        ("testGetSlidesPresentationTextItemsInvalidStorage", testGetSlidesPresentationTextItemsInvalidStorage),
        ("testGetSlidesSlide", testGetSlidesSlide),
        ("testGetSlidesSlideInvalidName", testGetSlidesSlideInvalidName),
        ("testGetSlidesSlideInvalidSlideIndex", testGetSlidesSlideInvalidSlideIndex),
        ("testGetSlidesSlideInvalidPassword", testGetSlidesSlideInvalidPassword),
        ("testGetSlidesSlideInvalidFolder", testGetSlidesSlideInvalidFolder),
        ("testGetSlidesSlideInvalidStorage", testGetSlidesSlideInvalidStorage),
        ("testGetSlidesSlideBackground", testGetSlidesSlideBackground),
        ("testGetSlidesSlideBackgroundInvalidName", testGetSlidesSlideBackgroundInvalidName),
        ("testGetSlidesSlideBackgroundInvalidSlideIndex", testGetSlidesSlideBackgroundInvalidSlideIndex),
        ("testGetSlidesSlideBackgroundInvalidPassword", testGetSlidesSlideBackgroundInvalidPassword),
        ("testGetSlidesSlideBackgroundInvalidFolder", testGetSlidesSlideBackgroundInvalidFolder),
        ("testGetSlidesSlideBackgroundInvalidStorage", testGetSlidesSlideBackgroundInvalidStorage),
        ("testGetSlidesSlideComments", testGetSlidesSlideComments),
        ("testGetSlidesSlideCommentsInvalidName", testGetSlidesSlideCommentsInvalidName),
        ("testGetSlidesSlideCommentsInvalidSlideIndex", testGetSlidesSlideCommentsInvalidSlideIndex),
        ("testGetSlidesSlideCommentsInvalidPassword", testGetSlidesSlideCommentsInvalidPassword),
        ("testGetSlidesSlideCommentsInvalidFolder", testGetSlidesSlideCommentsInvalidFolder),
        ("testGetSlidesSlideCommentsInvalidStorage", testGetSlidesSlideCommentsInvalidStorage),
        ("testGetSlidesSlideImages", testGetSlidesSlideImages),
        ("testGetSlidesSlideImagesInvalidName", testGetSlidesSlideImagesInvalidName),
        ("testGetSlidesSlideImagesInvalidSlideIndex", testGetSlidesSlideImagesInvalidSlideIndex),
        ("testGetSlidesSlideImagesInvalidPassword", testGetSlidesSlideImagesInvalidPassword),
        ("testGetSlidesSlideImagesInvalidFolder", testGetSlidesSlideImagesInvalidFolder),
        ("testGetSlidesSlideImagesInvalidStorage", testGetSlidesSlideImagesInvalidStorage),
        ("testGetSlidesSlideTextItems", testGetSlidesSlideTextItems),
        ("testGetSlidesSlideTextItemsInvalidName", testGetSlidesSlideTextItemsInvalidName),
        ("testGetSlidesSlideTextItemsInvalidSlideIndex", testGetSlidesSlideTextItemsInvalidSlideIndex),
        ("testGetSlidesSlideTextItemsInvalidWithEmpty", testGetSlidesSlideTextItemsInvalidWithEmpty),
        ("testGetSlidesSlideTextItemsInvalidPassword", testGetSlidesSlideTextItemsInvalidPassword),
        ("testGetSlidesSlideTextItemsInvalidFolder", testGetSlidesSlideTextItemsInvalidFolder),
        ("testGetSlidesSlideTextItemsInvalidStorage", testGetSlidesSlideTextItemsInvalidStorage),
        ("testGetSlidesSlidesList", testGetSlidesSlidesList),
        ("testGetSlidesSlidesListInvalidName", testGetSlidesSlidesListInvalidName),
        ("testGetSlidesSlidesListInvalidPassword", testGetSlidesSlidesListInvalidPassword),
        ("testGetSlidesSlidesListInvalidFolder", testGetSlidesSlidesListInvalidFolder),
        ("testGetSlidesSlidesListInvalidStorage", testGetSlidesSlidesListInvalidStorage),
        ("testGetSlidesTheme", testGetSlidesTheme),
        ("testGetSlidesThemeInvalidName", testGetSlidesThemeInvalidName),
        ("testGetSlidesThemeInvalidSlideIndex", testGetSlidesThemeInvalidSlideIndex),
        ("testGetSlidesThemeInvalidPassword", testGetSlidesThemeInvalidPassword),
        ("testGetSlidesThemeInvalidFolder", testGetSlidesThemeInvalidFolder),
        ("testGetSlidesThemeInvalidStorage", testGetSlidesThemeInvalidStorage),
        ("testGetSlidesThemeColorScheme", testGetSlidesThemeColorScheme),
        ("testGetSlidesThemeColorSchemeInvalidName", testGetSlidesThemeColorSchemeInvalidName),
        ("testGetSlidesThemeColorSchemeInvalidSlideIndex", testGetSlidesThemeColorSchemeInvalidSlideIndex),
        ("testGetSlidesThemeColorSchemeInvalidPassword", testGetSlidesThemeColorSchemeInvalidPassword),
        ("testGetSlidesThemeColorSchemeInvalidFolder", testGetSlidesThemeColorSchemeInvalidFolder),
        ("testGetSlidesThemeColorSchemeInvalidStorage", testGetSlidesThemeColorSchemeInvalidStorage),
        ("testGetSlidesThemeFontScheme", testGetSlidesThemeFontScheme),
        ("testGetSlidesThemeFontSchemeInvalidName", testGetSlidesThemeFontSchemeInvalidName),
        ("testGetSlidesThemeFontSchemeInvalidSlideIndex", testGetSlidesThemeFontSchemeInvalidSlideIndex),
        ("testGetSlidesThemeFontSchemeInvalidPassword", testGetSlidesThemeFontSchemeInvalidPassword),
        ("testGetSlidesThemeFontSchemeInvalidFolder", testGetSlidesThemeFontSchemeInvalidFolder),
        ("testGetSlidesThemeFontSchemeInvalidStorage", testGetSlidesThemeFontSchemeInvalidStorage),
        ("testGetSlidesThemeFormatScheme", testGetSlidesThemeFormatScheme),
        ("testGetSlidesThemeFormatSchemeInvalidName", testGetSlidesThemeFormatSchemeInvalidName),
        ("testGetSlidesThemeFormatSchemeInvalidSlideIndex", testGetSlidesThemeFormatSchemeInvalidSlideIndex),
        ("testGetSlidesThemeFormatSchemeInvalidPassword", testGetSlidesThemeFormatSchemeInvalidPassword),
        ("testGetSlidesThemeFormatSchemeInvalidFolder", testGetSlidesThemeFormatSchemeInvalidFolder),
        ("testGetSlidesThemeFormatSchemeInvalidStorage", testGetSlidesThemeFormatSchemeInvalidStorage),
        ("testGetSlidesViewProperties", testGetSlidesViewProperties),
        ("testGetSlidesViewPropertiesInvalidName", testGetSlidesViewPropertiesInvalidName),
        ("testGetSlidesViewPropertiesInvalidPassword", testGetSlidesViewPropertiesInvalidPassword),
        ("testGetSlidesViewPropertiesInvalidFolder", testGetSlidesViewPropertiesInvalidFolder),
        ("testGetSlidesViewPropertiesInvalidStorage", testGetSlidesViewPropertiesInvalidStorage),
        ("testGetSubshapeParagraphPortion", testGetSubshapeParagraphPortion),
        ("testGetSubshapeParagraphPortionInvalidName", testGetSubshapeParagraphPortionInvalidName),
        ("testGetSubshapeParagraphPortionInvalidSlideIndex", testGetSubshapeParagraphPortionInvalidSlideIndex),
        ("testGetSubshapeParagraphPortionInvalidPath", testGetSubshapeParagraphPortionInvalidPath),
        ("testGetSubshapeParagraphPortionInvalidShapeIndex", testGetSubshapeParagraphPortionInvalidShapeIndex),
        ("testGetSubshapeParagraphPortionInvalidParagraphIndex", testGetSubshapeParagraphPortionInvalidParagraphIndex),
        ("testGetSubshapeParagraphPortionInvalidPortionIndex", testGetSubshapeParagraphPortionInvalidPortionIndex),
        ("testGetSubshapeParagraphPortionInvalidPassword", testGetSubshapeParagraphPortionInvalidPassword),
        ("testGetSubshapeParagraphPortionInvalidFolder", testGetSubshapeParagraphPortionInvalidFolder),
        ("testGetSubshapeParagraphPortionInvalidStorage", testGetSubshapeParagraphPortionInvalidStorage),
        ("testGetSubshapeParagraphPortions", testGetSubshapeParagraphPortions),
        ("testGetSubshapeParagraphPortionsInvalidName", testGetSubshapeParagraphPortionsInvalidName),
        ("testGetSubshapeParagraphPortionsInvalidSlideIndex", testGetSubshapeParagraphPortionsInvalidSlideIndex),
        ("testGetSubshapeParagraphPortionsInvalidPath", testGetSubshapeParagraphPortionsInvalidPath),
        ("testGetSubshapeParagraphPortionsInvalidShapeIndex", testGetSubshapeParagraphPortionsInvalidShapeIndex),
        ("testGetSubshapeParagraphPortionsInvalidParagraphIndex", testGetSubshapeParagraphPortionsInvalidParagraphIndex),
        ("testGetSubshapeParagraphPortionsInvalidPassword", testGetSubshapeParagraphPortionsInvalidPassword),
        ("testGetSubshapeParagraphPortionsInvalidFolder", testGetSubshapeParagraphPortionsInvalidFolder),
        ("testGetSubshapeParagraphPortionsInvalidStorage", testGetSubshapeParagraphPortionsInvalidStorage),
        ("testMoveFile", testMoveFile),
        ("testMoveFileInvalidSrcPath", testMoveFileInvalidSrcPath),
        ("testMoveFileInvalidDestPath", testMoveFileInvalidDestPath),
        ("testMoveFileInvalidSrcStorageName", testMoveFileInvalidSrcStorageName),
        ("testMoveFileInvalidDestStorageName", testMoveFileInvalidDestStorageName),
        ("testMoveFileInvalidVersionId", testMoveFileInvalidVersionId),
        ("testMoveFolder", testMoveFolder),
        ("testMoveFolderInvalidSrcPath", testMoveFolderInvalidSrcPath),
        ("testMoveFolderInvalidDestPath", testMoveFolderInvalidDestPath),
        ("testMoveFolderInvalidSrcStorageName", testMoveFolderInvalidSrcStorageName),
        ("testMoveFolderInvalidDestStorageName", testMoveFolderInvalidDestStorageName),
        ("testObjectExists", testObjectExists),
        ("testObjectExistsInvalidPath", testObjectExistsInvalidPath),
        ("testObjectExistsInvalidStorageName", testObjectExistsInvalidStorageName),
        ("testObjectExistsInvalidVersionId", testObjectExistsInvalidVersionId),
        ("testPostAddNewParagraph", testPostAddNewParagraph),
        ("testPostAddNewParagraphInvalidName", testPostAddNewParagraphInvalidName),
        ("testPostAddNewParagraphInvalidSlideIndex", testPostAddNewParagraphInvalidSlideIndex),
        ("testPostAddNewParagraphInvalidShapeIndex", testPostAddNewParagraphInvalidShapeIndex),
        ("testPostAddNewParagraphInvalidDto", testPostAddNewParagraphInvalidDto),
        ("testPostAddNewParagraphInvalidPassword", testPostAddNewParagraphInvalidPassword),
        ("testPostAddNewParagraphInvalidFolder", testPostAddNewParagraphInvalidFolder),
        ("testPostAddNewParagraphInvalidStorage", testPostAddNewParagraphInvalidStorage),
        ("testPostAddNewParagraphInvalidPosition", testPostAddNewParagraphInvalidPosition),
        ("testPostAddNewPortion", testPostAddNewPortion),
        ("testPostAddNewPortionInvalidName", testPostAddNewPortionInvalidName),
        ("testPostAddNewPortionInvalidSlideIndex", testPostAddNewPortionInvalidSlideIndex),
        ("testPostAddNewPortionInvalidShapeIndex", testPostAddNewPortionInvalidShapeIndex),
        ("testPostAddNewPortionInvalidParagraphIndex", testPostAddNewPortionInvalidParagraphIndex),
        ("testPostAddNewPortionInvalidDto", testPostAddNewPortionInvalidDto),
        ("testPostAddNewPortionInvalidPassword", testPostAddNewPortionInvalidPassword),
        ("testPostAddNewPortionInvalidFolder", testPostAddNewPortionInvalidFolder),
        ("testPostAddNewPortionInvalidStorage", testPostAddNewPortionInvalidStorage),
        ("testPostAddNewPortionInvalidPosition", testPostAddNewPortionInvalidPosition),
        ("testPostAddNewShape", testPostAddNewShape),
        ("testPostAddNewShapeInvalidName", testPostAddNewShapeInvalidName),
        ("testPostAddNewShapeInvalidSlideIndex", testPostAddNewShapeInvalidSlideIndex),
        ("testPostAddNewShapeInvalidDto", testPostAddNewShapeInvalidDto),
        ("testPostAddNewShapeInvalidPassword", testPostAddNewShapeInvalidPassword),
        ("testPostAddNewShapeInvalidFolder", testPostAddNewShapeInvalidFolder),
        ("testPostAddNewShapeInvalidStorage", testPostAddNewShapeInvalidStorage),
        ("testPostAddNewShapeInvalidShapeToClone", testPostAddNewShapeInvalidShapeToClone),
        ("testPostAddNewShapeInvalidPosition", testPostAddNewShapeInvalidPosition),
        ("testPostAddNewSubshape", testPostAddNewSubshape),
        ("testPostAddNewSubshapeInvalidName", testPostAddNewSubshapeInvalidName),
        ("testPostAddNewSubshapeInvalidSlideIndex", testPostAddNewSubshapeInvalidSlideIndex),
        ("testPostAddNewSubshapeInvalidPath", testPostAddNewSubshapeInvalidPath),
        ("testPostAddNewSubshapeInvalidDto", testPostAddNewSubshapeInvalidDto),
        ("testPostAddNewSubshapeInvalidPassword", testPostAddNewSubshapeInvalidPassword),
        ("testPostAddNewSubshapeInvalidFolder", testPostAddNewSubshapeInvalidFolder),
        ("testPostAddNewSubshapeInvalidStorage", testPostAddNewSubshapeInvalidStorage),
        ("testPostAddNewSubshapeInvalidShapeToClone", testPostAddNewSubshapeInvalidShapeToClone),
        ("testPostAddNewSubshapeInvalidPosition", testPostAddNewSubshapeInvalidPosition),
        ("testPostAddNewSubshapeParagraph", testPostAddNewSubshapeParagraph),
        ("testPostAddNewSubshapeParagraphInvalidName", testPostAddNewSubshapeParagraphInvalidName),
        ("testPostAddNewSubshapeParagraphInvalidSlideIndex", testPostAddNewSubshapeParagraphInvalidSlideIndex),
        ("testPostAddNewSubshapeParagraphInvalidPath", testPostAddNewSubshapeParagraphInvalidPath),
        ("testPostAddNewSubshapeParagraphInvalidShapeIndex", testPostAddNewSubshapeParagraphInvalidShapeIndex),
        ("testPostAddNewSubshapeParagraphInvalidDto", testPostAddNewSubshapeParagraphInvalidDto),
        ("testPostAddNewSubshapeParagraphInvalidPassword", testPostAddNewSubshapeParagraphInvalidPassword),
        ("testPostAddNewSubshapeParagraphInvalidFolder", testPostAddNewSubshapeParagraphInvalidFolder),
        ("testPostAddNewSubshapeParagraphInvalidStorage", testPostAddNewSubshapeParagraphInvalidStorage),
        ("testPostAddNewSubshapeParagraphInvalidPosition", testPostAddNewSubshapeParagraphInvalidPosition),
        ("testPostAddNewSubshapePortion", testPostAddNewSubshapePortion),
        ("testPostAddNewSubshapePortionInvalidName", testPostAddNewSubshapePortionInvalidName),
        ("testPostAddNewSubshapePortionInvalidSlideIndex", testPostAddNewSubshapePortionInvalidSlideIndex),
        ("testPostAddNewSubshapePortionInvalidPath", testPostAddNewSubshapePortionInvalidPath),
        ("testPostAddNewSubshapePortionInvalidShapeIndex", testPostAddNewSubshapePortionInvalidShapeIndex),
        ("testPostAddNewSubshapePortionInvalidParagraphIndex", testPostAddNewSubshapePortionInvalidParagraphIndex),
        ("testPostAddNewSubshapePortionInvalidDto", testPostAddNewSubshapePortionInvalidDto),
        ("testPostAddNewSubshapePortionInvalidPassword", testPostAddNewSubshapePortionInvalidPassword),
        ("testPostAddNewSubshapePortionInvalidFolder", testPostAddNewSubshapePortionInvalidFolder),
        ("testPostAddNewSubshapePortionInvalidStorage", testPostAddNewSubshapePortionInvalidStorage),
        ("testPostAddNewSubshapePortionInvalidPosition", testPostAddNewSubshapePortionInvalidPosition),
        ("testPostAddNotesSlide", testPostAddNotesSlide),
        ("testPostAddNotesSlideInvalidName", testPostAddNotesSlideInvalidName),
        ("testPostAddNotesSlideInvalidSlideIndex", testPostAddNotesSlideInvalidSlideIndex),
        ("testPostAddNotesSlideInvalidDto", testPostAddNotesSlideInvalidDto),
        ("testPostAddNotesSlideInvalidPassword", testPostAddNotesSlideInvalidPassword),
        ("testPostAddNotesSlideInvalidFolder", testPostAddNotesSlideInvalidFolder),
        ("testPostAddNotesSlideInvalidStorage", testPostAddNotesSlideInvalidStorage),
        ("testPostChartSeries", testPostChartSeries),
        ("testPostChartSeriesInvalidName", testPostChartSeriesInvalidName),
        ("testPostChartSeriesInvalidSlideIndex", testPostChartSeriesInvalidSlideIndex),
        ("testPostChartSeriesInvalidShapeIndex", testPostChartSeriesInvalidShapeIndex),
        ("testPostChartSeriesInvalidSeries", testPostChartSeriesInvalidSeries),
        ("testPostChartSeriesInvalidPassword", testPostChartSeriesInvalidPassword),
        ("testPostChartSeriesInvalidFolder", testPostChartSeriesInvalidFolder),
        ("testPostChartSeriesInvalidStorage", testPostChartSeriesInvalidStorage),
        ("testPostCopyLayoutSlideFromSourcePresentation", testPostCopyLayoutSlideFromSourcePresentation),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidName", testPostCopyLayoutSlideFromSourcePresentationInvalidName),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFrom", testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFrom),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition", testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword", testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage", testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidPassword", testPostCopyLayoutSlideFromSourcePresentationInvalidPassword),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidFolder", testPostCopyLayoutSlideFromSourcePresentationInvalidFolder),
        ("testPostCopyLayoutSlideFromSourcePresentationInvalidStorage", testPostCopyLayoutSlideFromSourcePresentationInvalidStorage),
        ("testPostCopyMasterSlideFromSourcePresentation", testPostCopyMasterSlideFromSourcePresentation),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidName", testPostCopyMasterSlideFromSourcePresentationInvalidName),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidCloneFrom", testPostCopyMasterSlideFromSourcePresentationInvalidCloneFrom),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition", testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword", testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage", testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidApplyToAll", testPostCopyMasterSlideFromSourcePresentationInvalidApplyToAll),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidPassword", testPostCopyMasterSlideFromSourcePresentationInvalidPassword),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidFolder", testPostCopyMasterSlideFromSourcePresentationInvalidFolder),
        ("testPostCopyMasterSlideFromSourcePresentationInvalidStorage", testPostCopyMasterSlideFromSourcePresentationInvalidStorage),
        ("testPostGetNotesSlide", testPostGetNotesSlide),
        ("testPostGetNotesSlideInvalidSlideIndex", testPostGetNotesSlideInvalidSlideIndex),
        ("testPostGetNotesSlideInvalidDocument", testPostGetNotesSlideInvalidDocument),
        ("testPostGetNotesSlideInvalidPassword", testPostGetNotesSlideInvalidPassword),
        ("testPostGetNotesSlideExists", testPostGetNotesSlideExists),
        ("testPostGetNotesSlideExistsInvalidSlideIndex", testPostGetNotesSlideExistsInvalidSlideIndex),
        ("testPostGetNotesSlideExistsInvalidDocument", testPostGetNotesSlideExistsInvalidDocument),
        ("testPostGetNotesSlideExistsInvalidPassword", testPostGetNotesSlideExistsInvalidPassword),
        ("testPostGetNotesSlideWithFormat", testPostGetNotesSlideWithFormat),
        ("testPostGetNotesSlideWithFormatInvalidSlideIndex", testPostGetNotesSlideWithFormatInvalidSlideIndex),
        ("testPostGetNotesSlideWithFormatInvalidFormat", testPostGetNotesSlideWithFormatInvalidFormat),
        ("testPostGetNotesSlideWithFormatInvalidDocument", testPostGetNotesSlideWithFormatInvalidDocument),
        ("testPostGetNotesSlideWithFormatInvalidWidth", testPostGetNotesSlideWithFormatInvalidWidth),
        ("testPostGetNotesSlideWithFormatInvalidHeight", testPostGetNotesSlideWithFormatInvalidHeight),
        ("testPostGetNotesSlideWithFormatInvalidPassword", testPostGetNotesSlideWithFormatInvalidPassword),
        ("testPostGetNotesSlideWithFormatInvalidFontsFolder", testPostGetNotesSlideWithFormatInvalidFontsFolder),
        ("testPostNotesSlideAddNewParagraph", testPostNotesSlideAddNewParagraph),
        ("testPostNotesSlideAddNewParagraphInvalidName", testPostNotesSlideAddNewParagraphInvalidName),
        ("testPostNotesSlideAddNewParagraphInvalidSlideIndex", testPostNotesSlideAddNewParagraphInvalidSlideIndex),
        ("testPostNotesSlideAddNewParagraphInvalidShapeIndex", testPostNotesSlideAddNewParagraphInvalidShapeIndex),
        ("testPostNotesSlideAddNewParagraphInvalidDto", testPostNotesSlideAddNewParagraphInvalidDto),
        ("testPostNotesSlideAddNewParagraphInvalidPassword", testPostNotesSlideAddNewParagraphInvalidPassword),
        ("testPostNotesSlideAddNewParagraphInvalidFolder", testPostNotesSlideAddNewParagraphInvalidFolder),
        ("testPostNotesSlideAddNewParagraphInvalidStorage", testPostNotesSlideAddNewParagraphInvalidStorage),
        ("testPostNotesSlideAddNewParagraphInvalidPosition", testPostNotesSlideAddNewParagraphInvalidPosition),
        ("testPostNotesSlideAddNewPortion", testPostNotesSlideAddNewPortion),
        ("testPostNotesSlideAddNewPortionInvalidName", testPostNotesSlideAddNewPortionInvalidName),
        ("testPostNotesSlideAddNewPortionInvalidSlideIndex", testPostNotesSlideAddNewPortionInvalidSlideIndex),
        ("testPostNotesSlideAddNewPortionInvalidShapeIndex", testPostNotesSlideAddNewPortionInvalidShapeIndex),
        ("testPostNotesSlideAddNewPortionInvalidParagraphIndex", testPostNotesSlideAddNewPortionInvalidParagraphIndex),
        ("testPostNotesSlideAddNewPortionInvalidDto", testPostNotesSlideAddNewPortionInvalidDto),
        ("testPostNotesSlideAddNewPortionInvalidPassword", testPostNotesSlideAddNewPortionInvalidPassword),
        ("testPostNotesSlideAddNewPortionInvalidFolder", testPostNotesSlideAddNewPortionInvalidFolder),
        ("testPostNotesSlideAddNewPortionInvalidStorage", testPostNotesSlideAddNewPortionInvalidStorage),
        ("testPostNotesSlideAddNewPortionInvalidPosition", testPostNotesSlideAddNewPortionInvalidPosition),
        ("testPostNotesSlideAddNewShape", testPostNotesSlideAddNewShape),
        ("testPostNotesSlideAddNewShapeInvalidName", testPostNotesSlideAddNewShapeInvalidName),
        ("testPostNotesSlideAddNewShapeInvalidSlideIndex", testPostNotesSlideAddNewShapeInvalidSlideIndex),
        ("testPostNotesSlideAddNewShapeInvalidDto", testPostNotesSlideAddNewShapeInvalidDto),
        ("testPostNotesSlideAddNewShapeInvalidPassword", testPostNotesSlideAddNewShapeInvalidPassword),
        ("testPostNotesSlideAddNewShapeInvalidFolder", testPostNotesSlideAddNewShapeInvalidFolder),
        ("testPostNotesSlideAddNewShapeInvalidStorage", testPostNotesSlideAddNewShapeInvalidStorage),
        ("testPostNotesSlideAddNewShapeInvalidShapeToClone", testPostNotesSlideAddNewShapeInvalidShapeToClone),
        ("testPostNotesSlideAddNewShapeInvalidPosition", testPostNotesSlideAddNewShapeInvalidPosition),
        ("testPostNotesSlideShapeSaveAs", testPostNotesSlideShapeSaveAs),
        ("testPostNotesSlideShapeSaveAsInvalidName", testPostNotesSlideShapeSaveAsInvalidName),
        ("testPostNotesSlideShapeSaveAsInvalidSlideIndex", testPostNotesSlideShapeSaveAsInvalidSlideIndex),
        ("testPostNotesSlideShapeSaveAsInvalidShapeIndex", testPostNotesSlideShapeSaveAsInvalidShapeIndex),
        ("testPostNotesSlideShapeSaveAsInvalidFormat", testPostNotesSlideShapeSaveAsInvalidFormat),
        ("testPostNotesSlideShapeSaveAsInvalidOptions", testPostNotesSlideShapeSaveAsInvalidOptions),
        ("testPostNotesSlideShapeSaveAsInvalidPassword", testPostNotesSlideShapeSaveAsInvalidPassword),
        ("testPostNotesSlideShapeSaveAsInvalidFolder", testPostNotesSlideShapeSaveAsInvalidFolder),
        ("testPostNotesSlideShapeSaveAsInvalidStorage", testPostNotesSlideShapeSaveAsInvalidStorage),
        ("testPostNotesSlideShapeSaveAsInvalidScaleX", testPostNotesSlideShapeSaveAsInvalidScaleX),
        ("testPostNotesSlideShapeSaveAsInvalidScaleY", testPostNotesSlideShapeSaveAsInvalidScaleY),
        ("testPostNotesSlideShapeSaveAsInvalidBounds", testPostNotesSlideShapeSaveAsInvalidBounds),
        ("testPostNotesSlideShapeSaveAsInvalidFontsFolder", testPostNotesSlideShapeSaveAsInvalidFontsFolder),
        ("testPostPresentationMerge", testPostPresentationMerge),
        ("testPostPresentationMergeInvalidName", testPostPresentationMergeInvalidName),
        ("testPostPresentationMergeInvalidRequest", testPostPresentationMergeInvalidRequest),
        ("testPostPresentationMergeInvalidPassword", testPostPresentationMergeInvalidPassword),
        ("testPostPresentationMergeInvalidStorage", testPostPresentationMergeInvalidStorage),
        ("testPostPresentationMergeInvalidFolder", testPostPresentationMergeInvalidFolder),
        ("testPostShapeSaveAs", testPostShapeSaveAs),
        ("testPostShapeSaveAsInvalidName", testPostShapeSaveAsInvalidName),
        ("testPostShapeSaveAsInvalidSlideIndex", testPostShapeSaveAsInvalidSlideIndex),
        ("testPostShapeSaveAsInvalidShapeIndex", testPostShapeSaveAsInvalidShapeIndex),
        ("testPostShapeSaveAsInvalidFormat", testPostShapeSaveAsInvalidFormat),
        ("testPostShapeSaveAsInvalidOptions", testPostShapeSaveAsInvalidOptions),
        ("testPostShapeSaveAsInvalidPassword", testPostShapeSaveAsInvalidPassword),
        ("testPostShapeSaveAsInvalidFolder", testPostShapeSaveAsInvalidFolder),
        ("testPostShapeSaveAsInvalidStorage", testPostShapeSaveAsInvalidStorage),
        ("testPostShapeSaveAsInvalidScaleX", testPostShapeSaveAsInvalidScaleX),
        ("testPostShapeSaveAsInvalidScaleY", testPostShapeSaveAsInvalidScaleY),
        ("testPostShapeSaveAsInvalidBounds", testPostShapeSaveAsInvalidBounds),
        ("testPostShapeSaveAsInvalidFontsFolder", testPostShapeSaveAsInvalidFontsFolder),
        ("testPostSlideAnimationEffect", testPostSlideAnimationEffect),
        ("testPostSlideAnimationEffectInvalidName", testPostSlideAnimationEffectInvalidName),
        ("testPostSlideAnimationEffectInvalidSlideIndex", testPostSlideAnimationEffectInvalidSlideIndex),
        ("testPostSlideAnimationEffectInvalidEffect", testPostSlideAnimationEffectInvalidEffect),
        ("testPostSlideAnimationEffectInvalidPassword", testPostSlideAnimationEffectInvalidPassword),
        ("testPostSlideAnimationEffectInvalidFolder", testPostSlideAnimationEffectInvalidFolder),
        ("testPostSlideAnimationEffectInvalidStorage", testPostSlideAnimationEffectInvalidStorage),
        ("testPostSlideAnimationInteractiveSequence", testPostSlideAnimationInteractiveSequence),
        ("testPostSlideAnimationInteractiveSequenceInvalidName", testPostSlideAnimationInteractiveSequenceInvalidName),
        ("testPostSlideAnimationInteractiveSequenceInvalidSlideIndex", testPostSlideAnimationInteractiveSequenceInvalidSlideIndex),
        ("testPostSlideAnimationInteractiveSequenceInvalidSequence", testPostSlideAnimationInteractiveSequenceInvalidSequence),
        ("testPostSlideAnimationInteractiveSequenceInvalidPassword", testPostSlideAnimationInteractiveSequenceInvalidPassword),
        ("testPostSlideAnimationInteractiveSequenceInvalidFolder", testPostSlideAnimationInteractiveSequenceInvalidFolder),
        ("testPostSlideAnimationInteractiveSequenceInvalidStorage", testPostSlideAnimationInteractiveSequenceInvalidStorage),
        ("testPostSlideAnimationInteractiveSequenceEffect", testPostSlideAnimationInteractiveSequenceEffect),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidName", testPostSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testPostSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testPostSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidEffect", testPostSlideAnimationInteractiveSequenceEffectInvalidEffect),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidPassword", testPostSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidFolder", testPostSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testPostSlideAnimationInteractiveSequenceEffectInvalidStorage", testPostSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testPostSlideSaveAs", testPostSlideSaveAs),
        ("testPostSlideSaveAsInvalidName", testPostSlideSaveAsInvalidName),
        ("testPostSlideSaveAsInvalidSlideIndex", testPostSlideSaveAsInvalidSlideIndex),
        ("testPostSlideSaveAsInvalidFormat", testPostSlideSaveAsInvalidFormat),
        ("testPostSlideSaveAsInvalidOptions", testPostSlideSaveAsInvalidOptions),
        ("testPostSlideSaveAsInvalidWidth", testPostSlideSaveAsInvalidWidth),
        ("testPostSlideSaveAsInvalidHeight", testPostSlideSaveAsInvalidHeight),
        ("testPostSlideSaveAsInvalidPassword", testPostSlideSaveAsInvalidPassword),
        ("testPostSlideSaveAsInvalidFolder", testPostSlideSaveAsInvalidFolder),
        ("testPostSlideSaveAsInvalidStorage", testPostSlideSaveAsInvalidStorage),
        ("testPostSlideSaveAsInvalidFontsFolder", testPostSlideSaveAsInvalidFontsFolder),
        ("testPostSlidesAdd", testPostSlidesAdd),
        ("testPostSlidesAddInvalidName", testPostSlidesAddInvalidName),
        ("testPostSlidesAddInvalidPosition", testPostSlidesAddInvalidPosition),
        ("testPostSlidesAddInvalidPassword", testPostSlidesAddInvalidPassword),
        ("testPostSlidesAddInvalidFolder", testPostSlidesAddInvalidFolder),
        ("testPostSlidesAddInvalidStorage", testPostSlidesAddInvalidStorage),
        ("testPostSlidesAddInvalidLayoutAlias", testPostSlidesAddInvalidLayoutAlias),
        ("testPostSlidesConvert", testPostSlidesConvert),
        ("testPostSlidesConvertInvalidFormat", testPostSlidesConvertInvalidFormat),
        ("testPostSlidesConvertInvalidDocument", testPostSlidesConvertInvalidDocument),
        ("testPostSlidesConvertInvalidPassword", testPostSlidesConvertInvalidPassword),
        ("testPostSlidesConvertInvalidFontsFolder", testPostSlidesConvertInvalidFontsFolder),
        ("testPostSlidesCopy", testPostSlidesCopy),
        ("testPostSlidesCopyInvalidName", testPostSlidesCopyInvalidName),
        ("testPostSlidesCopyInvalidSlideToCopy", testPostSlidesCopyInvalidSlideToCopy),
        ("testPostSlidesCopyInvalidPosition", testPostSlidesCopyInvalidPosition),
        ("testPostSlidesCopyInvalidSource", testPostSlidesCopyInvalidSource),
        ("testPostSlidesCopyInvalidSourcePassword", testPostSlidesCopyInvalidSourcePassword),
        ("testPostSlidesCopyInvalidSourceStorage", testPostSlidesCopyInvalidSourceStorage),
        ("testPostSlidesCopyInvalidPassword", testPostSlidesCopyInvalidPassword),
        ("testPostSlidesCopyInvalidFolder", testPostSlidesCopyInvalidFolder),
        ("testPostSlidesCopyInvalidStorage", testPostSlidesCopyInvalidStorage),
        ("testPostSlidesDocument", testPostSlidesDocument),
        ("testPostSlidesDocumentInvalidName", testPostSlidesDocumentInvalidName),
        ("testPostSlidesDocumentInvalidData", testPostSlidesDocumentInvalidData),
        ("testPostSlidesDocumentInvalidInputPassword", testPostSlidesDocumentInvalidInputPassword),
        ("testPostSlidesDocumentInvalidPassword", testPostSlidesDocumentInvalidPassword),
        ("testPostSlidesDocumentInvalidStorage", testPostSlidesDocumentInvalidStorage),
        ("testPostSlidesDocumentInvalidFolder", testPostSlidesDocumentInvalidFolder),
        ("testPostSlidesDocumentFromHtml", testPostSlidesDocumentFromHtml),
        ("testPostSlidesDocumentFromHtmlInvalidName", testPostSlidesDocumentFromHtmlInvalidName),
        ("testPostSlidesDocumentFromHtmlInvalidHtml", testPostSlidesDocumentFromHtmlInvalidHtml),
        ("testPostSlidesDocumentFromHtmlInvalidPassword", testPostSlidesDocumentFromHtmlInvalidPassword),
        ("testPostSlidesDocumentFromHtmlInvalidStorage", testPostSlidesDocumentFromHtmlInvalidStorage),
        ("testPostSlidesDocumentFromHtmlInvalidFolder", testPostSlidesDocumentFromHtmlInvalidFolder),
        ("testPostSlidesDocumentFromSource", testPostSlidesDocumentFromSource),
        ("testPostSlidesDocumentFromSourceInvalidName", testPostSlidesDocumentFromSourceInvalidName),
        ("testPostSlidesDocumentFromSourceInvalidSourcePath", testPostSlidesDocumentFromSourceInvalidSourcePath),
        ("testPostSlidesDocumentFromSourceInvalidSourcePassword", testPostSlidesDocumentFromSourceInvalidSourcePassword),
        ("testPostSlidesDocumentFromSourceInvalidSourceStorage", testPostSlidesDocumentFromSourceInvalidSourceStorage),
        ("testPostSlidesDocumentFromSourceInvalidPassword", testPostSlidesDocumentFromSourceInvalidPassword),
        ("testPostSlidesDocumentFromSourceInvalidStorage", testPostSlidesDocumentFromSourceInvalidStorage),
        ("testPostSlidesDocumentFromSourceInvalidFolder", testPostSlidesDocumentFromSourceInvalidFolder),
        ("testPostSlidesDocumentFromTemplate", testPostSlidesDocumentFromTemplate),
        ("testPostSlidesDocumentFromTemplateInvalidName", testPostSlidesDocumentFromTemplateInvalidName),
        ("testPostSlidesDocumentFromTemplateInvalidTemplatePath", testPostSlidesDocumentFromTemplateInvalidTemplatePath),
        ("testPostSlidesDocumentFromTemplateInvalidData", testPostSlidesDocumentFromTemplateInvalidData),
        ("testPostSlidesDocumentFromTemplateInvalidTemplatePassword", testPostSlidesDocumentFromTemplateInvalidTemplatePassword),
        ("testPostSlidesDocumentFromTemplateInvalidTemplateStorage", testPostSlidesDocumentFromTemplateInvalidTemplateStorage),
        ("testPostSlidesDocumentFromTemplateInvalidIsImageDataEmbedded", testPostSlidesDocumentFromTemplateInvalidIsImageDataEmbedded),
        ("testPostSlidesDocumentFromTemplateInvalidPassword", testPostSlidesDocumentFromTemplateInvalidPassword),
        ("testPostSlidesDocumentFromTemplateInvalidStorage", testPostSlidesDocumentFromTemplateInvalidStorage),
        ("testPostSlidesDocumentFromTemplateInvalidFolder", testPostSlidesDocumentFromTemplateInvalidFolder),
        ("testPostSlidesPipeline", testPostSlidesPipeline),
        ("testPostSlidesPipelineInvalidPipeline", testPostSlidesPipelineInvalidPipeline),
        ("testPostSlidesPresentationReplaceText", testPostSlidesPresentationReplaceText),
        ("testPostSlidesPresentationReplaceTextInvalidName", testPostSlidesPresentationReplaceTextInvalidName),
        ("testPostSlidesPresentationReplaceTextInvalidOldValue", testPostSlidesPresentationReplaceTextInvalidOldValue),
        ("testPostSlidesPresentationReplaceTextInvalidNewValue", testPostSlidesPresentationReplaceTextInvalidNewValue),
        ("testPostSlidesPresentationReplaceTextInvalidIgnoreCase", testPostSlidesPresentationReplaceTextInvalidIgnoreCase),
        ("testPostSlidesPresentationReplaceTextInvalidPassword", testPostSlidesPresentationReplaceTextInvalidPassword),
        ("testPostSlidesPresentationReplaceTextInvalidFolder", testPostSlidesPresentationReplaceTextInvalidFolder),
        ("testPostSlidesPresentationReplaceTextInvalidStorage", testPostSlidesPresentationReplaceTextInvalidStorage),
        ("testPostSlidesReorder", testPostSlidesReorder),
        ("testPostSlidesReorderInvalidName", testPostSlidesReorderInvalidName),
        ("testPostSlidesReorderInvalidSlideIndex", testPostSlidesReorderInvalidSlideIndex),
        ("testPostSlidesReorderInvalidNewPosition", testPostSlidesReorderInvalidNewPosition),
        ("testPostSlidesReorderInvalidPassword", testPostSlidesReorderInvalidPassword),
        ("testPostSlidesReorderInvalidFolder", testPostSlidesReorderInvalidFolder),
        ("testPostSlidesReorderInvalidStorage", testPostSlidesReorderInvalidStorage),
        ("testPostSlidesReorderMany", testPostSlidesReorderMany),
        ("testPostSlidesReorderManyInvalidName", testPostSlidesReorderManyInvalidName),
        ("testPostSlidesReorderManyInvalidOldPositions", testPostSlidesReorderManyInvalidOldPositions),
        ("testPostSlidesReorderManyInvalidNewPositions", testPostSlidesReorderManyInvalidNewPositions),
        ("testPostSlidesReorderManyInvalidPassword", testPostSlidesReorderManyInvalidPassword),
        ("testPostSlidesReorderManyInvalidFolder", testPostSlidesReorderManyInvalidFolder),
        ("testPostSlidesReorderManyInvalidStorage", testPostSlidesReorderManyInvalidStorage),
        ("testPostSlidesSaveAs", testPostSlidesSaveAs),
        ("testPostSlidesSaveAsInvalidName", testPostSlidesSaveAsInvalidName),
        ("testPostSlidesSaveAsInvalidFormat", testPostSlidesSaveAsInvalidFormat),
        ("testPostSlidesSaveAsInvalidOptions", testPostSlidesSaveAsInvalidOptions),
        ("testPostSlidesSaveAsInvalidPassword", testPostSlidesSaveAsInvalidPassword),
        ("testPostSlidesSaveAsInvalidStorage", testPostSlidesSaveAsInvalidStorage),
        ("testPostSlidesSaveAsInvalidFolder", testPostSlidesSaveAsInvalidFolder),
        ("testPostSlidesSaveAsInvalidFontsFolder", testPostSlidesSaveAsInvalidFontsFolder),
        ("testPostSlidesSetDocumentProperties", testPostSlidesSetDocumentProperties),
        ("testPostSlidesSetDocumentPropertiesInvalidName", testPostSlidesSetDocumentPropertiesInvalidName),
        ("testPostSlidesSetDocumentPropertiesInvalidProperties", testPostSlidesSetDocumentPropertiesInvalidProperties),
        ("testPostSlidesSetDocumentPropertiesInvalidPassword", testPostSlidesSetDocumentPropertiesInvalidPassword),
        ("testPostSlidesSetDocumentPropertiesInvalidFolder", testPostSlidesSetDocumentPropertiesInvalidFolder),
        ("testPostSlidesSetDocumentPropertiesInvalidStorage", testPostSlidesSetDocumentPropertiesInvalidStorage),
        ("testPostSlidesSlideReplaceText", testPostSlidesSlideReplaceText),
        ("testPostSlidesSlideReplaceTextInvalidName", testPostSlidesSlideReplaceTextInvalidName),
        ("testPostSlidesSlideReplaceTextInvalidSlideIndex", testPostSlidesSlideReplaceTextInvalidSlideIndex),
        ("testPostSlidesSlideReplaceTextInvalidOldValue", testPostSlidesSlideReplaceTextInvalidOldValue),
        ("testPostSlidesSlideReplaceTextInvalidNewValue", testPostSlidesSlideReplaceTextInvalidNewValue),
        ("testPostSlidesSlideReplaceTextInvalidIgnoreCase", testPostSlidesSlideReplaceTextInvalidIgnoreCase),
        ("testPostSlidesSlideReplaceTextInvalidPassword", testPostSlidesSlideReplaceTextInvalidPassword),
        ("testPostSlidesSlideReplaceTextInvalidFolder", testPostSlidesSlideReplaceTextInvalidFolder),
        ("testPostSlidesSlideReplaceTextInvalidStorage", testPostSlidesSlideReplaceTextInvalidStorage),
        ("testPostSlidesSplit", testPostSlidesSplit),
        ("testPostSlidesSplitInvalidName", testPostSlidesSplitInvalidName),
        ("testPostSlidesSplitInvalidOptions", testPostSlidesSplitInvalidOptions),
        ("testPostSlidesSplitInvalidFormat", testPostSlidesSplitInvalidFormat),
        ("testPostSlidesSplitInvalidWidth", testPostSlidesSplitInvalidWidth),
        ("testPostSlidesSplitInvalidHeight", testPostSlidesSplitInvalidHeight),
        ("testPostSlidesSplitInvalidTo", testPostSlidesSplitInvalidTo),
        ("testPostSlidesSplitInvalidFrom", testPostSlidesSplitInvalidFrom),
        ("testPostSlidesSplitInvalidDestFolder", testPostSlidesSplitInvalidDestFolder),
        ("testPostSlidesSplitInvalidPassword", testPostSlidesSplitInvalidPassword),
        ("testPostSlidesSplitInvalidStorage", testPostSlidesSplitInvalidStorage),
        ("testPostSlidesSplitInvalidFolder", testPostSlidesSplitInvalidFolder),
        ("testPostSlidesSplitInvalidFontsFolder", testPostSlidesSplitInvalidFontsFolder),
        ("testPostSubshapeSaveAs", testPostSubshapeSaveAs),
        ("testPostSubshapeSaveAsInvalidName", testPostSubshapeSaveAsInvalidName),
        ("testPostSubshapeSaveAsInvalidSlideIndex", testPostSubshapeSaveAsInvalidSlideIndex),
        ("testPostSubshapeSaveAsInvalidPath", testPostSubshapeSaveAsInvalidPath),
        ("testPostSubshapeSaveAsInvalidShapeIndex", testPostSubshapeSaveAsInvalidShapeIndex),
        ("testPostSubshapeSaveAsInvalidFormat", testPostSubshapeSaveAsInvalidFormat),
        ("testPostSubshapeSaveAsInvalidOptions", testPostSubshapeSaveAsInvalidOptions),
        ("testPostSubshapeSaveAsInvalidPassword", testPostSubshapeSaveAsInvalidPassword),
        ("testPostSubshapeSaveAsInvalidFolder", testPostSubshapeSaveAsInvalidFolder),
        ("testPostSubshapeSaveAsInvalidStorage", testPostSubshapeSaveAsInvalidStorage),
        ("testPostSubshapeSaveAsInvalidScaleX", testPostSubshapeSaveAsInvalidScaleX),
        ("testPostSubshapeSaveAsInvalidScaleY", testPostSubshapeSaveAsInvalidScaleY),
        ("testPostSubshapeSaveAsInvalidBounds", testPostSubshapeSaveAsInvalidBounds),
        ("testPostSubshapeSaveAsInvalidFontsFolder", testPostSubshapeSaveAsInvalidFontsFolder),
        ("testPutChartSeries", testPutChartSeries),
        ("testPutChartSeriesInvalidName", testPutChartSeriesInvalidName),
        ("testPutChartSeriesInvalidSlideIndex", testPutChartSeriesInvalidSlideIndex),
        ("testPutChartSeriesInvalidShapeIndex", testPutChartSeriesInvalidShapeIndex),
        ("testPutChartSeriesInvalidSeriesIndex", testPutChartSeriesInvalidSeriesIndex),
        ("testPutChartSeriesInvalidSeries", testPutChartSeriesInvalidSeries),
        ("testPutChartSeriesInvalidPassword", testPutChartSeriesInvalidPassword),
        ("testPutChartSeriesInvalidFolder", testPutChartSeriesInvalidFolder),
        ("testPutChartSeriesInvalidStorage", testPutChartSeriesInvalidStorage),
        ("testPutLayoutSlide", testPutLayoutSlide),
        ("testPutLayoutSlideInvalidName", testPutLayoutSlideInvalidName),
        ("testPutLayoutSlideInvalidSlideIndex", testPutLayoutSlideInvalidSlideIndex),
        ("testPutLayoutSlideInvalidSlideDto", testPutLayoutSlideInvalidSlideDto),
        ("testPutLayoutSlideInvalidPassword", testPutLayoutSlideInvalidPassword),
        ("testPutLayoutSlideInvalidFolder", testPutLayoutSlideInvalidFolder),
        ("testPutLayoutSlideInvalidStorage", testPutLayoutSlideInvalidStorage),
        ("testPutNotesSlideShapeSaveAs", testPutNotesSlideShapeSaveAs),
        ("testPutNotesSlideShapeSaveAsInvalidName", testPutNotesSlideShapeSaveAsInvalidName),
        ("testPutNotesSlideShapeSaveAsInvalidSlideIndex", testPutNotesSlideShapeSaveAsInvalidSlideIndex),
        ("testPutNotesSlideShapeSaveAsInvalidShapeIndex", testPutNotesSlideShapeSaveAsInvalidShapeIndex),
        ("testPutNotesSlideShapeSaveAsInvalidFormat", testPutNotesSlideShapeSaveAsInvalidFormat),
        ("testPutNotesSlideShapeSaveAsInvalidOutPath", testPutNotesSlideShapeSaveAsInvalidOutPath),
        ("testPutNotesSlideShapeSaveAsInvalidOptions", testPutNotesSlideShapeSaveAsInvalidOptions),
        ("testPutNotesSlideShapeSaveAsInvalidPassword", testPutNotesSlideShapeSaveAsInvalidPassword),
        ("testPutNotesSlideShapeSaveAsInvalidFolder", testPutNotesSlideShapeSaveAsInvalidFolder),
        ("testPutNotesSlideShapeSaveAsInvalidStorage", testPutNotesSlideShapeSaveAsInvalidStorage),
        ("testPutNotesSlideShapeSaveAsInvalidScaleX", testPutNotesSlideShapeSaveAsInvalidScaleX),
        ("testPutNotesSlideShapeSaveAsInvalidScaleY", testPutNotesSlideShapeSaveAsInvalidScaleY),
        ("testPutNotesSlideShapeSaveAsInvalidBounds", testPutNotesSlideShapeSaveAsInvalidBounds),
        ("testPutNotesSlideShapeSaveAsInvalidFontsFolder", testPutNotesSlideShapeSaveAsInvalidFontsFolder),
        ("testPutPresentationMerge", testPutPresentationMerge),
        ("testPutPresentationMergeInvalidName", testPutPresentationMergeInvalidName),
        ("testPutPresentationMergeInvalidRequest", testPutPresentationMergeInvalidRequest),
        ("testPutPresentationMergeInvalidPassword", testPutPresentationMergeInvalidPassword),
        ("testPutPresentationMergeInvalidStorage", testPutPresentationMergeInvalidStorage),
        ("testPutPresentationMergeInvalidFolder", testPutPresentationMergeInvalidFolder),
        ("testPutSetParagraphPortionProperties", testPutSetParagraphPortionProperties),
        ("testPutSetParagraphPortionPropertiesInvalidName", testPutSetParagraphPortionPropertiesInvalidName),
        ("testPutSetParagraphPortionPropertiesInvalidSlideIndex", testPutSetParagraphPortionPropertiesInvalidSlideIndex),
        ("testPutSetParagraphPortionPropertiesInvalidShapeIndex", testPutSetParagraphPortionPropertiesInvalidShapeIndex),
        ("testPutSetParagraphPortionPropertiesInvalidParagraphIndex", testPutSetParagraphPortionPropertiesInvalidParagraphIndex),
        ("testPutSetParagraphPortionPropertiesInvalidPortionIndex", testPutSetParagraphPortionPropertiesInvalidPortionIndex),
        ("testPutSetParagraphPortionPropertiesInvalidDto", testPutSetParagraphPortionPropertiesInvalidDto),
        ("testPutSetParagraphPortionPropertiesInvalidPassword", testPutSetParagraphPortionPropertiesInvalidPassword),
        ("testPutSetParagraphPortionPropertiesInvalidFolder", testPutSetParagraphPortionPropertiesInvalidFolder),
        ("testPutSetParagraphPortionPropertiesInvalidStorage", testPutSetParagraphPortionPropertiesInvalidStorage),
        ("testPutSetParagraphProperties", testPutSetParagraphProperties),
        ("testPutSetParagraphPropertiesInvalidName", testPutSetParagraphPropertiesInvalidName),
        ("testPutSetParagraphPropertiesInvalidSlideIndex", testPutSetParagraphPropertiesInvalidSlideIndex),
        ("testPutSetParagraphPropertiesInvalidShapeIndex", testPutSetParagraphPropertiesInvalidShapeIndex),
        ("testPutSetParagraphPropertiesInvalidParagraphIndex", testPutSetParagraphPropertiesInvalidParagraphIndex),
        ("testPutSetParagraphPropertiesInvalidDto", testPutSetParagraphPropertiesInvalidDto),
        ("testPutSetParagraphPropertiesInvalidPassword", testPutSetParagraphPropertiesInvalidPassword),
        ("testPutSetParagraphPropertiesInvalidFolder", testPutSetParagraphPropertiesInvalidFolder),
        ("testPutSetParagraphPropertiesInvalidStorage", testPutSetParagraphPropertiesInvalidStorage),
        ("testPutSetSubshapeParagraphPortionProperties", testPutSetSubshapeParagraphPortionProperties),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidName", testPutSetSubshapeParagraphPortionPropertiesInvalidName),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidSlideIndex", testPutSetSubshapeParagraphPortionPropertiesInvalidSlideIndex),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidPath", testPutSetSubshapeParagraphPortionPropertiesInvalidPath),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidShapeIndex", testPutSetSubshapeParagraphPortionPropertiesInvalidShapeIndex),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidParagraphIndex", testPutSetSubshapeParagraphPortionPropertiesInvalidParagraphIndex),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidPortionIndex", testPutSetSubshapeParagraphPortionPropertiesInvalidPortionIndex),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidDto", testPutSetSubshapeParagraphPortionPropertiesInvalidDto),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidPassword", testPutSetSubshapeParagraphPortionPropertiesInvalidPassword),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidFolder", testPutSetSubshapeParagraphPortionPropertiesInvalidFolder),
        ("testPutSetSubshapeParagraphPortionPropertiesInvalidStorage", testPutSetSubshapeParagraphPortionPropertiesInvalidStorage),
        ("testPutSetSubshapeParagraphProperties", testPutSetSubshapeParagraphProperties),
        ("testPutSetSubshapeParagraphPropertiesInvalidName", testPutSetSubshapeParagraphPropertiesInvalidName),
        ("testPutSetSubshapeParagraphPropertiesInvalidSlideIndex", testPutSetSubshapeParagraphPropertiesInvalidSlideIndex),
        ("testPutSetSubshapeParagraphPropertiesInvalidPath", testPutSetSubshapeParagraphPropertiesInvalidPath),
        ("testPutSetSubshapeParagraphPropertiesInvalidShapeIndex", testPutSetSubshapeParagraphPropertiesInvalidShapeIndex),
        ("testPutSetSubshapeParagraphPropertiesInvalidParagraphIndex", testPutSetSubshapeParagraphPropertiesInvalidParagraphIndex),
        ("testPutSetSubshapeParagraphPropertiesInvalidDto", testPutSetSubshapeParagraphPropertiesInvalidDto),
        ("testPutSetSubshapeParagraphPropertiesInvalidPassword", testPutSetSubshapeParagraphPropertiesInvalidPassword),
        ("testPutSetSubshapeParagraphPropertiesInvalidFolder", testPutSetSubshapeParagraphPropertiesInvalidFolder),
        ("testPutSetSubshapeParagraphPropertiesInvalidStorage", testPutSetSubshapeParagraphPropertiesInvalidStorage),
        ("testPutShapeSaveAs", testPutShapeSaveAs),
        ("testPutShapeSaveAsInvalidName", testPutShapeSaveAsInvalidName),
        ("testPutShapeSaveAsInvalidSlideIndex", testPutShapeSaveAsInvalidSlideIndex),
        ("testPutShapeSaveAsInvalidShapeIndex", testPutShapeSaveAsInvalidShapeIndex),
        ("testPutShapeSaveAsInvalidFormat", testPutShapeSaveAsInvalidFormat),
        ("testPutShapeSaveAsInvalidOutPath", testPutShapeSaveAsInvalidOutPath),
        ("testPutShapeSaveAsInvalidOptions", testPutShapeSaveAsInvalidOptions),
        ("testPutShapeSaveAsInvalidPassword", testPutShapeSaveAsInvalidPassword),
        ("testPutShapeSaveAsInvalidFolder", testPutShapeSaveAsInvalidFolder),
        ("testPutShapeSaveAsInvalidStorage", testPutShapeSaveAsInvalidStorage),
        ("testPutShapeSaveAsInvalidScaleX", testPutShapeSaveAsInvalidScaleX),
        ("testPutShapeSaveAsInvalidScaleY", testPutShapeSaveAsInvalidScaleY),
        ("testPutShapeSaveAsInvalidBounds", testPutShapeSaveAsInvalidBounds),
        ("testPutShapeSaveAsInvalidFontsFolder", testPutShapeSaveAsInvalidFontsFolder),
        ("testPutSlideAnimation", testPutSlideAnimation),
        ("testPutSlideAnimationInvalidName", testPutSlideAnimationInvalidName),
        ("testPutSlideAnimationInvalidSlideIndex", testPutSlideAnimationInvalidSlideIndex),
        ("testPutSlideAnimationInvalidAnimation", testPutSlideAnimationInvalidAnimation),
        ("testPutSlideAnimationInvalidPassword", testPutSlideAnimationInvalidPassword),
        ("testPutSlideAnimationInvalidFolder", testPutSlideAnimationInvalidFolder),
        ("testPutSlideAnimationInvalidStorage", testPutSlideAnimationInvalidStorage),
        ("testPutSlideAnimationEffect", testPutSlideAnimationEffect),
        ("testPutSlideAnimationEffectInvalidName", testPutSlideAnimationEffectInvalidName),
        ("testPutSlideAnimationEffectInvalidSlideIndex", testPutSlideAnimationEffectInvalidSlideIndex),
        ("testPutSlideAnimationEffectInvalidEffectIndex", testPutSlideAnimationEffectInvalidEffectIndex),
        ("testPutSlideAnimationEffectInvalidEffect", testPutSlideAnimationEffectInvalidEffect),
        ("testPutSlideAnimationEffectInvalidPassword", testPutSlideAnimationEffectInvalidPassword),
        ("testPutSlideAnimationEffectInvalidFolder", testPutSlideAnimationEffectInvalidFolder),
        ("testPutSlideAnimationEffectInvalidStorage", testPutSlideAnimationEffectInvalidStorage),
        ("testPutSlideAnimationInteractiveSequenceEffect", testPutSlideAnimationInteractiveSequenceEffect),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidName", testPutSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testPutSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testPutSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidEffectIndex", testPutSlideAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidEffect", testPutSlideAnimationInteractiveSequenceEffectInvalidEffect),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidPassword", testPutSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidFolder", testPutSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testPutSlideAnimationInteractiveSequenceEffectInvalidStorage", testPutSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testPutSlideSaveAs", testPutSlideSaveAs),
        ("testPutSlideSaveAsInvalidName", testPutSlideSaveAsInvalidName),
        ("testPutSlideSaveAsInvalidSlideIndex", testPutSlideSaveAsInvalidSlideIndex),
        ("testPutSlideSaveAsInvalidFormat", testPutSlideSaveAsInvalidFormat),
        ("testPutSlideSaveAsInvalidOutPath", testPutSlideSaveAsInvalidOutPath),
        ("testPutSlideSaveAsInvalidOptions", testPutSlideSaveAsInvalidOptions),
        ("testPutSlideSaveAsInvalidWidth", testPutSlideSaveAsInvalidWidth),
        ("testPutSlideSaveAsInvalidHeight", testPutSlideSaveAsInvalidHeight),
        ("testPutSlideSaveAsInvalidPassword", testPutSlideSaveAsInvalidPassword),
        ("testPutSlideSaveAsInvalidFolder", testPutSlideSaveAsInvalidFolder),
        ("testPutSlideSaveAsInvalidStorage", testPutSlideSaveAsInvalidStorage),
        ("testPutSlideSaveAsInvalidFontsFolder", testPutSlideSaveAsInvalidFontsFolder),
        ("testPutSlideShapeInfo", testPutSlideShapeInfo),
        ("testPutSlideShapeInfoInvalidName", testPutSlideShapeInfoInvalidName),
        ("testPutSlideShapeInfoInvalidSlideIndex", testPutSlideShapeInfoInvalidSlideIndex),
        ("testPutSlideShapeInfoInvalidShapeIndex", testPutSlideShapeInfoInvalidShapeIndex),
        ("testPutSlideShapeInfoInvalidDto", testPutSlideShapeInfoInvalidDto),
        ("testPutSlideShapeInfoInvalidPassword", testPutSlideShapeInfoInvalidPassword),
        ("testPutSlideShapeInfoInvalidFolder", testPutSlideShapeInfoInvalidFolder),
        ("testPutSlideShapeInfoInvalidStorage", testPutSlideShapeInfoInvalidStorage),
        ("testPutSlideSubshapeInfo", testPutSlideSubshapeInfo),
        ("testPutSlideSubshapeInfoInvalidName", testPutSlideSubshapeInfoInvalidName),
        ("testPutSlideSubshapeInfoInvalidSlideIndex", testPutSlideSubshapeInfoInvalidSlideIndex),
        ("testPutSlideSubshapeInfoInvalidPath", testPutSlideSubshapeInfoInvalidPath),
        ("testPutSlideSubshapeInfoInvalidShapeIndex", testPutSlideSubshapeInfoInvalidShapeIndex),
        ("testPutSlideSubshapeInfoInvalidDto", testPutSlideSubshapeInfoInvalidDto),
        ("testPutSlideSubshapeInfoInvalidPassword", testPutSlideSubshapeInfoInvalidPassword),
        ("testPutSlideSubshapeInfoInvalidFolder", testPutSlideSubshapeInfoInvalidFolder),
        ("testPutSlideSubshapeInfoInvalidStorage", testPutSlideSubshapeInfoInvalidStorage),
        ("testPutSlidesConvert", testPutSlidesConvert),
        ("testPutSlidesConvertInvalidFormat", testPutSlidesConvertInvalidFormat),
        ("testPutSlidesConvertInvalidOutPath", testPutSlidesConvertInvalidOutPath),
        ("testPutSlidesConvertInvalidDocument", testPutSlidesConvertInvalidDocument),
        ("testPutSlidesConvertInvalidPassword", testPutSlidesConvertInvalidPassword),
        ("testPutSlidesConvertInvalidFontsFolder", testPutSlidesConvertInvalidFontsFolder),
        ("testPutSlidesDocumentFromHtml", testPutSlidesDocumentFromHtml),
        ("testPutSlidesDocumentFromHtmlInvalidName", testPutSlidesDocumentFromHtmlInvalidName),
        ("testPutSlidesDocumentFromHtmlInvalidHtml", testPutSlidesDocumentFromHtmlInvalidHtml),
        ("testPutSlidesDocumentFromHtmlInvalidPassword", testPutSlidesDocumentFromHtmlInvalidPassword),
        ("testPutSlidesDocumentFromHtmlInvalidStorage", testPutSlidesDocumentFromHtmlInvalidStorage),
        ("testPutSlidesDocumentFromHtmlInvalidFolder", testPutSlidesDocumentFromHtmlInvalidFolder),
        ("testPutSlidesSaveAs", testPutSlidesSaveAs),
        ("testPutSlidesSaveAsInvalidName", testPutSlidesSaveAsInvalidName),
        ("testPutSlidesSaveAsInvalidOutPath", testPutSlidesSaveAsInvalidOutPath),
        ("testPutSlidesSaveAsInvalidFormat", testPutSlidesSaveAsInvalidFormat),
        ("testPutSlidesSaveAsInvalidOptions", testPutSlidesSaveAsInvalidOptions),
        ("testPutSlidesSaveAsInvalidPassword", testPutSlidesSaveAsInvalidPassword),
        ("testPutSlidesSaveAsInvalidStorage", testPutSlidesSaveAsInvalidStorage),
        ("testPutSlidesSaveAsInvalidFolder", testPutSlidesSaveAsInvalidFolder),
        ("testPutSlidesSaveAsInvalidFontsFolder", testPutSlidesSaveAsInvalidFontsFolder),
        ("testPutSlidesSetDocumentProperty", testPutSlidesSetDocumentProperty),
        ("testPutSlidesSetDocumentPropertyInvalidName", testPutSlidesSetDocumentPropertyInvalidName),
        ("testPutSlidesSetDocumentPropertyInvalidPropertyName", testPutSlidesSetDocumentPropertyInvalidPropertyName),
        ("testPutSlidesSetDocumentPropertyInvalidProperty", testPutSlidesSetDocumentPropertyInvalidProperty),
        ("testPutSlidesSetDocumentPropertyInvalidPassword", testPutSlidesSetDocumentPropertyInvalidPassword),
        ("testPutSlidesSetDocumentPropertyInvalidFolder", testPutSlidesSetDocumentPropertyInvalidFolder),
        ("testPutSlidesSetDocumentPropertyInvalidStorage", testPutSlidesSetDocumentPropertyInvalidStorage),
        ("testPutSlidesSlide", testPutSlidesSlide),
        ("testPutSlidesSlideInvalidName", testPutSlidesSlideInvalidName),
        ("testPutSlidesSlideInvalidSlideIndex", testPutSlidesSlideInvalidSlideIndex),
        ("testPutSlidesSlideInvalidSlideDto", testPutSlidesSlideInvalidSlideDto),
        ("testPutSlidesSlideInvalidPassword", testPutSlidesSlideInvalidPassword),
        ("testPutSlidesSlideInvalidFolder", testPutSlidesSlideInvalidFolder),
        ("testPutSlidesSlideInvalidStorage", testPutSlidesSlideInvalidStorage),
        ("testPutSlidesSlideBackground", testPutSlidesSlideBackground),
        ("testPutSlidesSlideBackgroundInvalidName", testPutSlidesSlideBackgroundInvalidName),
        ("testPutSlidesSlideBackgroundInvalidSlideIndex", testPutSlidesSlideBackgroundInvalidSlideIndex),
        ("testPutSlidesSlideBackgroundInvalidBackground", testPutSlidesSlideBackgroundInvalidBackground),
        ("testPutSlidesSlideBackgroundInvalidFolder", testPutSlidesSlideBackgroundInvalidFolder),
        ("testPutSlidesSlideBackgroundInvalidPassword", testPutSlidesSlideBackgroundInvalidPassword),
        ("testPutSlidesSlideBackgroundInvalidStorage", testPutSlidesSlideBackgroundInvalidStorage),
        ("testPutSlidesSlideBackgroundColor", testPutSlidesSlideBackgroundColor),
        ("testPutSlidesSlideBackgroundColorInvalidName", testPutSlidesSlideBackgroundColorInvalidName),
        ("testPutSlidesSlideBackgroundColorInvalidSlideIndex", testPutSlidesSlideBackgroundColorInvalidSlideIndex),
        ("testPutSlidesSlideBackgroundColorInvalidColor", testPutSlidesSlideBackgroundColorInvalidColor),
        ("testPutSlidesSlideBackgroundColorInvalidFolder", testPutSlidesSlideBackgroundColorInvalidFolder),
        ("testPutSlidesSlideBackgroundColorInvalidPassword", testPutSlidesSlideBackgroundColorInvalidPassword),
        ("testPutSlidesSlideBackgroundColorInvalidStorage", testPutSlidesSlideBackgroundColorInvalidStorage),
        ("testPutSlidesSlideSize", testPutSlidesSlideSize),
        ("testPutSlidesSlideSizeInvalidName", testPutSlidesSlideSizeInvalidName),
        ("testPutSlidesSlideSizeInvalidPassword", testPutSlidesSlideSizeInvalidPassword),
        ("testPutSlidesSlideSizeInvalidStorage", testPutSlidesSlideSizeInvalidStorage),
        ("testPutSlidesSlideSizeInvalidFolder", testPutSlidesSlideSizeInvalidFolder),
        ("testPutSlidesSlideSizeInvalidWidth", testPutSlidesSlideSizeInvalidWidth),
        ("testPutSlidesSlideSizeInvalidHeight", testPutSlidesSlideSizeInvalidHeight),
        ("testPutSlidesSlideSizeInvalidSizeType", testPutSlidesSlideSizeInvalidSizeType),
        ("testPutSlidesSlideSizeInvalidScaleType", testPutSlidesSlideSizeInvalidScaleType),
        ("testPutSlidesViewProperties", testPutSlidesViewProperties),
        ("testPutSlidesViewPropertiesInvalidName", testPutSlidesViewPropertiesInvalidName),
        ("testPutSlidesViewPropertiesInvalidDto", testPutSlidesViewPropertiesInvalidDto),
        ("testPutSlidesViewPropertiesInvalidPassword", testPutSlidesViewPropertiesInvalidPassword),
        ("testPutSlidesViewPropertiesInvalidFolder", testPutSlidesViewPropertiesInvalidFolder),
        ("testPutSlidesViewPropertiesInvalidStorage", testPutSlidesViewPropertiesInvalidStorage),
        ("testPutSubshapeSaveAs", testPutSubshapeSaveAs),
        ("testPutSubshapeSaveAsInvalidName", testPutSubshapeSaveAsInvalidName),
        ("testPutSubshapeSaveAsInvalidSlideIndex", testPutSubshapeSaveAsInvalidSlideIndex),
        ("testPutSubshapeSaveAsInvalidPath", testPutSubshapeSaveAsInvalidPath),
        ("testPutSubshapeSaveAsInvalidShapeIndex", testPutSubshapeSaveAsInvalidShapeIndex),
        ("testPutSubshapeSaveAsInvalidFormat", testPutSubshapeSaveAsInvalidFormat),
        ("testPutSubshapeSaveAsInvalidOutPath", testPutSubshapeSaveAsInvalidOutPath),
        ("testPutSubshapeSaveAsInvalidOptions", testPutSubshapeSaveAsInvalidOptions),
        ("testPutSubshapeSaveAsInvalidPassword", testPutSubshapeSaveAsInvalidPassword),
        ("testPutSubshapeSaveAsInvalidFolder", testPutSubshapeSaveAsInvalidFolder),
        ("testPutSubshapeSaveAsInvalidStorage", testPutSubshapeSaveAsInvalidStorage),
        ("testPutSubshapeSaveAsInvalidScaleX", testPutSubshapeSaveAsInvalidScaleX),
        ("testPutSubshapeSaveAsInvalidScaleY", testPutSubshapeSaveAsInvalidScaleY),
        ("testPutSubshapeSaveAsInvalidBounds", testPutSubshapeSaveAsInvalidBounds),
        ("testPutSubshapeSaveAsInvalidFontsFolder", testPutSubshapeSaveAsInvalidFontsFolder),
        ("testPutUpdateNotesSlide", testPutUpdateNotesSlide),
        ("testPutUpdateNotesSlideInvalidName", testPutUpdateNotesSlideInvalidName),
        ("testPutUpdateNotesSlideInvalidSlideIndex", testPutUpdateNotesSlideInvalidSlideIndex),
        ("testPutUpdateNotesSlideInvalidDto", testPutUpdateNotesSlideInvalidDto),
        ("testPutUpdateNotesSlideInvalidPassword", testPutUpdateNotesSlideInvalidPassword),
        ("testPutUpdateNotesSlideInvalidFolder", testPutUpdateNotesSlideInvalidFolder),
        ("testPutUpdateNotesSlideInvalidStorage", testPutUpdateNotesSlideInvalidStorage),
        ("testPutUpdateNotesSlideShape", testPutUpdateNotesSlideShape),
        ("testPutUpdateNotesSlideShapeInvalidName", testPutUpdateNotesSlideShapeInvalidName),
        ("testPutUpdateNotesSlideShapeInvalidSlideIndex", testPutUpdateNotesSlideShapeInvalidSlideIndex),
        ("testPutUpdateNotesSlideShapeInvalidShapeIndex", testPutUpdateNotesSlideShapeInvalidShapeIndex),
        ("testPutUpdateNotesSlideShapeInvalidDto", testPutUpdateNotesSlideShapeInvalidDto),
        ("testPutUpdateNotesSlideShapeInvalidPassword", testPutUpdateNotesSlideShapeInvalidPassword),
        ("testPutUpdateNotesSlideShapeInvalidFolder", testPutUpdateNotesSlideShapeInvalidFolder),
        ("testPutUpdateNotesSlideShapeInvalidStorage", testPutUpdateNotesSlideShapeInvalidStorage),
        ("testPutUpdateNotesSlideShapeParagraph", testPutUpdateNotesSlideShapeParagraph),
        ("testPutUpdateNotesSlideShapeParagraphInvalidName", testPutUpdateNotesSlideShapeParagraphInvalidName),
        ("testPutUpdateNotesSlideShapeParagraphInvalidSlideIndex", testPutUpdateNotesSlideShapeParagraphInvalidSlideIndex),
        ("testPutUpdateNotesSlideShapeParagraphInvalidShapeIndex", testPutUpdateNotesSlideShapeParagraphInvalidShapeIndex),
        ("testPutUpdateNotesSlideShapeParagraphInvalidParagraphIndex", testPutUpdateNotesSlideShapeParagraphInvalidParagraphIndex),
        ("testPutUpdateNotesSlideShapeParagraphInvalidDto", testPutUpdateNotesSlideShapeParagraphInvalidDto),
        ("testPutUpdateNotesSlideShapeParagraphInvalidPassword", testPutUpdateNotesSlideShapeParagraphInvalidPassword),
        ("testPutUpdateNotesSlideShapeParagraphInvalidFolder", testPutUpdateNotesSlideShapeParagraphInvalidFolder),
        ("testPutUpdateNotesSlideShapeParagraphInvalidStorage", testPutUpdateNotesSlideShapeParagraphInvalidStorage),
        ("testPutUpdateNotesSlideShapePortion", testPutUpdateNotesSlideShapePortion),
        ("testPutUpdateNotesSlideShapePortionInvalidName", testPutUpdateNotesSlideShapePortionInvalidName),
        ("testPutUpdateNotesSlideShapePortionInvalidSlideIndex", testPutUpdateNotesSlideShapePortionInvalidSlideIndex),
        ("testPutUpdateNotesSlideShapePortionInvalidShapeIndex", testPutUpdateNotesSlideShapePortionInvalidShapeIndex),
        ("testPutUpdateNotesSlideShapePortionInvalidParagraphIndex", testPutUpdateNotesSlideShapePortionInvalidParagraphIndex),
        ("testPutUpdateNotesSlideShapePortionInvalidPortionIndex", testPutUpdateNotesSlideShapePortionInvalidPortionIndex),
        ("testPutUpdateNotesSlideShapePortionInvalidDto", testPutUpdateNotesSlideShapePortionInvalidDto),
        ("testPutUpdateNotesSlideShapePortionInvalidPassword", testPutUpdateNotesSlideShapePortionInvalidPassword),
        ("testPutUpdateNotesSlideShapePortionInvalidFolder", testPutUpdateNotesSlideShapePortionInvalidFolder),
        ("testPutUpdateNotesSlideShapePortionInvalidStorage", testPutUpdateNotesSlideShapePortionInvalidStorage),
        ("testStorageExists", testStorageExists),
        ("testStorageExistsInvalidStorageName", testStorageExistsInvalidStorageName),
        ("testUploadFile", testUploadFile),
        ("testUploadFileInvalidPath", testUploadFileInvalidPath),
        ("testUploadFileInvalidFile", testUploadFileInvalidFile),
        ("testUploadFileInvalidStorageName", testUploadFileInvalidStorageName),
    ];
    
    internal let testTimeout: TimeInterval = 200.0 

    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        super.tearDown()
    }    
    
    func testCopyFile() {
        let expectation = self.expectation(description: "testcopyFile")
        let request = CopyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        TestUtils.initialize("copyFile") { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidSrcPath() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = CopyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.srcPath = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "srcPath", value: request.srcPath as Any, type: "String")
        TestUtils.initialize("copyFile", "srcPath", request.srcPath) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcPath", parameterValue: request.srcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidDestPath() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = CopyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.destPath = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "destPath", value: request.destPath as Any, type: "String")
        TestUtils.initialize("copyFile", "destPath", request.destPath) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destPath", parameterValue: request.destPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = CopyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.srcStorageName = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "srcStorageName", value: request.srcStorageName as Any, type: "String")
        TestUtils.initialize("copyFile", "srcStorageName", request.srcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcStorageName", parameterValue: request.srcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidDestStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = CopyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.destStorageName = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "destStorageName", value: request.destStorageName as Any, type: "String")
        TestUtils.initialize("copyFile", "destStorageName", request.destStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destStorageName", parameterValue: request.destStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidVersionId() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = CopyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("copyFile", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyFolder() {
        let expectation = self.expectation(description: "testcopyFolder")
        let request = CopyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        TestUtils.initialize("copyFolder") { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidSrcPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        var request = CopyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        request.srcPath = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "srcPath", value: request.srcPath as Any, type: "String")
        TestUtils.initialize("copyFolder", "srcPath", request.srcPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcPath", parameterValue: request.srcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidDestPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        var request = CopyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        request.destPath = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "destPath", value: request.destPath as Any, type: "String")
        TestUtils.initialize("copyFolder", "destPath", request.destPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destPath", parameterValue: request.destPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        var request = CopyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        request.srcStorageName = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "srcStorageName", value: request.srcStorageName as Any, type: "String")
        TestUtils.initialize("copyFolder", "srcStorageName", request.srcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcStorageName", parameterValue: request.srcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidDestStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        var request = CopyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        request.destStorageName = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "destStorageName", value: request.destStorageName as Any, type: "String")
        TestUtils.initialize("copyFolder", "destStorageName", request.destStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destStorageName", parameterValue: request.destStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateFolder() {
        let expectation = self.expectation(description: "testcreateFolder")
        let request = CreateFolderRequest(path: TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String"))
        TestUtils.initialize("createFolder") { (response, error) -> Void in
            SlidesAPI.createFolder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateFolderInvalidPath() {
        let expectation = self.expectation(description: "testcreateFolder")
        var request = CreateFolderRequest(path: TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "createFolder", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("createFolder", "path", request.path) { (response, error) -> Void in
            SlidesAPI.createFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateFolderInvalidStorageName() {
        let expectation = self.expectation(description: "testcreateFolder")
        var request = CreateFolderRequest(path: TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "createFolder", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("createFolder", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.createFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartSeries() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let request = DeleteChartSeriesRequest(name: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String"))
        TestUtils.initialize("deleteChartSeries") { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var request = DeleteChartSeriesRequest(name: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var request = DeleteChartSeriesRequest(name: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var request = DeleteChartSeriesRequest(name: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var request = DeleteChartSeriesRequest(name: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String"))
        request.seriesIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "seriesIndex", value: request.seriesIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "seriesIndex", request.seriesIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "seriesIndex", parameterValue: request.seriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var request = DeleteChartSeriesRequest(name: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var request = DeleteChartSeriesRequest(name: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var request = DeleteChartSeriesRequest(name: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteFile() {
        let expectation = self.expectation(description: "testdeleteFile")
        let request = DeleteFileRequest(path: TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String"))
        TestUtils.initialize("deleteFile") { (response, error) -> Void in
            SlidesAPI.deleteFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidPath() {
        let expectation = self.expectation(description: "testdeleteFile")
        var request = DeleteFileRequest(path: TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteFile", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidStorageName() {
        let expectation = self.expectation(description: "testdeleteFile")
        var request = DeleteFileRequest(path: TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("deleteFile", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.deleteFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidVersionId() {
        let expectation = self.expectation(description: "testdeleteFile")
        var request = DeleteFileRequest(path: TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("deleteFile", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.deleteFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteFolder() {
        let expectation = self.expectation(description: "testdeleteFolder")
        let request = DeleteFolderRequest(path: TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String"), recursive: TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool"))
        TestUtils.initialize("deleteFolder") { (response, error) -> Void in
            SlidesAPI.deleteFolder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidPath() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var request = DeleteFolderRequest(path: TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String"), recursive: TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteFolder", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidStorageName() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var request = DeleteFolderRequest(path: TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String"), recursive: TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("deleteFolder", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.deleteFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidRecursive() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var request = DeleteFolderRequest(path: TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String"), recursive: TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool"))
        request.recursive = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "recursive", value: request.recursive as Any, type: "Bool")
        TestUtils.initialize("deleteFolder", "recursive", request.recursive) { (response, error) -> Void in
            SlidesAPI.deleteFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "recursive", parameterValue: request.recursive as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlide() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let request = DeleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlide") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = DeleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = DeleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = DeleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = DeleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = DeleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideParagraph() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        let request = DeleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlideParagraph") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = DeleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = DeleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = DeleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = DeleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = DeleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = DeleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = DeleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideParagraphs() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        let request = DeleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlideParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = DeleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = DeleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = DeleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = DeleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.paragraphs = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", value: request.paragraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlideParagraphs", "paragraphs", request.paragraphs) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "paragraphs", parameterValue: request.paragraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = DeleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = DeleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = DeleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlidePortion() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        let request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlidePortion") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = DeleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlidePortions() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        let request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlidePortions") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.portions = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "portions", value: request.portions as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlidePortions", "portions", request.portions) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "portions", parameterValue: request.portions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = DeleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideShape() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        let request = DeleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = DeleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = DeleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = DeleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = DeleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = DeleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = DeleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideShapes() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        let request = DeleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlideShapes") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = DeleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = DeleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = DeleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.shapes = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", value: request.shapes as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlideShapes", "shapes", request.shapes) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "shapes", parameterValue: request.shapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = DeleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = DeleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = DeleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteParagraph() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let request = DeleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        TestUtils.initialize("deleteParagraph") { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = DeleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = DeleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = DeleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = DeleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = DeleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = DeleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = DeleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let request = DeleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("deleteParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = DeleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = DeleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = DeleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = DeleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.paragraphs = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "paragraphs", value: request.paragraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteParagraphs", "paragraphs", request.paragraphs) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "paragraphs", parameterValue: request.paragraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = DeleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = DeleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = DeleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeletePortion() {
        let expectation = self.expectation(description: "testdeletePortion")
        let request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        TestUtils.initialize("deletePortion") { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidName() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deletePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deletePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deletePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = DeletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deletePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeletePortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        let request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        TestUtils.initialize("deletePortions") { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deletePortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.portions = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "portions", value: request.portions as Any, type: "[Int]")
        TestUtils.initialize("deletePortions", "portions", request.portions) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "portions", parameterValue: request.portions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deletePortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deletePortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = DeletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deletePortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimation() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        let request = DeleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimation") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = DeleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = DeleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimation", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = DeleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = DeleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = DeleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationEffect() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        let request = DeleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = DeleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = DeleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = DeleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.effectIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", value: request.effectIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationEffect", "effectIndex", request.effectIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "effectIndex", parameterValue: request.effectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = DeleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = DeleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = DeleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        let request = DeleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = DeleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = DeleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = DeleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.sequenceIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", value: request.sequenceIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "sequenceIndex", request.sequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "sequenceIndex", parameterValue: request.sequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = DeleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = DeleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = DeleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        let request = DeleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = DeleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = DeleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = DeleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.sequenceIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: request.sequenceIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request.sequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: request.sequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = DeleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.effectIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", value: request.effectIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", request.effectIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: request.effectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = DeleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = DeleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = DeleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationInteractiveSequences() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        let request = DeleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = DeleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = DeleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = DeleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = DeleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationInteractiveSequencesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = DeleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideAnimationMainSequence() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        let request = DeleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationMainSequence") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = DeleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = DeleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = DeleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = DeleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideAnimationMainSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = DeleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideByIndex() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        let request = DeleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideByIndex") { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = DeleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = DeleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideByIndex", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = DeleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = DeleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideByIndexInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = DeleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideShape() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        let request = DeleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideShape") { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = DeleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = DeleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = DeleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = DeleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = DeleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = DeleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideShapes() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        let request = DeleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideShapes") { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = DeleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = DeleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = DeleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.shapes = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "shapes", value: request.shapes as Any, type: "[Int]")
        TestUtils.initialize("deleteSlideShapes", "shapes", request.shapes) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "shapes", parameterValue: request.shapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = DeleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = DeleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = DeleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideSubshape() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        let request = DeleteSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideSubshape") { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var request = DeleteSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var request = DeleteSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideSubshape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var request = DeleteSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var request = DeleteSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideSubshape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var request = DeleteSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var request = DeleteSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideSubshape")
        var request = DeleteSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideSubshapes() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        let request = DeleteSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideSubshapes") { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var request = DeleteSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var request = DeleteSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideSubshapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var request = DeleteSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var request = DeleteSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String"))
        request.shapes = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "shapes", value: request.shapes as Any, type: "[Int]")
        TestUtils.initialize("deleteSlideSubshapes", "shapes", request.shapes) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "shapes", parameterValue: request.shapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var request = DeleteSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var request = DeleteSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideSubshapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideSubshapes")
        var request = DeleteSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideSubshapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideSubshapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideSubshapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideSubshapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlidesCleanSlidesList() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        let request = DeleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlidesCleanSlidesList") { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = DeleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidSlides() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = DeleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.slides = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", value: request.slides as Any, type: "[Int]")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "slides", request.slides) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "slides", parameterValue: request.slides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = DeleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = DeleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesCleanSlidesListInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = DeleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlidesDocumentProperties() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        let request = DeleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlidesDocumentProperties") { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var request = DeleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var request = DeleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var request = DeleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var request = DeleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlidesDocumentProperty() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        let request = DeleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlidesDocumentProperty") { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = DeleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = DeleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.propertyName = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", value: request.propertyName as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "propertyName", request.propertyName) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "propertyName", parameterValue: request.propertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = DeleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = DeleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = DeleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlidesSlideBackground() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        let request = DeleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = DeleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = DeleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlidesSlideBackground", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = DeleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = DeleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesSlideBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = DeleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapeParagraph() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        let request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        TestUtils.initialize("deleteSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var request = DeleteSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapeParagraphs() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        let request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("deleteSubshapeParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        request.paragraphs = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", value: request.paragraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteSubshapeParagraphs", "paragraphs", request.paragraphs) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "paragraphs", parameterValue: request.paragraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var request = DeleteSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapePortion() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        let request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        TestUtils.initialize("deleteSubshapePortion") { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var request = DeleteSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapePortions() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        let request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        TestUtils.initialize("deleteSubshapePortions") { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.portions = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "portions", value: request.portions as Any, type: "[Int]")
        TestUtils.initialize("deleteSubshapePortions", "portions", request.portions) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "portions", parameterValue: request.portions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var request = DeleteSubshapePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadFile() {
        let expectation = self.expectation(description: "testdownloadFile")
        let request = DownloadFileRequest(path: TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String"))
        TestUtils.initialize("downloadFile") { (response, error) -> Void in
            SlidesAPI.downloadFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidPath() {
        let expectation = self.expectation(description: "testdownloadFile")
        var request = DownloadFileRequest(path: TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("downloadFile", "path", request.path) { (response, error) -> Void in
            SlidesAPI.downloadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidStorageName() {
        let expectation = self.expectation(description: "testdownloadFile")
        var request = DownloadFileRequest(path: TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("downloadFile", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.downloadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidVersionId() {
        let expectation = self.expectation(description: "testdownloadFile")
        var request = DownloadFileRequest(path: TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("downloadFile", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.downloadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetDiscUsage() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        let request = GetDiscUsageRequest(storageName: TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String"))
        TestUtils.initialize("getDiscUsage") { (response, error) -> Void in
            SlidesAPI.getDiscUsage(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDiscUsageInvalidStorageName() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        var request = GetDiscUsageRequest(storageName: TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "getDiscUsage", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("getDiscUsage", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.getDiscUsage(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDiscUsage", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFileVersions() {
        let expectation = self.expectation(description: "testgetFileVersions")
        let request = GetFileVersionsRequest(path: TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String"))
        TestUtils.initialize("getFileVersions") { (response, error) -> Void in
            SlidesAPI.getFileVersions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFileVersionsInvalidPath() {
        let expectation = self.expectation(description: "testgetFileVersions")
        var request = GetFileVersionsRequest(path: TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getFileVersions", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getFileVersions", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getFileVersions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFileVersionsInvalidStorageName() {
        let expectation = self.expectation(description: "testgetFileVersions")
        var request = GetFileVersionsRequest(path: TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "getFileVersions", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("getFileVersions", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.getFileVersions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFilesList() {
        let expectation = self.expectation(description: "testgetFilesList")
        let request = GetFilesListRequest(path: TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String"))
        TestUtils.initialize("getFilesList") { (response, error) -> Void in
            SlidesAPI.getFilesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFilesListInvalidPath() {
        let expectation = self.expectation(description: "testgetFilesList")
        var request = GetFilesListRequest(path: TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getFilesList", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getFilesList", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getFilesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFilesListInvalidStorageName() {
        let expectation = self.expectation(description: "testgetFilesList")
        var request = GetFilesListRequest(path: TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "getFilesList", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("getFilesList", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.getFilesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetLayoutSlide() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let request = GetLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        TestUtils.initialize("getLayoutSlide") { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = GetLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = GetLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getLayoutSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = GetLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = GetLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = GetLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetLayoutSlidesList() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        let request = GetLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        TestUtils.initialize("getLayoutSlidesList") { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesListInvalidName() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var request = GetLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesListInvalidPassword() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var request = GetLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesListInvalidFolder() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var request = GetLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesListInvalidStorage() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var request = GetLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetMasterSlide() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let request = GetMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        TestUtils.initialize("getMasterSlide") { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidName() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = GetMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = GetMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getMasterSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = GetMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = GetMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = GetMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetMasterSlidesList() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        let request = GetMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        TestUtils.initialize("getMasterSlidesList") { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesListInvalidName() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var request = GetMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesListInvalidPassword() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var request = GetMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesListInvalidFolder() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var request = GetMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesListInvalidStorage() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var request = GetMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlide() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let request = GetNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlide") { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = GetNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = GetNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = GetNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = GetNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = GetNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideExists() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        let request = GetNotesSlideExistsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideExists") { (response, error) -> Void in
            SlidesAPI.getNotesSlideExists(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var request = GetNotesSlideExistsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideExists", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var request = GetNotesSlideExistsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideExists", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var request = GetNotesSlideExistsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideExists", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var request = GetNotesSlideExistsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideExists", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideExistsInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideExists")
        var request = GetNotesSlideExistsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideExists", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideExists", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideExists", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideExists", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShape() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        let request = GetNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = GetNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = GetNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = GetNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = GetNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = GetNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = GetNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapeParagraph() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        let request = GetNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = GetNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = GetNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = GetNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = GetNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = GetNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = GetNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = GetNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapeParagraphs() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        let request = GetNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = GetNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = GetNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = GetNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = GetNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = GetNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = GetNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapePortion() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        let request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapePortion") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = GetNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapePortions() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        let request = GetNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapePortions") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = GetNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = GetNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = GetNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = GetNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = GetNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = GetNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = GetNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapes() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        let request = GetNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapes") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = GetNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = GetNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = GetNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = GetNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = GetNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideWithFormat() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        let request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        TestUtils.initialize("getNotesSlideWithFormat") { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "format", request.format) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidWidth() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "width", request.width) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidHeight() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "height", request.height) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideWithFormatInvalidFontsFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = GetNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraphPortion() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        let request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        TestUtils.initialize("getParagraphPortion") { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidName() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = GetParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraphPortions() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        let request = GetParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        TestUtils.initialize("getParagraphPortions") { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidName() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = GetParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = GetParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = GetParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = GetParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = GetParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = GetParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphPortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = GetParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideAnimation() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        let request = GetSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        TestUtils.initialize("getSlideAnimation") { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = GetSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = GetSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideAnimation", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = GetSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideAnimation", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = GetSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = GetSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = GetSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShape() {
        let expectation = self.expectation(description: "testgetSlideShape")
        let request = GetSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("getSlideShape") { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = GetSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = GetSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = GetSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = GetSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = GetSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = GetSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShapeParagraph() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        let request = GetSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        TestUtils.initialize("getSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = GetSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = GetSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = GetSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = GetSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = GetSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = GetSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = GetSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShapeParagraphs() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        let request = GetSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("getSlideShapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = GetSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = GetSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = GetSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = GetSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = GetSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = GetSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShapes() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        let request = GetSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        TestUtils.initialize("getSlideShapes") { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = GetSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = GetSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = GetSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = GetSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = GetSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideSubshape() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        let request = GetSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String"))
        TestUtils.initialize("getSlideSubshape") { (response, error) -> Void in
            SlidesAPI.getSlideSubshape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidName() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var request = GetSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var request = GetSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var request = GetSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var request = GetSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var request = GetSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var request = GetSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideSubshape")
        var request = GetSlideSubshapeRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideSubshape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideSubshape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideSubshapeParagraph() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        let request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        TestUtils.initialize("getSlideSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraph")
        var request = GetSlideSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideSubshapeParagraphs() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        let request = GetSlideSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("getSlideSubshapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var request = GetSlideSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var request = GetSlideSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidPath() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var request = GetSlideSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var request = GetSlideSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapeParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var request = GetSlideSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var request = GetSlideSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideSubshapeParagraphs")
        var request = GetSlideSubshapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapeParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideSubshapeParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapeParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideSubshapes() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        let request = GetSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String"))
        TestUtils.initialize("getSlideSubshapes") { (response, error) -> Void in
            SlidesAPI.getSlideSubshapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var request = GetSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var request = GetSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideSubshapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidPath() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var request = GetSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var request = GetSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var request = GetSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideSubshapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideSubshapes")
        var request = GetSlideSubshapesRequest(name: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideSubshapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideSubshapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideSubshapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideSubshapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideSubshapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesApiInfo() {
        let expectation = self.expectation(description: "testgetSlidesApiInfo")
        TestUtils.initialize("getSlidesApiInfo") { (response, error) -> Void in
            SlidesAPI.getSlidesApiInfo() { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesDocument() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        let request = GetSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        TestUtils.initialize("getSlidesDocument") { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var request = GetSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var request = GetSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var request = GetSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var request = GetSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesDocumentProperties() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        let request = GetSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesDocumentProperties") { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var request = GetSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var request = GetSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var request = GetSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var request = GetSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesDocumentProperty() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        let request = GetSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesDocumentProperty") { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = GetSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = GetSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.propertyName = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", value: request.propertyName as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "propertyName", request.propertyName) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "propertyName", parameterValue: request.propertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = GetSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = GetSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = GetSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesImageWithDefaultFormat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        let request = GetSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesImageWithDefaultFormat") { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = GetSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidIndex() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = GetSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.index = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", value: request.index as Any, type: "Int")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "index", request.index) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "index", parameterValue: request.index as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = GetSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = GetSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithDefaultFormatInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = GetSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesImageWithFormat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        let request = GetSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesImageWithFormat") { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = GetSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidIndex() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = GetSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.index = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "index", value: request.index as Any, type: "Int")
        TestUtils.initialize("getSlidesImageWithFormat", "index", request.index) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "index", parameterValue: request.index as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = GetSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "format", request.format) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = GetSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = GetSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImageWithFormatInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = GetSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesImages() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        let request = GetSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesImages") { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImagesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var request = GetSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImagesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var request = GetSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImagesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var request = GetSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesImagesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var request = GetSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesPlaceholder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        let request = GetSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesPlaceholder") { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = GetSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = GetSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholder", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidPlaceholderIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = GetSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.placeholderIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", value: request.placeholderIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholder", "placeholderIndex", request.placeholderIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "placeholderIndex", parameterValue: request.placeholderIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = GetSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = GetSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholderInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = GetSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesPlaceholders() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        let request = GetSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesPlaceholders") { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = GetSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = GetSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholders", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = GetSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = GetSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPlaceholdersInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = GetSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesPresentationTextItems() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        let request = GetSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesPresentationTextItems") { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = GetSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidWithEmpty() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = GetSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.withEmpty = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", value: request.withEmpty as Any, type: "Bool")
        TestUtils.initialize("getSlidesPresentationTextItems", "withEmpty", request.withEmpty) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "withEmpty", parameterValue: request.withEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = GetSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = GetSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesPresentationTextItemsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = GetSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlide() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        let request = GetSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlide") { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = GetSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = GetSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = GetSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = GetSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = GetSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideBackground() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        let request = GetSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = GetSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = GetSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideBackground", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = GetSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = GetSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = GetSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideComments() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        let request = GetSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlideComments") { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = GetSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = GetSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideComments", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = GetSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = GetSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideCommentsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = GetSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideImages() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        let request = GetSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlideImages") { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = GetSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = GetSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideImages", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = GetSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = GetSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideImagesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = GetSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlideTextItems() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        let request = GetSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlideTextItems") { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = GetSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = GetSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideTextItems", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidWithEmpty() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = GetSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.withEmpty = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", value: request.withEmpty as Any, type: "Bool")
        TestUtils.initialize("getSlidesSlideTextItems", "withEmpty", request.withEmpty) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "withEmpty", parameterValue: request.withEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = GetSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = GetSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlideTextItemsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = GetSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesSlidesList() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        let request = GetSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlidesList") { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidesListInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var request = GetSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidesListInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var request = GetSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidesListInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var request = GetSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesSlidesListInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var request = GetSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesTheme() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        let request = GetSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesTheme") { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = GetSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = GetSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesTheme", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = GetSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = GetSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = GetSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesThemeColorScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        let request = GetSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesThemeColorScheme") { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = GetSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = GetSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeColorScheme", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = GetSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = GetSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeColorSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = GetSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesThemeFontScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        let request = GetSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesThemeFontScheme") { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = GetSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = GetSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeFontScheme", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = GetSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = GetSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFontSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = GetSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesThemeFormatScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        let request = GetSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesThemeFormatScheme") { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = GetSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = GetSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeFormatScheme", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = GetSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = GetSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesThemeFormatSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = GetSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlidesViewProperties() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        let request = GetSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesViewProperties") { (response, error) -> Void in
            SlidesAPI.getSlidesViewProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesViewPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        var request = GetSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesViewProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesViewProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesViewProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesViewPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        var request = GetSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesViewProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesViewProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesViewProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesViewPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        var request = GetSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesViewProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesViewProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesViewProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesViewPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlidesViewProperties")
        var request = GetSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesViewProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesViewProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesViewProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesViewProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapeParagraphPortion() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        let request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        TestUtils.initialize("getSubshapeParagraphPortion") { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortion")
        var request = GetSubshapeParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapeParagraphPortions() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        let request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        TestUtils.initialize("getSubshapeParagraphPortions") { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphPortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphPortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphPortions")
        var request = GetSubshapeParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphPortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphPortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphPortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveFile() {
        let expectation = self.expectation(description: "testmoveFile")
        let request = MoveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        TestUtils.initialize("moveFile") { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidSrcPath() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = MoveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.srcPath = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "srcPath", value: request.srcPath as Any, type: "String")
        TestUtils.initialize("moveFile", "srcPath", request.srcPath) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcPath", parameterValue: request.srcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidDestPath() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = MoveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.destPath = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "destPath", value: request.destPath as Any, type: "String")
        TestUtils.initialize("moveFile", "destPath", request.destPath) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destPath", parameterValue: request.destPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = MoveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.srcStorageName = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "srcStorageName", value: request.srcStorageName as Any, type: "String")
        TestUtils.initialize("moveFile", "srcStorageName", request.srcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcStorageName", parameterValue: request.srcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidDestStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = MoveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.destStorageName = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "destStorageName", value: request.destStorageName as Any, type: "String")
        TestUtils.initialize("moveFile", "destStorageName", request.destStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destStorageName", parameterValue: request.destStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidVersionId() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = MoveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("moveFile", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveFolder() {
        let expectation = self.expectation(description: "testmoveFolder")
        let request = MoveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        TestUtils.initialize("moveFolder") { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidSrcPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        var request = MoveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        request.srcPath = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "srcPath", value: request.srcPath as Any, type: "String")
        TestUtils.initialize("moveFolder", "srcPath", request.srcPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcPath", parameterValue: request.srcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidDestPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        var request = MoveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        request.destPath = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "destPath", value: request.destPath as Any, type: "String")
        TestUtils.initialize("moveFolder", "destPath", request.destPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destPath", parameterValue: request.destPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        var request = MoveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        request.srcStorageName = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "srcStorageName", value: request.srcStorageName as Any, type: "String")
        TestUtils.initialize("moveFolder", "srcStorageName", request.srcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcStorageName", parameterValue: request.srcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidDestStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        var request = MoveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        request.destStorageName = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "destStorageName", value: request.destStorageName as Any, type: "String")
        TestUtils.initialize("moveFolder", "destStorageName", request.destStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destStorageName", parameterValue: request.destStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testObjectExists() {
        let expectation = self.expectation(description: "testobjectExists")
        let request = ObjectExistsRequest(path: TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String"))
        TestUtils.initialize("objectExists") { (response, error) -> Void in
            SlidesAPI.objectExists(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidPath() {
        let expectation = self.expectation(description: "testobjectExists")
        var request = ObjectExistsRequest(path: TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("objectExists", "path", request.path) { (response, error) -> Void in
            SlidesAPI.objectExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidStorageName() {
        let expectation = self.expectation(description: "testobjectExists")
        var request = ObjectExistsRequest(path: TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("objectExists", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.objectExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidVersionId() {
        let expectation = self.expectation(description: "testobjectExists")
        var request = ObjectExistsRequest(path: TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("objectExists", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.objectExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewParagraph() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        let request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewParagraph") { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("postAddNewParagraph", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = PostAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewPortion() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        let request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewPortion") { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("postAddNewPortion", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewPortionInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = PostAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewShape() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        let request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewShape") { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("postAddNewShape", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.shapeToClone = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "shapeToClone", value: request.shapeToClone as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "shapeToClone", request.shapeToClone) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "shapeToClone", parameterValue: request.shapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewShapeInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = PostAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewSubshape() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        let request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewSubshape") { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("postAddNewSubshape", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewSubshape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.shapeToClone = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", value: request.shapeToClone as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshape", "shapeToClone", request.shapeToClone) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "shapeToClone", parameterValue: request.shapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewSubshape")
        var request = PostAddNewSubshapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewSubshape", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshape", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshape", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshape", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewSubshapeParagraph() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        let request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("postAddNewSubshapeParagraph", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapeParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewSubshapeParagraph")
        var request = PostAddNewSubshapeParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapeParagraph", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapeParagraph", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapeParagraph", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNewSubshapePortion() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        let request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewSubshapePortion") { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidName() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidPath() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("postAddNewSubshapePortion", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewSubshapePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNewSubshapePortionInvalidPosition() {
        let expectation = self.expectation(description: "testpostAddNewSubshapePortion")
        var request = PostAddNewSubshapePortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewSubshapePortion", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewSubshapePortion", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewSubshapePortion", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewSubshapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewSubshapePortion", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostAddNotesSlide() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        let request = PostAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        TestUtils.initialize("postAddNotesSlide") { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = PostAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = PostAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidDto() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = PostAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "dto", value: request.dto as Any, type: "NotesSlide")
        TestUtils.initialize("postAddNotesSlide", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = PostAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = PostAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostAddNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = PostAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostChartSeries() {
        let expectation = self.expectation(description: "testpostChartSeries")
        let request = PostChartSeriesRequest(name: TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String"))
        TestUtils.initialize("postChartSeries") { (response, error) -> Void in
            SlidesAPI.postChartSeries(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var request = PostChartSeriesRequest(name: TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postChartSeries", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var request = PostChartSeriesRequest(name: TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postChartSeries", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var request = PostChartSeriesRequest(name: TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postChartSeries", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidSeries() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var request = PostChartSeriesRequest(name: TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String"))
        request.series = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "series", value: request.series as Any, type: "Series")
        TestUtils.initialize("postChartSeries", "series", request.series) { (response, error) -> Void in
            SlidesAPI.postChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "series", parameterValue: request.series as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var request = PostChartSeriesRequest(name: TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postChartSeries", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var request = PostChartSeriesRequest(name: TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postChartSeries", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testpostChartSeries")
        var request = PostChartSeriesRequest(name: TestUtils.getTestValue(functionName: "postChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postChartSeries", name: "shapeIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "postChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "postChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postChartSeries", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postChartSeries", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postChartSeries", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postChartSeries", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostCopyLayoutSlideFromSourcePresentation() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        let request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation") { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidName() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFrom() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFrom = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", value: request.cloneFrom as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", request.cloneFrom) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFrom", parameterValue: request.cloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromPosition = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", value: request.cloneFromPosition as Any, type: "Int")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", request.cloneFromPosition) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromPosition", parameterValue: request.cloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromPassword = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", value: request.cloneFromPassword as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", request.cloneFromPassword) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromPassword", parameterValue: request.cloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromStorage = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", value: request.cloneFromStorage as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", request.cloneFromStorage) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromStorage", parameterValue: request.cloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidPassword() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidFolder() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyLayoutSlideFromSourcePresentationInvalidStorage() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = PostCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostCopyMasterSlideFromSourcePresentation() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        let request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation") { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidName() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidCloneFrom() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFrom = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", value: request.cloneFrom as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFrom", request.cloneFrom) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFrom", parameterValue: request.cloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromPosition = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", value: request.cloneFromPosition as Any, type: "Int")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", request.cloneFromPosition) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromPosition", parameterValue: request.cloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromPassword = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", value: request.cloneFromPassword as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", request.cloneFromPassword) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromPassword", parameterValue: request.cloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromStorage = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", value: request.cloneFromStorage as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", request.cloneFromStorage) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromStorage", parameterValue: request.cloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidApplyToAll() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.applyToAll = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", value: request.applyToAll as Any, type: "Bool")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "applyToAll", request.applyToAll) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "applyToAll", parameterValue: request.applyToAll as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidPassword() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidFolder() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostCopyMasterSlideFromSourcePresentationInvalidStorage() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = PostCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostGetNotesSlide() {
        let expectation = self.expectation(description: "testpostGetNotesSlide")
        let request = PostGetNotesSlideRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "slideIndex", type: "Int"), document: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "password", type: "String"))
        TestUtils.initialize("postGetNotesSlide") { (response, error) -> Void in
            SlidesAPI.postGetNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostGetNotesSlide")
        var request = PostGetNotesSlideRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "slideIndex", type: "Int"), document: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "password", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideInvalidDocument() {
        let expectation = self.expectation(description: "testpostGetNotesSlide")
        var request = PostGetNotesSlideRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "slideIndex", type: "Int"), document: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "password", type: "String"))
        request.document = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlide", name: "document", value: request.document as Any, type: "Data")
        TestUtils.initialize("postGetNotesSlide", "document", request.document) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlide", parameterName: "document", parameterValue: request.document as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testpostGetNotesSlide")
        var request = PostGetNotesSlideRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "slideIndex", type: "Int"), document: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postGetNotesSlide", name: "password", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postGetNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostGetNotesSlideExists() {
        let expectation = self.expectation(description: "testpostGetNotesSlideExists")
        let request = PostGetNotesSlideExistsRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", type: "Int"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "password", type: "String"))
        TestUtils.initialize("postGetNotesSlideExists") { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideExists(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideExistsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostGetNotesSlideExists")
        var request = PostGetNotesSlideExistsRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", type: "Int"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "password", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlideExists", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideExists", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideExistsInvalidDocument() {
        let expectation = self.expectation(description: "testpostGetNotesSlideExists")
        var request = PostGetNotesSlideExistsRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", type: "Int"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "password", type: "String"))
        request.document = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideExists", name: "document", value: request.document as Any, type: "Data")
        TestUtils.initialize("postGetNotesSlideExists", "document", request.document) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideExists", parameterName: "document", parameterValue: request.document as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideExistsInvalidPassword() {
        let expectation = self.expectation(description: "testpostGetNotesSlideExists")
        var request = PostGetNotesSlideExistsRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "slideIndex", type: "Int"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideExists", name: "password", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideExists", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postGetNotesSlideExists", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideExists", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostGetNotesSlideWithFormat() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        let request = PostGetNotesSlideWithFormatRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data"), width: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postGetNotesSlideWithFormat") { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideWithFormat(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var request = PostGetNotesSlideWithFormatRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data"), width: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlideWithFormat", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidFormat() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var request = PostGetNotesSlideWithFormatRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data"), width: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postGetNotesSlideWithFormat", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidDocument() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var request = PostGetNotesSlideWithFormatRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data"), width: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.document = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", value: request.document as Any, type: "Data")
        TestUtils.initialize("postGetNotesSlideWithFormat", "document", request.document) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "document", parameterValue: request.document as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidWidth() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var request = PostGetNotesSlideWithFormatRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data"), width: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlideWithFormat", "width", request.width) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidHeight() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var request = PostGetNotesSlideWithFormatRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data"), width: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("postGetNotesSlideWithFormat", "height", request.height) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidPassword() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var request = PostGetNotesSlideWithFormatRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data"), width: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postGetNotesSlideWithFormat", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostGetNotesSlideWithFormatInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostGetNotesSlideWithFormat")
        var request = PostGetNotesSlideWithFormatRequest(slideIndex: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "document", type: "Data"), width: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postGetNotesSlideWithFormat", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postGetNotesSlideWithFormat", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postGetNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postGetNotesSlideWithFormat", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostNotesSlideAddNewParagraph() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        let request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        TestUtils.initialize("postNotesSlideAddNewParagraph") { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidName() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidDto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = PostNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostNotesSlideAddNewPortion() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        let request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        TestUtils.initialize("postNotesSlideAddNewPortion") { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidName() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidDto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("postNotesSlideAddNewPortion", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidPassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidStorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewPortionInvalidPosition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = PostNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostNotesSlideAddNewShape() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        let request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        TestUtils.initialize("postNotesSlideAddNewShape") { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidName() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidDto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("postNotesSlideAddNewShape", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidPassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidStorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.shapeToClone = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", value: request.shapeToClone as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "shapeToClone", request.shapeToClone) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "shapeToClone", parameterValue: request.shapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideAddNewShapeInvalidPosition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = PostNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostNotesSlideShapeSaveAs() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        let request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postNotesSlideShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostNotesSlideShapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = PostNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostPresentationMerge() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        let request = PostPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        TestUtils.initialize("postPresentationMerge") { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidName() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = PostPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidRequest() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = PostPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.request = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "request", value: request.request as Any, type: "PresentationsMergeRequest")
        TestUtils.initialize("postPresentationMerge", "request", request.request) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "request", parameterValue: request.request as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidPassword() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = PostPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidStorage() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = PostPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostPresentationMergeInvalidFolder() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = PostPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostShapeSaveAs() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        let request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postShapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postShapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("postShapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("postShapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("postShapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostShapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = PostShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideAnimationEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        let request = PostSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        TestUtils.initialize("postSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = PostSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = PostSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = PostSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.effect = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "effect", value: request.effect as Any, type: "Effect")
        TestUtils.initialize("postSlideAnimationEffect", "effect", request.effect) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "effect", parameterValue: request.effect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = PostSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = PostSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = PostSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        let request = PostSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        TestUtils.initialize("postSlideAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = PostSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = PostSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidSequence() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = PostSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.sequence = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", value: request.sequence as Any, type: "InteractiveSequence")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "sequence", request.sequence) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "sequence", parameterValue: request.sequence as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = PostSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = PostSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = PostSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        let request = PostSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = PostSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = PostSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = PostSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.sequenceIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: request.sequenceIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request.sequenceIndex) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: request.sequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = PostSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.effect = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", value: request.effect as Any, type: "Effect")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "effect", request.effect) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: request.effect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = PostSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = PostSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = PostSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlideSaveAs() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        let request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSlideSaveAs") { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("postSlideSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidWidth() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "width", request.width) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidHeight() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "height", request.height) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlideSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = PostSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesAdd() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        let request = PostSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        TestUtils.initialize("postSlidesAdd") { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = PostSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidPosition() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = PostSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postSlidesAdd", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = PostSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = PostSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = PostSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesAddInvalidLayoutAlias() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = PostSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.layoutAlias = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "layoutAlias", value: request.layoutAlias as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "layoutAlias", request.layoutAlias) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "layoutAlias", parameterValue: request.layoutAlias as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesConvert() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        let request = PostSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSlidesConvert") { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidFormat() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var request = PostSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidDocument() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var request = PostSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        request.document = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "document", value: request.document as Any, type: "Data")
        TestUtils.initialize("postSlidesConvert", "document", request.document) { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "document", parameterValue: request.document as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var request = PostSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesConvertInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var request = PostSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesCopy() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        let request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesCopy") { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidSlideToCopy() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.slideToCopy = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "slideToCopy", value: request.slideToCopy as Any, type: "Int")
        TestUtils.initialize("postSlidesCopy", "slideToCopy", request.slideToCopy) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "slideToCopy", parameterValue: request.slideToCopy as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidPosition() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postSlidesCopy", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidSource() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.source = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "source", value: request.source as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "source", request.source) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "source", parameterValue: request.source as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidSourcePassword() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.sourcePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "sourcePassword", value: request.sourcePassword as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "sourcePassword", request.sourcePassword) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "sourcePassword", parameterValue: request.sourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidSourceStorage() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.sourceStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "sourceStorage", value: request.sourceStorage as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "sourceStorage", request.sourceStorage) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "sourceStorage", parameterValue: request.sourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesCopyInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = PostSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocument() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        let request = PostSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        TestUtils.initialize("postSlidesDocument") { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = PostSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidData() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = PostSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.data = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "data", value: request.data as Any, type: "Data")
        TestUtils.initialize("postSlidesDocument", "data", request.data) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "data", parameterValue: request.data as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidInputPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = PostSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.inputPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "inputPassword", value: request.inputPassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "inputPassword", request.inputPassword) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "inputPassword", parameterValue: request.inputPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = PostSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = PostSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = PostSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocumentFromHtml() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        let request = PostSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        TestUtils.initialize("postSlidesDocumentFromHtml") { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = PostSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidHtml() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = PostSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.html = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", value: request.html as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "html", request.html) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "html", parameterValue: request.html as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = PostSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = PostSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromHtmlInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = PostSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocumentFromSource() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        let request = PostSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        TestUtils.initialize("postSlidesDocumentFromSource") { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = PostSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidSourcePath() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = PostSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.sourcePath = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", value: request.sourcePath as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourcePath", request.sourcePath) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourcePath", parameterValue: request.sourcePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidSourcePassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = PostSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.sourcePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", value: request.sourcePassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourcePassword", request.sourcePassword) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourcePassword", parameterValue: request.sourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidSourceStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = PostSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.sourceStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", value: request.sourceStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourceStorage", request.sourceStorage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourceStorage", parameterValue: request.sourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = PostSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = PostSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromSourceInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = PostSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesDocumentFromTemplate() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        let request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        TestUtils.initialize("postSlidesDocumentFromTemplate") { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidTemplatePath() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.templatePath = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", value: request.templatePath as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templatePath", request.templatePath) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templatePath", parameterValue: request.templatePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidData() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.data = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", value: request.data as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "data", request.data) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "data", parameterValue: request.data as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidTemplatePassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.templatePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", value: request.templatePassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templatePassword", request.templatePassword) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templatePassword", parameterValue: request.templatePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidTemplateStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.templateStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", value: request.templateStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templateStorage", request.templateStorage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templateStorage", parameterValue: request.templateStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidIsImageDataEmbedded() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.isImageDataEmbedded = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", value: request.isImageDataEmbedded as Any, type: "Bool")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "isImageDataEmbedded", request.isImageDataEmbedded) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "isImageDataEmbedded", parameterValue: request.isImageDataEmbedded as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesDocumentFromTemplateInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = PostSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesPipeline() {
        let expectation = self.expectation(description: "testpostSlidesPipeline")
        let request = PostSlidesPipelineRequest(pipeline: TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "pipeline", type: "Pipeline"))
        TestUtils.initialize("postSlidesPipeline") { (response, error) -> Void in
            SlidesAPI.postSlidesPipeline(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPipelineInvalidPipeline() {
        let expectation = self.expectation(description: "testpostSlidesPipeline")
        var request = PostSlidesPipelineRequest(pipeline: TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "pipeline", type: "Pipeline"))
        request.pipeline = TestUtils.getInvalidTestValue(functionName: "postSlidesPipeline", name: "pipeline", value: request.pipeline as Any, type: "Pipeline")
        TestUtils.initialize("postSlidesPipeline", "pipeline", request.pipeline) { (response, error) -> Void in
            SlidesAPI.postSlidesPipeline(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPipeline", parameterName: "pipeline", parameterValue: request.pipeline as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesPresentationReplaceText() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        let request = PostSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesPresentationReplaceText") { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = PostSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidOldValue() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = PostSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.oldValue = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", value: request.oldValue as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "oldValue", request.oldValue) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "oldValue", parameterValue: request.oldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidNewValue() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = PostSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.newValue = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", value: request.newValue as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "newValue", request.newValue) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "newValue", parameterValue: request.newValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = PostSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.ignoreCase = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", value: request.ignoreCase as Any, type: "Bool")
        TestUtils.initialize("postSlidesPresentationReplaceText", "ignoreCase", request.ignoreCase) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "ignoreCase", parameterValue: request.ignoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = PostSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = PostSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesPresentationReplaceTextInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = PostSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesReorder() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        let request = PostSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesReorder") { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = PostSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = PostSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlidesReorder", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidNewPosition() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = PostSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.newPosition = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "newPosition", value: request.newPosition as Any, type: "Int")
        TestUtils.initialize("postSlidesReorder", "newPosition", request.newPosition) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "newPosition", parameterValue: request.newPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = PostSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = PostSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = PostSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesReorderMany() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        let request = PostSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesReorderMany") { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = PostSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidOldPositions() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = PostSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.oldPositions = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", value: request.oldPositions as Any, type: "[Int]")
        TestUtils.initialize("postSlidesReorderMany", "oldPositions", request.oldPositions) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "oldPositions", parameterValue: request.oldPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidNewPositions() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = PostSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.newPositions = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "newPositions", value: request.newPositions as Any, type: "[Int]")
        TestUtils.initialize("postSlidesReorderMany", "newPositions", request.newPositions) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "newPositions", parameterValue: request.newPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = PostSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = PostSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesReorderManyInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = PostSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesSaveAs() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        let request = PostSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSlidesSaveAs") { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = PostSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = PostSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = PostSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("postSlidesSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = PostSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = PostSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = PostSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = PostSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesSetDocumentProperties() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        let request = PostSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesSetDocumentProperties") { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = PostSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidProperties() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = PostSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.properties = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", value: request.properties as Any, type: "DocumentProperties")
        TestUtils.initialize("postSlidesSetDocumentProperties", "properties", request.properties) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "properties", parameterValue: request.properties as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = PostSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = PostSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSetDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = PostSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesSlideReplaceText() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        let request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesSlideReplaceText") { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlidesSlideReplaceText", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidOldValue() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.oldValue = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", value: request.oldValue as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "oldValue", request.oldValue) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "oldValue", parameterValue: request.oldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidNewValue() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.newValue = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", value: request.newValue as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "newValue", request.newValue) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "newValue", parameterValue: request.newValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.ignoreCase = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", value: request.ignoreCase as Any, type: "Bool")
        TestUtils.initialize("postSlidesSlideReplaceText", "ignoreCase", request.ignoreCase) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "ignoreCase", parameterValue: request.ignoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSlideReplaceTextInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = PostSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSlidesSplit() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        let request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSlidesSplit") { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidName() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidOptions() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("postSlidesSplit", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidFormat() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidWidth() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "width", request.width) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidHeight() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "height", request.height) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidTo() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.to = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "to", value: request.to as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "to", request.to) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "to", parameterValue: request.to as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidFrom() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.from = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "from", value: request.from as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "from", request.from) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "from", parameterValue: request.from as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidDestFolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.destFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "destFolder", value: request.destFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "destFolder", request.destFolder) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "destFolder", parameterValue: request.destFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidPassword() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidStorage() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidFolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSlidesSplitInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = PostSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPostSubshapeSaveAs() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        let request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSubshapeSaveAs") { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSubshapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidPath() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postSubshapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("postSubshapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("postSubshapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("postSubshapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPostSubshapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testpostSubshapeSaveAs")
        var request = PostSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSubshapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSubshapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSubshapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutChartSeries() {
        let expectation = self.expectation(description: "testputChartSeries")
        let request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        TestUtils.initialize("putChartSeries") { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testputChartSeries")
        var request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putChartSeries", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputChartSeries")
        var request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putChartSeries", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputChartSeries")
        var request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putChartSeries", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testputChartSeries")
        var request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        request.seriesIndex = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "seriesIndex", value: request.seriesIndex as Any, type: "Int")
        TestUtils.initialize("putChartSeries", "seriesIndex", request.seriesIndex) { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "seriesIndex", parameterValue: request.seriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidSeries() {
        let expectation = self.expectation(description: "testputChartSeries")
        var request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        request.series = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "series", value: request.series as Any, type: "Series")
        TestUtils.initialize("putChartSeries", "series", request.series) { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "series", parameterValue: request.series as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testputChartSeries")
        var request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putChartSeries", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testputChartSeries")
        var request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putChartSeries", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testputChartSeries")
        var request = PutChartSeriesRequest(name: TestUtils.getTestValue(functionName: "putChartSeries", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "shapeIndex", type: "Int"), seriesIndex: TestUtils.getTestValue(functionName: "putChartSeries", name: "seriesIndex", type: "Int"), series: TestUtils.getTestValue(functionName: "putChartSeries", name: "series", type: "Series"), password: TestUtils.getTestValue(functionName: "putChartSeries", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putChartSeries", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putChartSeries", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putChartSeries", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putChartSeries", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putChartSeries(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putChartSeries", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutLayoutSlide() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        let request = PutLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        TestUtils.initialize("putLayoutSlide") { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = PutLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = PutLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putLayoutSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidSlideDto() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = PutLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.slideDto = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "slideDto", value: request.slideDto as Any, type: "LayoutSlide")
        TestUtils.initialize("putLayoutSlide", "slideDto", request.slideDto) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "slideDto", parameterValue: request.slideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = PutLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = PutLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = PutLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutNotesSlideShapeSaveAs() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        let request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putNotesSlideShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutNotesSlideShapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = PutNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutPresentationMerge() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        let request = PutPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        TestUtils.initialize("putPresentationMerge") { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidName() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = PutPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidRequest() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = PutPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.request = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "request", value: request.request as Any, type: "OrderedMergeRequest")
        TestUtils.initialize("putPresentationMerge", "request", request.request) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "request", parameterValue: request.request as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidPassword() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = PutPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidStorage() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = PutPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutPresentationMergeInvalidFolder() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = PutPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSetParagraphPortionProperties() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        let request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        TestUtils.initialize("putSetParagraphPortionProperties") { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidPortionIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("putSetParagraphPortionProperties", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPortionPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = PutSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSetParagraphProperties() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        let request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        TestUtils.initialize("putSetParagraphProperties") { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("putSetParagraphProperties", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetParagraphPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = PutSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSetSubshapeParagraphPortionProperties() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        let request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties") { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidPath() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidPortionIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPortionPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphPortionProperties")
        var request = PutSetSubshapeParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphPortionProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphPortionProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphPortionProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSetSubshapeParagraphProperties() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        let request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        TestUtils.initialize("putSetSubshapeParagraphProperties") { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidPath() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSetSubshapeParagraphPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSetSubshapeParagraphProperties")
        var request = PutSetSubshapeParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSetSubshapeParagraphProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSetSubshapeParagraphProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSetSubshapeParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetSubshapeParagraphProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutShapeSaveAs() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        let request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putShapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putShapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("putShapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("putShapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("putShapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutShapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = PutShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideAnimation() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        let request = PutSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        TestUtils.initialize("putSlideAnimation") { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = PutSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = PutSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimation", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidAnimation() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = PutSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.animation = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "animation", value: request.animation as Any, type: "SlideAnimation")
        TestUtils.initialize("putSlideAnimation", "animation", request.animation) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "animation", parameterValue: request.animation as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = PutSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = PutSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = PutSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideAnimationEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        let request = PutSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        TestUtils.initialize("putSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = PutSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = PutSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = PutSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.effectIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", value: request.effectIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationEffect", "effectIndex", request.effectIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "effectIndex", parameterValue: request.effectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = PutSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.effect = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "effect", value: request.effect as Any, type: "Effect")
        TestUtils.initialize("putSlideAnimationEffect", "effect", request.effect) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "effect", parameterValue: request.effect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = PutSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = PutSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = PutSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        let request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.sequenceIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: request.sequenceIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request.sequenceIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: request.sequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.effectIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", value: request.effectIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "effectIndex", request.effectIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: request.effectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.effect = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", value: request.effect as Any, type: "Effect")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "effect", request.effect) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: request.effect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = PutSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideSaveAs() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        let request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putSlideSaveAs") { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("putSlideSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidWidth() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "width", request.width) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidHeight() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "height", request.height) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = PutSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideShapeInfo() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        let request = PutSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        TestUtils.initialize("putSlideShapeInfo") { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidName() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = PutSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = PutSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideShapeInfo", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = PutSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSlideShapeInfo", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidDto() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = PutSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("putSlideShapeInfo", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = PutSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = PutSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideShapeInfoInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = PutSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlideSubshapeInfo() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        let request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        TestUtils.initialize("putSlideSubshapeInfo") { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidName() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideSubshapeInfo", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidPath() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSlideSubshapeInfo", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidDto() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("putSlideSubshapeInfo", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidPassword() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidFolder() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlideSubshapeInfoInvalidStorage() {
        let expectation = self.expectation(description: "testputSlideSubshapeInfo")
        var request = PutSlideSubshapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSubshapeInfo", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideSubshapeInfo", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideSubshapeInfo", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideSubshapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSubshapeInfo", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesConvert() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        let request = PutSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putSlidesConvert") { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidFormat() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = PutSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidOutPath() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = PutSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidDocument() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = PutSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.document = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "document", value: request.document as Any, type: "Data")
        TestUtils.initialize("putSlidesConvert", "document", request.document) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "document", parameterValue: request.document as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = PutSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesConvertInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = PutSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesDocumentFromHtml() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        let request = PutSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        TestUtils.initialize("putSlidesDocumentFromHtml") { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidName() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = PutSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidHtml() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = PutSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.html = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", value: request.html as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "html", request.html) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "html", parameterValue: request.html as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = PutSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = PutSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesDocumentFromHtmlInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = PutSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSaveAs() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        let request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putSlidesSaveAs") { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("putSlidesSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = PutSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSetDocumentProperty() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        let request = PutSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesSetDocumentProperty") { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = PutSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = PutSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.propertyName = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", value: request.propertyName as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "propertyName", request.propertyName) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "propertyName", parameterValue: request.propertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidProperty() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = PutSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.property = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", value: request.property as Any, type: "DocumentProperty")
        TestUtils.initialize("putSlidesSetDocumentProperty", "property", request.property) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "property", parameterValue: request.property as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = PutSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = PutSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSetDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = PutSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlide() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        let request = PutSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesSlide") { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = PutSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = PutSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidSlideDto() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = PutSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.slideDto = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "slideDto", value: request.slideDto as Any, type: "Slide")
        TestUtils.initialize("putSlidesSlide", "slideDto", request.slideDto) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "slideDto", parameterValue: request.slideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = PutSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = PutSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = PutSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlideBackground() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        let request = PutSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = PutSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = PutSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideBackground", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidBackground() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = PutSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.background = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "background", value: request.background as Any, type: "SlideBackground")
        TestUtils.initialize("putSlidesSlideBackground", "background", request.background) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "background", parameterValue: request.background as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = PutSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = PutSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = PutSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlideBackgroundColor() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        let request = PutSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesSlideBackgroundColor") { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = PutSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = PutSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidColor() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = PutSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.color = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", value: request.color as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "color", request.color) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "color", parameterValue: request.color as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = PutSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = PutSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideBackgroundColorInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = PutSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesSlideSize() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        let request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        TestUtils.initialize("putSlidesSlideSize") { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidName() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidWidth() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideSize", "width", request.width) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidHeight() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideSize", "height", request.height) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidSizeType() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.sizeType = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "sizeType", value: request.sizeType as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "sizeType", request.sizeType) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "sizeType", parameterValue: request.sizeType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesSlideSizeInvalidScaleType() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = PutSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.scaleType = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "scaleType", value: request.scaleType as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "scaleType", request.scaleType) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "scaleType", parameterValue: request.scaleType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSlidesViewProperties() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        let request = PutSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String"), dto: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties"), password: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesViewProperties") { (response, error) -> Void in
            SlidesAPI.putSlidesViewProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidName() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var request = PutSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String"), dto: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties"), password: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesViewProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var request = PutSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String"), dto: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties"), password: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "dto", value: request.dto as Any, type: "ViewProperties")
        TestUtils.initialize("putSlidesViewProperties", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var request = PutSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String"), dto: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties"), password: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesViewProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var request = PutSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String"), dto: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties"), password: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesViewProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSlidesViewPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testputSlidesViewProperties")
        var request = PutSlidesViewPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "name", type: "String"), dto: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "dto", type: "ViewProperties"), password: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesViewProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesViewProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesViewProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesViewProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesViewProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutSubshapeSaveAs() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        let request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putSubshapeSaveAs") { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidName() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSubshapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidPath() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSubshapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidFormat() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidOutPath() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidOptions() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("putSubshapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidPassword() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidFolder() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidStorage() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidScaleX() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("putSubshapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidScaleY() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("putSubshapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidBounds() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutSubshapeSaveAsInvalidFontsFolder() {
        let expectation = self.expectation(description: "testputSubshapeSaveAs")
        var request = PutSubshapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putSubshapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putSubshapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putSubshapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSubshapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutUpdateNotesSlide() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        let request = PutUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        TestUtils.initialize("putUpdateNotesSlide") { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = PutUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = PutUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidDto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = PutUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "dto", value: request.dto as Any, type: "NotesSlide")
        TestUtils.initialize("putUpdateNotesSlide", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = PutUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = PutUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = PutUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutUpdateNotesSlideShape() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        let request = PutUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("putUpdateNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = PutUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = PutUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = PutUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidDto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = PutUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("putUpdateNotesSlideShape", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = PutUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = PutUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = PutUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutUpdateNotesSlideShapeParagraph() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        let request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidDto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = PutUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPutUpdateNotesSlideShapePortion() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        let request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        TestUtils.initialize("putUpdateNotesSlideShapePortion") { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidName() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidDto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPutUpdateNotesSlideShapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = PutUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testStorageExists() {
        let expectation = self.expectation(description: "teststorageExists")
        let request = StorageExistsRequest(storageName: TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String"))
        TestUtils.initialize("storageExists") { (response, error) -> Void in
            SlidesAPI.storageExists(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testStorageExistsInvalidStorageName() {
        let expectation = self.expectation(description: "teststorageExists")
        var request = StorageExistsRequest(storageName: TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "storageExists", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("storageExists", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.storageExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "storageExists", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUploadFile() {
        let expectation = self.expectation(description: "testuploadFile")
        let request = UploadFileRequest(path: TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String"), file: TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data"), storageName: TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String"))
        TestUtils.initialize("uploadFile") { (response, error) -> Void in
            SlidesAPI.uploadFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidPath() {
        let expectation = self.expectation(description: "testuploadFile")
        var request = UploadFileRequest(path: TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String"), file: TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data"), storageName: TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("uploadFile", "path", request.path) { (response, error) -> Void in
            SlidesAPI.uploadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidFile() {
        let expectation = self.expectation(description: "testuploadFile")
        var request = UploadFileRequest(path: TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String"), file: TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data"), storageName: TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String"))
        request.file = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "file", value: request.file as Any, type: "Data")
        TestUtils.initialize("uploadFile", "file", request.file) { (response, error) -> Void in
            SlidesAPI.uploadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "file", parameterValue: request.file as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidStorageName() {
        let expectation = self.expectation(description: "testuploadFile")
        var request = UploadFileRequest(path: TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String"), file: TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data"), storageName: TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("uploadFile", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.uploadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
}
