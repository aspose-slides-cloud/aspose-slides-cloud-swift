/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2020 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


import XCTest
@testable import AsposeSlidesCloud

class SlidesAPITests : XCTestCase {
    static var allTests : [(String, (SlidesAPITests) -> () -> ())] = [
        ("testAlignShapes", testAlignShapes),
        ("testAlignShapesInvalidName", testAlignShapesInvalidName),
        ("testAlignShapesInvalidSlideIndex", testAlignShapesInvalidSlideIndex),
        ("testAlignShapesInvalidAlignmentType", testAlignShapesInvalidAlignmentType),
        ("testAlignShapesInvalidAlignToSlide", testAlignShapesInvalidAlignToSlide),
        ("testAlignShapesInvalidShapes", testAlignShapesInvalidShapes),
        ("testAlignShapesInvalidPassword", testAlignShapesInvalidPassword),
        ("testAlignShapesInvalidFolder", testAlignShapesInvalidFolder),
        ("testAlignShapesInvalidStorage", testAlignShapesInvalidStorage),
        ("testAlignShapesInvalidSubShape", testAlignShapesInvalidSubShape),
        ("testAlignSpecialSlideShapes", testAlignSpecialSlideShapes),
        ("testAlignSpecialSlideShapesInvalidName", testAlignSpecialSlideShapesInvalidName),
        ("testAlignSpecialSlideShapesInvalidSlideIndex", testAlignSpecialSlideShapesInvalidSlideIndex),
        ("testAlignSpecialSlideShapesInvalidSlideType", testAlignSpecialSlideShapesInvalidSlideType),
        ("testAlignSpecialSlideShapesInvalidAlignmentType", testAlignSpecialSlideShapesInvalidAlignmentType),
        ("testAlignSpecialSlideShapesInvalidAlignToSlide", testAlignSpecialSlideShapesInvalidAlignToSlide),
        ("testAlignSpecialSlideShapesInvalidShapes", testAlignSpecialSlideShapesInvalidShapes),
        ("testAlignSpecialSlideShapesInvalidPassword", testAlignSpecialSlideShapesInvalidPassword),
        ("testAlignSpecialSlideShapesInvalidFolder", testAlignSpecialSlideShapesInvalidFolder),
        ("testAlignSpecialSlideShapesInvalidStorage", testAlignSpecialSlideShapesInvalidStorage),
        ("testAlignSpecialSlideShapesInvalidSubShape", testAlignSpecialSlideShapesInvalidSubShape),
        ("testCompressEmbeddedFonts", testCompressEmbeddedFonts),
        ("testCompressEmbeddedFontsInvalidName", testCompressEmbeddedFontsInvalidName),
        ("testCompressEmbeddedFontsInvalidPassword", testCompressEmbeddedFontsInvalidPassword),
        ("testCompressEmbeddedFontsInvalidFolder", testCompressEmbeddedFontsInvalidFolder),
        ("testCompressEmbeddedFontsInvalidStorage", testCompressEmbeddedFontsInvalidStorage),
        ("testCompressEmbeddedFontsOnline", testCompressEmbeddedFontsOnline),
        ("testCompressEmbeddedFontsOnlineInvalidDocument", testCompressEmbeddedFontsOnlineInvalidDocument),
        ("testCompressEmbeddedFontsOnlineInvalidPassword", testCompressEmbeddedFontsOnlineInvalidPassword),
        ("testConvert", testConvert),
        ("testConvertInvalidDocument", testConvertInvalidDocument),
        ("testConvertInvalidFormat", testConvertInvalidFormat),
        ("testConvertInvalidPassword", testConvertInvalidPassword),
        ("testConvertInvalidStorage", testConvertInvalidStorage),
        ("testConvertInvalidFontsFolder", testConvertInvalidFontsFolder),
        ("testConvertInvalidSlides", testConvertInvalidSlides),
        ("testConvertInvalidOptions", testConvertInvalidOptions),
        ("testConvertAndSave", testConvertAndSave),
        ("testConvertAndSaveInvalidDocument", testConvertAndSaveInvalidDocument),
        ("testConvertAndSaveInvalidFormat", testConvertAndSaveInvalidFormat),
        ("testConvertAndSaveInvalidOutPath", testConvertAndSaveInvalidOutPath),
        ("testConvertAndSaveInvalidPassword", testConvertAndSaveInvalidPassword),
        ("testConvertAndSaveInvalidStorage", testConvertAndSaveInvalidStorage),
        ("testConvertAndSaveInvalidFontsFolder", testConvertAndSaveInvalidFontsFolder),
        ("testConvertAndSaveInvalidSlides", testConvertAndSaveInvalidSlides),
        ("testConvertAndSaveInvalidOptions", testConvertAndSaveInvalidOptions),
        ("testCopyFile", testCopyFile),
        ("testCopyFileInvalidSrcPath", testCopyFileInvalidSrcPath),
        ("testCopyFileInvalidDestPath", testCopyFileInvalidDestPath),
        ("testCopyFileInvalidSrcStorageName", testCopyFileInvalidSrcStorageName),
        ("testCopyFileInvalidDestStorageName", testCopyFileInvalidDestStorageName),
        ("testCopyFileInvalidVersionId", testCopyFileInvalidVersionId),
        ("testCopyFolder", testCopyFolder),
        ("testCopyFolderInvalidSrcPath", testCopyFolderInvalidSrcPath),
        ("testCopyFolderInvalidDestPath", testCopyFolderInvalidDestPath),
        ("testCopyFolderInvalidSrcStorageName", testCopyFolderInvalidSrcStorageName),
        ("testCopyFolderInvalidDestStorageName", testCopyFolderInvalidDestStorageName),
        ("testCopyLayoutSlide", testCopyLayoutSlide),
        ("testCopyLayoutSlideInvalidName", testCopyLayoutSlideInvalidName),
        ("testCopyLayoutSlideInvalidCloneFrom", testCopyLayoutSlideInvalidCloneFrom),
        ("testCopyLayoutSlideInvalidCloneFromPosition", testCopyLayoutSlideInvalidCloneFromPosition),
        ("testCopyLayoutSlideInvalidCloneFromPassword", testCopyLayoutSlideInvalidCloneFromPassword),
        ("testCopyLayoutSlideInvalidCloneFromStorage", testCopyLayoutSlideInvalidCloneFromStorage),
        ("testCopyLayoutSlideInvalidPassword", testCopyLayoutSlideInvalidPassword),
        ("testCopyLayoutSlideInvalidFolder", testCopyLayoutSlideInvalidFolder),
        ("testCopyLayoutSlideInvalidStorage", testCopyLayoutSlideInvalidStorage),
        ("testCopyMasterSlide", testCopyMasterSlide),
        ("testCopyMasterSlideInvalidName", testCopyMasterSlideInvalidName),
        ("testCopyMasterSlideInvalidCloneFrom", testCopyMasterSlideInvalidCloneFrom),
        ("testCopyMasterSlideInvalidCloneFromPosition", testCopyMasterSlideInvalidCloneFromPosition),
        ("testCopyMasterSlideInvalidCloneFromPassword", testCopyMasterSlideInvalidCloneFromPassword),
        ("testCopyMasterSlideInvalidCloneFromStorage", testCopyMasterSlideInvalidCloneFromStorage),
        ("testCopyMasterSlideInvalidApplyToAll", testCopyMasterSlideInvalidApplyToAll),
        ("testCopyMasterSlideInvalidPassword", testCopyMasterSlideInvalidPassword),
        ("testCopyMasterSlideInvalidFolder", testCopyMasterSlideInvalidFolder),
        ("testCopyMasterSlideInvalidStorage", testCopyMasterSlideInvalidStorage),
        ("testCopySlide", testCopySlide),
        ("testCopySlideInvalidName", testCopySlideInvalidName),
        ("testCopySlideInvalidSlideToCopy", testCopySlideInvalidSlideToCopy),
        ("testCopySlideInvalidPosition", testCopySlideInvalidPosition),
        ("testCopySlideInvalidSource", testCopySlideInvalidSource),
        ("testCopySlideInvalidSourcePassword", testCopySlideInvalidSourcePassword),
        ("testCopySlideInvalidSourceStorage", testCopySlideInvalidSourceStorage),
        ("testCopySlideInvalidPassword", testCopySlideInvalidPassword),
        ("testCopySlideInvalidFolder", testCopySlideInvalidFolder),
        ("testCopySlideInvalidStorage", testCopySlideInvalidStorage),
        ("testCreateAnimationEffect", testCreateAnimationEffect),
        ("testCreateAnimationEffectInvalidName", testCreateAnimationEffectInvalidName),
        ("testCreateAnimationEffectInvalidSlideIndex", testCreateAnimationEffectInvalidSlideIndex),
        ("testCreateAnimationEffectInvalidEffect", testCreateAnimationEffectInvalidEffect),
        ("testCreateAnimationEffectInvalidPassword", testCreateAnimationEffectInvalidPassword),
        ("testCreateAnimationEffectInvalidFolder", testCreateAnimationEffectInvalidFolder),
        ("testCreateAnimationEffectInvalidStorage", testCreateAnimationEffectInvalidStorage),
        ("testCreateAnimationInteractiveSequence", testCreateAnimationInteractiveSequence),
        ("testCreateAnimationInteractiveSequenceInvalidName", testCreateAnimationInteractiveSequenceInvalidName),
        ("testCreateAnimationInteractiveSequenceInvalidSlideIndex", testCreateAnimationInteractiveSequenceInvalidSlideIndex),
        ("testCreateAnimationInteractiveSequenceInvalidSequence", testCreateAnimationInteractiveSequenceInvalidSequence),
        ("testCreateAnimationInteractiveSequenceInvalidPassword", testCreateAnimationInteractiveSequenceInvalidPassword),
        ("testCreateAnimationInteractiveSequenceInvalidFolder", testCreateAnimationInteractiveSequenceInvalidFolder),
        ("testCreateAnimationInteractiveSequenceInvalidStorage", testCreateAnimationInteractiveSequenceInvalidStorage),
        ("testCreateAnimationInteractiveSequenceEffect", testCreateAnimationInteractiveSequenceEffect),
        ("testCreateAnimationInteractiveSequenceEffectInvalidName", testCreateAnimationInteractiveSequenceEffectInvalidName),
        ("testCreateAnimationInteractiveSequenceEffectInvalidSlideIndex", testCreateAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testCreateAnimationInteractiveSequenceEffectInvalidSequenceIndex", testCreateAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testCreateAnimationInteractiveSequenceEffectInvalidEffect", testCreateAnimationInteractiveSequenceEffectInvalidEffect),
        ("testCreateAnimationInteractiveSequenceEffectInvalidPassword", testCreateAnimationInteractiveSequenceEffectInvalidPassword),
        ("testCreateAnimationInteractiveSequenceEffectInvalidFolder", testCreateAnimationInteractiveSequenceEffectInvalidFolder),
        ("testCreateAnimationInteractiveSequenceEffectInvalidStorage", testCreateAnimationInteractiveSequenceEffectInvalidStorage),
        ("testCreateChartCategory", testCreateChartCategory),
        ("testCreateChartCategoryInvalidName", testCreateChartCategoryInvalidName),
        ("testCreateChartCategoryInvalidSlideIndex", testCreateChartCategoryInvalidSlideIndex),
        ("testCreateChartCategoryInvalidShapeIndex", testCreateChartCategoryInvalidShapeIndex),
        ("testCreateChartCategoryInvalidCategory", testCreateChartCategoryInvalidCategory),
        ("testCreateChartCategoryInvalidPassword", testCreateChartCategoryInvalidPassword),
        ("testCreateChartCategoryInvalidFolder", testCreateChartCategoryInvalidFolder),
        ("testCreateChartCategoryInvalidStorage", testCreateChartCategoryInvalidStorage),
        ("testCreateChartDataPoint", testCreateChartDataPoint),
        ("testCreateChartDataPointInvalidName", testCreateChartDataPointInvalidName),
        ("testCreateChartDataPointInvalidSlideIndex", testCreateChartDataPointInvalidSlideIndex),
        ("testCreateChartDataPointInvalidShapeIndex", testCreateChartDataPointInvalidShapeIndex),
        ("testCreateChartDataPointInvalidSeriesIndex", testCreateChartDataPointInvalidSeriesIndex),
        ("testCreateChartDataPointInvalidDataPoint", testCreateChartDataPointInvalidDataPoint),
        ("testCreateChartDataPointInvalidPassword", testCreateChartDataPointInvalidPassword),
        ("testCreateChartDataPointInvalidFolder", testCreateChartDataPointInvalidFolder),
        ("testCreateChartDataPointInvalidStorage", testCreateChartDataPointInvalidStorage),
        ("testCreateChartSeries", testCreateChartSeries),
        ("testCreateChartSeriesInvalidName", testCreateChartSeriesInvalidName),
        ("testCreateChartSeriesInvalidSlideIndex", testCreateChartSeriesInvalidSlideIndex),
        ("testCreateChartSeriesInvalidShapeIndex", testCreateChartSeriesInvalidShapeIndex),
        ("testCreateChartSeriesInvalidSeries", testCreateChartSeriesInvalidSeries),
        ("testCreateChartSeriesInvalidPassword", testCreateChartSeriesInvalidPassword),
        ("testCreateChartSeriesInvalidFolder", testCreateChartSeriesInvalidFolder),
        ("testCreateChartSeriesInvalidStorage", testCreateChartSeriesInvalidStorage),
        ("testCreateComment", testCreateComment),
        ("testCreateCommentInvalidName", testCreateCommentInvalidName),
        ("testCreateCommentInvalidSlideIndex", testCreateCommentInvalidSlideIndex),
        ("testCreateCommentInvalidDto", testCreateCommentInvalidDto),
        ("testCreateCommentInvalidShapeIndex", testCreateCommentInvalidShapeIndex),
        ("testCreateCommentInvalidPassword", testCreateCommentInvalidPassword),
        ("testCreateCommentInvalidFolder", testCreateCommentInvalidFolder),
        ("testCreateCommentInvalidStorage", testCreateCommentInvalidStorage),
        ("testCreateCommentOnline", testCreateCommentOnline),
        ("testCreateCommentOnlineInvalidDocument", testCreateCommentOnlineInvalidDocument),
        ("testCreateCommentOnlineInvalidSlideIndex", testCreateCommentOnlineInvalidSlideIndex),
        ("testCreateCommentOnlineInvalidDto", testCreateCommentOnlineInvalidDto),
        ("testCreateCommentOnlineInvalidShapeIndex", testCreateCommentOnlineInvalidShapeIndex),
        ("testCreateCommentOnlineInvalidPassword", testCreateCommentOnlineInvalidPassword),
        ("testCreateFolder", testCreateFolder),
        ("testCreateFolderInvalidPath", testCreateFolderInvalidPath),
        ("testCreateFolderInvalidStorageName", testCreateFolderInvalidStorageName),
        ("testCreateImageWatermark", testCreateImageWatermark),
        ("testCreateImageWatermarkInvalidName", testCreateImageWatermarkInvalidName),
        ("testCreateImageWatermarkInvalidImage", testCreateImageWatermarkInvalidImage),
        ("testCreateImageWatermarkInvalidPictureFrame", testCreateImageWatermarkInvalidPictureFrame),
        ("testCreateImageWatermarkInvalidPassword", testCreateImageWatermarkInvalidPassword),
        ("testCreateImageWatermarkInvalidFolder", testCreateImageWatermarkInvalidFolder),
        ("testCreateImageWatermarkInvalidStorage", testCreateImageWatermarkInvalidStorage),
        ("testCreateImageWatermarkOnline", testCreateImageWatermarkOnline),
        ("testCreateImageWatermarkOnlineInvalidDocument", testCreateImageWatermarkOnlineInvalidDocument),
        ("testCreateImageWatermarkOnlineInvalidImage", testCreateImageWatermarkOnlineInvalidImage),
        ("testCreateImageWatermarkOnlineInvalidPictureFrame", testCreateImageWatermarkOnlineInvalidPictureFrame),
        ("testCreateImageWatermarkOnlineInvalidPassword", testCreateImageWatermarkOnlineInvalidPassword),
        ("testCreateNotesSlide", testCreateNotesSlide),
        ("testCreateNotesSlideInvalidName", testCreateNotesSlideInvalidName),
        ("testCreateNotesSlideInvalidSlideIndex", testCreateNotesSlideInvalidSlideIndex),
        ("testCreateNotesSlideInvalidDto", testCreateNotesSlideInvalidDto),
        ("testCreateNotesSlideInvalidPassword", testCreateNotesSlideInvalidPassword),
        ("testCreateNotesSlideInvalidFolder", testCreateNotesSlideInvalidFolder),
        ("testCreateNotesSlideInvalidStorage", testCreateNotesSlideInvalidStorage),
        ("testCreateParagraph", testCreateParagraph),
        ("testCreateParagraphInvalidName", testCreateParagraphInvalidName),
        ("testCreateParagraphInvalidSlideIndex", testCreateParagraphInvalidSlideIndex),
        ("testCreateParagraphInvalidShapeIndex", testCreateParagraphInvalidShapeIndex),
        ("testCreateParagraphInvalidDto", testCreateParagraphInvalidDto),
        ("testCreateParagraphInvalidPosition", testCreateParagraphInvalidPosition),
        ("testCreateParagraphInvalidPassword", testCreateParagraphInvalidPassword),
        ("testCreateParagraphInvalidFolder", testCreateParagraphInvalidFolder),
        ("testCreateParagraphInvalidStorage", testCreateParagraphInvalidStorage),
        ("testCreateParagraphInvalidSubShape", testCreateParagraphInvalidSubShape),
        ("testCreatePortion", testCreatePortion),
        ("testCreatePortionInvalidName", testCreatePortionInvalidName),
        ("testCreatePortionInvalidSlideIndex", testCreatePortionInvalidSlideIndex),
        ("testCreatePortionInvalidShapeIndex", testCreatePortionInvalidShapeIndex),
        ("testCreatePortionInvalidParagraphIndex", testCreatePortionInvalidParagraphIndex),
        ("testCreatePortionInvalidDto", testCreatePortionInvalidDto),
        ("testCreatePortionInvalidPosition", testCreatePortionInvalidPosition),
        ("testCreatePortionInvalidPassword", testCreatePortionInvalidPassword),
        ("testCreatePortionInvalidFolder", testCreatePortionInvalidFolder),
        ("testCreatePortionInvalidStorage", testCreatePortionInvalidStorage),
        ("testCreatePortionInvalidSubShape", testCreatePortionInvalidSubShape),
        ("testCreatePresentation", testCreatePresentation),
        ("testCreatePresentationInvalidName", testCreatePresentationInvalidName),
        ("testCreatePresentationInvalidData", testCreatePresentationInvalidData),
        ("testCreatePresentationInvalidInputPassword", testCreatePresentationInvalidInputPassword),
        ("testCreatePresentationInvalidPassword", testCreatePresentationInvalidPassword),
        ("testCreatePresentationInvalidFolder", testCreatePresentationInvalidFolder),
        ("testCreatePresentationInvalidStorage", testCreatePresentationInvalidStorage),
        ("testCreatePresentationFromSource", testCreatePresentationFromSource),
        ("testCreatePresentationFromSourceInvalidName", testCreatePresentationFromSourceInvalidName),
        ("testCreatePresentationFromSourceInvalidSourcePath", testCreatePresentationFromSourceInvalidSourcePath),
        ("testCreatePresentationFromSourceInvalidSourcePassword", testCreatePresentationFromSourceInvalidSourcePassword),
        ("testCreatePresentationFromSourceInvalidSourceStorage", testCreatePresentationFromSourceInvalidSourceStorage),
        ("testCreatePresentationFromSourceInvalidPassword", testCreatePresentationFromSourceInvalidPassword),
        ("testCreatePresentationFromSourceInvalidFolder", testCreatePresentationFromSourceInvalidFolder),
        ("testCreatePresentationFromSourceInvalidStorage", testCreatePresentationFromSourceInvalidStorage),
        ("testCreatePresentationFromTemplate", testCreatePresentationFromTemplate),
        ("testCreatePresentationFromTemplateInvalidName", testCreatePresentationFromTemplateInvalidName),
        ("testCreatePresentationFromTemplateInvalidTemplatePath", testCreatePresentationFromTemplateInvalidTemplatePath),
        ("testCreatePresentationFromTemplateInvalidData", testCreatePresentationFromTemplateInvalidData),
        ("testCreatePresentationFromTemplateInvalidTemplatePassword", testCreatePresentationFromTemplateInvalidTemplatePassword),
        ("testCreatePresentationFromTemplateInvalidTemplateStorage", testCreatePresentationFromTemplateInvalidTemplateStorage),
        ("testCreatePresentationFromTemplateInvalidIsImageDataEmbedded", testCreatePresentationFromTemplateInvalidIsImageDataEmbedded),
        ("testCreatePresentationFromTemplateInvalidPassword", testCreatePresentationFromTemplateInvalidPassword),
        ("testCreatePresentationFromTemplateInvalidFolder", testCreatePresentationFromTemplateInvalidFolder),
        ("testCreatePresentationFromTemplateInvalidStorage", testCreatePresentationFromTemplateInvalidStorage),
        ("testCreateSection", testCreateSection),
        ("testCreateSectionInvalidName", testCreateSectionInvalidName),
        ("testCreateSectionInvalidSectionName", testCreateSectionInvalidSectionName),
        ("testCreateSectionInvalidSlideIndex", testCreateSectionInvalidSlideIndex),
        ("testCreateSectionInvalidPassword", testCreateSectionInvalidPassword),
        ("testCreateSectionInvalidFolder", testCreateSectionInvalidFolder),
        ("testCreateSectionInvalidStorage", testCreateSectionInvalidStorage),
        ("testCreateShape", testCreateShape),
        ("testCreateShapeInvalidName", testCreateShapeInvalidName),
        ("testCreateShapeInvalidSlideIndex", testCreateShapeInvalidSlideIndex),
        ("testCreateShapeInvalidDto", testCreateShapeInvalidDto),
        ("testCreateShapeInvalidShapeToClone", testCreateShapeInvalidShapeToClone),
        ("testCreateShapeInvalidPosition", testCreateShapeInvalidPosition),
        ("testCreateShapeInvalidPassword", testCreateShapeInvalidPassword),
        ("testCreateShapeInvalidFolder", testCreateShapeInvalidFolder),
        ("testCreateShapeInvalidStorage", testCreateShapeInvalidStorage),
        ("testCreateShapeInvalidSubShape", testCreateShapeInvalidSubShape),
        ("testCreateSlide", testCreateSlide),
        ("testCreateSlideInvalidName", testCreateSlideInvalidName),
        ("testCreateSlideInvalidLayoutAlias", testCreateSlideInvalidLayoutAlias),
        ("testCreateSlideInvalidPosition", testCreateSlideInvalidPosition),
        ("testCreateSlideInvalidPassword", testCreateSlideInvalidPassword),
        ("testCreateSlideInvalidFolder", testCreateSlideInvalidFolder),
        ("testCreateSlideInvalidStorage", testCreateSlideInvalidStorage),
        ("testCreateSmartArtNode", testCreateSmartArtNode),
        ("testCreateSmartArtNodeInvalidName", testCreateSmartArtNodeInvalidName),
        ("testCreateSmartArtNodeInvalidSlideIndex", testCreateSmartArtNodeInvalidSlideIndex),
        ("testCreateSmartArtNodeInvalidSmartArtIndex", testCreateSmartArtNodeInvalidSmartArtIndex),
        ("testCreateSmartArtNodeInvalidSubNode", testCreateSmartArtNodeInvalidSubNode),
        ("testCreateSmartArtNodeInvalidText", testCreateSmartArtNodeInvalidText),
        ("testCreateSmartArtNodeInvalidPosition", testCreateSmartArtNodeInvalidPosition),
        ("testCreateSmartArtNodeInvalidPassword", testCreateSmartArtNodeInvalidPassword),
        ("testCreateSmartArtNodeInvalidFolder", testCreateSmartArtNodeInvalidFolder),
        ("testCreateSmartArtNodeInvalidStorage", testCreateSmartArtNodeInvalidStorage),
        ("testCreateSpecialSlideAnimationEffect", testCreateSpecialSlideAnimationEffect),
        ("testCreateSpecialSlideAnimationEffectInvalidName", testCreateSpecialSlideAnimationEffectInvalidName),
        ("testCreateSpecialSlideAnimationEffectInvalidSlideIndex", testCreateSpecialSlideAnimationEffectInvalidSlideIndex),
        ("testCreateSpecialSlideAnimationEffectInvalidSlideType", testCreateSpecialSlideAnimationEffectInvalidSlideType),
        ("testCreateSpecialSlideAnimationEffectInvalidEffect", testCreateSpecialSlideAnimationEffectInvalidEffect),
        ("testCreateSpecialSlideAnimationEffectInvalidPassword", testCreateSpecialSlideAnimationEffectInvalidPassword),
        ("testCreateSpecialSlideAnimationEffectInvalidFolder", testCreateSpecialSlideAnimationEffectInvalidFolder),
        ("testCreateSpecialSlideAnimationEffectInvalidStorage", testCreateSpecialSlideAnimationEffectInvalidStorage),
        ("testCreateSpecialSlideAnimationInteractiveSequence", testCreateSpecialSlideAnimationInteractiveSequence),
        ("testCreateSpecialSlideAnimationInteractiveSequenceInvalidName", testCreateSpecialSlideAnimationInteractiveSequenceInvalidName),
        ("testCreateSpecialSlideAnimationInteractiveSequenceInvalidSlideIndex", testCreateSpecialSlideAnimationInteractiveSequenceInvalidSlideIndex),
        ("testCreateSpecialSlideAnimationInteractiveSequenceInvalidSlideType", testCreateSpecialSlideAnimationInteractiveSequenceInvalidSlideType),
        ("testCreateSpecialSlideAnimationInteractiveSequenceInvalidSequence", testCreateSpecialSlideAnimationInteractiveSequenceInvalidSequence),
        ("testCreateSpecialSlideAnimationInteractiveSequenceInvalidPassword", testCreateSpecialSlideAnimationInteractiveSequenceInvalidPassword),
        ("testCreateSpecialSlideAnimationInteractiveSequenceInvalidFolder", testCreateSpecialSlideAnimationInteractiveSequenceInvalidFolder),
        ("testCreateSpecialSlideAnimationInteractiveSequenceInvalidStorage", testCreateSpecialSlideAnimationInteractiveSequenceInvalidStorage),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffect", testCreateSpecialSlideAnimationInteractiveSequenceEffect),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidName", testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType", testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffect", testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffect),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword", testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder", testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage", testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testCreateSpecialSlideParagraph", testCreateSpecialSlideParagraph),
        ("testCreateSpecialSlideParagraphInvalidName", testCreateSpecialSlideParagraphInvalidName),
        ("testCreateSpecialSlideParagraphInvalidSlideIndex", testCreateSpecialSlideParagraphInvalidSlideIndex),
        ("testCreateSpecialSlideParagraphInvalidSlideType", testCreateSpecialSlideParagraphInvalidSlideType),
        ("testCreateSpecialSlideParagraphInvalidShapeIndex", testCreateSpecialSlideParagraphInvalidShapeIndex),
        ("testCreateSpecialSlideParagraphInvalidDto", testCreateSpecialSlideParagraphInvalidDto),
        ("testCreateSpecialSlideParagraphInvalidPosition", testCreateSpecialSlideParagraphInvalidPosition),
        ("testCreateSpecialSlideParagraphInvalidPassword", testCreateSpecialSlideParagraphInvalidPassword),
        ("testCreateSpecialSlideParagraphInvalidFolder", testCreateSpecialSlideParagraphInvalidFolder),
        ("testCreateSpecialSlideParagraphInvalidStorage", testCreateSpecialSlideParagraphInvalidStorage),
        ("testCreateSpecialSlideParagraphInvalidSubShape", testCreateSpecialSlideParagraphInvalidSubShape),
        ("testCreateSpecialSlidePortion", testCreateSpecialSlidePortion),
        ("testCreateSpecialSlidePortionInvalidName", testCreateSpecialSlidePortionInvalidName),
        ("testCreateSpecialSlidePortionInvalidSlideIndex", testCreateSpecialSlidePortionInvalidSlideIndex),
        ("testCreateSpecialSlidePortionInvalidSlideType", testCreateSpecialSlidePortionInvalidSlideType),
        ("testCreateSpecialSlidePortionInvalidShapeIndex", testCreateSpecialSlidePortionInvalidShapeIndex),
        ("testCreateSpecialSlidePortionInvalidParagraphIndex", testCreateSpecialSlidePortionInvalidParagraphIndex),
        ("testCreateSpecialSlidePortionInvalidDto", testCreateSpecialSlidePortionInvalidDto),
        ("testCreateSpecialSlidePortionInvalidPosition", testCreateSpecialSlidePortionInvalidPosition),
        ("testCreateSpecialSlidePortionInvalidPassword", testCreateSpecialSlidePortionInvalidPassword),
        ("testCreateSpecialSlidePortionInvalidFolder", testCreateSpecialSlidePortionInvalidFolder),
        ("testCreateSpecialSlidePortionInvalidStorage", testCreateSpecialSlidePortionInvalidStorage),
        ("testCreateSpecialSlidePortionInvalidSubShape", testCreateSpecialSlidePortionInvalidSubShape),
        ("testCreateSpecialSlideShape", testCreateSpecialSlideShape),
        ("testCreateSpecialSlideShapeInvalidName", testCreateSpecialSlideShapeInvalidName),
        ("testCreateSpecialSlideShapeInvalidSlideIndex", testCreateSpecialSlideShapeInvalidSlideIndex),
        ("testCreateSpecialSlideShapeInvalidSlideType", testCreateSpecialSlideShapeInvalidSlideType),
        ("testCreateSpecialSlideShapeInvalidDto", testCreateSpecialSlideShapeInvalidDto),
        ("testCreateSpecialSlideShapeInvalidShapeToClone", testCreateSpecialSlideShapeInvalidShapeToClone),
        ("testCreateSpecialSlideShapeInvalidPosition", testCreateSpecialSlideShapeInvalidPosition),
        ("testCreateSpecialSlideShapeInvalidPassword", testCreateSpecialSlideShapeInvalidPassword),
        ("testCreateSpecialSlideShapeInvalidFolder", testCreateSpecialSlideShapeInvalidFolder),
        ("testCreateSpecialSlideShapeInvalidStorage", testCreateSpecialSlideShapeInvalidStorage),
        ("testCreateSpecialSlideShapeInvalidSubShape", testCreateSpecialSlideShapeInvalidSubShape),
        ("testCreateWatermark", testCreateWatermark),
        ("testCreateWatermarkInvalidName", testCreateWatermarkInvalidName),
        ("testCreateWatermarkInvalidShape", testCreateWatermarkInvalidShape),
        ("testCreateWatermarkInvalidFontHeight", testCreateWatermarkInvalidFontHeight),
        ("testCreateWatermarkInvalidText", testCreateWatermarkInvalidText),
        ("testCreateWatermarkInvalidFontName", testCreateWatermarkInvalidFontName),
        ("testCreateWatermarkInvalidFontColor", testCreateWatermarkInvalidFontColor),
        ("testCreateWatermarkInvalidPassword", testCreateWatermarkInvalidPassword),
        ("testCreateWatermarkInvalidFolder", testCreateWatermarkInvalidFolder),
        ("testCreateWatermarkInvalidStorage", testCreateWatermarkInvalidStorage),
        ("testCreateWatermarkOnline", testCreateWatermarkOnline),
        ("testCreateWatermarkOnlineInvalidDocument", testCreateWatermarkOnlineInvalidDocument),
        ("testCreateWatermarkOnlineInvalidShape", testCreateWatermarkOnlineInvalidShape),
        ("testCreateWatermarkOnlineInvalidFontHeight", testCreateWatermarkOnlineInvalidFontHeight),
        ("testCreateWatermarkOnlineInvalidText", testCreateWatermarkOnlineInvalidText),
        ("testCreateWatermarkOnlineInvalidFontName", testCreateWatermarkOnlineInvalidFontName),
        ("testCreateWatermarkOnlineInvalidFontColor", testCreateWatermarkOnlineInvalidFontColor),
        ("testCreateWatermarkOnlineInvalidPassword", testCreateWatermarkOnlineInvalidPassword),
        ("testDeleteAnimation", testDeleteAnimation),
        ("testDeleteAnimationInvalidName", testDeleteAnimationInvalidName),
        ("testDeleteAnimationInvalidSlideIndex", testDeleteAnimationInvalidSlideIndex),
        ("testDeleteAnimationInvalidPassword", testDeleteAnimationInvalidPassword),
        ("testDeleteAnimationInvalidFolder", testDeleteAnimationInvalidFolder),
        ("testDeleteAnimationInvalidStorage", testDeleteAnimationInvalidStorage),
        ("testDeleteAnimationEffect", testDeleteAnimationEffect),
        ("testDeleteAnimationEffectInvalidName", testDeleteAnimationEffectInvalidName),
        ("testDeleteAnimationEffectInvalidSlideIndex", testDeleteAnimationEffectInvalidSlideIndex),
        ("testDeleteAnimationEffectInvalidEffectIndex", testDeleteAnimationEffectInvalidEffectIndex),
        ("testDeleteAnimationEffectInvalidPassword", testDeleteAnimationEffectInvalidPassword),
        ("testDeleteAnimationEffectInvalidFolder", testDeleteAnimationEffectInvalidFolder),
        ("testDeleteAnimationEffectInvalidStorage", testDeleteAnimationEffectInvalidStorage),
        ("testDeleteAnimationInteractiveSequence", testDeleteAnimationInteractiveSequence),
        ("testDeleteAnimationInteractiveSequenceInvalidName", testDeleteAnimationInteractiveSequenceInvalidName),
        ("testDeleteAnimationInteractiveSequenceInvalidSlideIndex", testDeleteAnimationInteractiveSequenceInvalidSlideIndex),
        ("testDeleteAnimationInteractiveSequenceInvalidSequenceIndex", testDeleteAnimationInteractiveSequenceInvalidSequenceIndex),
        ("testDeleteAnimationInteractiveSequenceInvalidPassword", testDeleteAnimationInteractiveSequenceInvalidPassword),
        ("testDeleteAnimationInteractiveSequenceInvalidFolder", testDeleteAnimationInteractiveSequenceInvalidFolder),
        ("testDeleteAnimationInteractiveSequenceInvalidStorage", testDeleteAnimationInteractiveSequenceInvalidStorage),
        ("testDeleteAnimationInteractiveSequenceEffect", testDeleteAnimationInteractiveSequenceEffect),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidName", testDeleteAnimationInteractiveSequenceEffectInvalidName),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidSlideIndex", testDeleteAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidSequenceIndex", testDeleteAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidEffectIndex", testDeleteAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidPassword", testDeleteAnimationInteractiveSequenceEffectInvalidPassword),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidFolder", testDeleteAnimationInteractiveSequenceEffectInvalidFolder),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidStorage", testDeleteAnimationInteractiveSequenceEffectInvalidStorage),
        ("testDeleteAnimationInteractiveSequences", testDeleteAnimationInteractiveSequences),
        ("testDeleteAnimationInteractiveSequencesInvalidName", testDeleteAnimationInteractiveSequencesInvalidName),
        ("testDeleteAnimationInteractiveSequencesInvalidSlideIndex", testDeleteAnimationInteractiveSequencesInvalidSlideIndex),
        ("testDeleteAnimationInteractiveSequencesInvalidPassword", testDeleteAnimationInteractiveSequencesInvalidPassword),
        ("testDeleteAnimationInteractiveSequencesInvalidFolder", testDeleteAnimationInteractiveSequencesInvalidFolder),
        ("testDeleteAnimationInteractiveSequencesInvalidStorage", testDeleteAnimationInteractiveSequencesInvalidStorage),
        ("testDeleteAnimationMainSequence", testDeleteAnimationMainSequence),
        ("testDeleteAnimationMainSequenceInvalidName", testDeleteAnimationMainSequenceInvalidName),
        ("testDeleteAnimationMainSequenceInvalidSlideIndex", testDeleteAnimationMainSequenceInvalidSlideIndex),
        ("testDeleteAnimationMainSequenceInvalidPassword", testDeleteAnimationMainSequenceInvalidPassword),
        ("testDeleteAnimationMainSequenceInvalidFolder", testDeleteAnimationMainSequenceInvalidFolder),
        ("testDeleteAnimationMainSequenceInvalidStorage", testDeleteAnimationMainSequenceInvalidStorage),
        ("testDeleteBackground", testDeleteBackground),
        ("testDeleteBackgroundInvalidName", testDeleteBackgroundInvalidName),
        ("testDeleteBackgroundInvalidSlideIndex", testDeleteBackgroundInvalidSlideIndex),
        ("testDeleteBackgroundInvalidPassword", testDeleteBackgroundInvalidPassword),
        ("testDeleteBackgroundInvalidFolder", testDeleteBackgroundInvalidFolder),
        ("testDeleteBackgroundInvalidStorage", testDeleteBackgroundInvalidStorage),
        ("testDeleteChartCategory", testDeleteChartCategory),
        ("testDeleteChartCategoryInvalidName", testDeleteChartCategoryInvalidName),
        ("testDeleteChartCategoryInvalidSlideIndex", testDeleteChartCategoryInvalidSlideIndex),
        ("testDeleteChartCategoryInvalidShapeIndex", testDeleteChartCategoryInvalidShapeIndex),
        ("testDeleteChartCategoryInvalidCategoryIndex", testDeleteChartCategoryInvalidCategoryIndex),
        ("testDeleteChartCategoryInvalidPassword", testDeleteChartCategoryInvalidPassword),
        ("testDeleteChartCategoryInvalidFolder", testDeleteChartCategoryInvalidFolder),
        ("testDeleteChartCategoryInvalidStorage", testDeleteChartCategoryInvalidStorage),
        ("testDeleteChartDataPoint", testDeleteChartDataPoint),
        ("testDeleteChartDataPointInvalidName", testDeleteChartDataPointInvalidName),
        ("testDeleteChartDataPointInvalidSlideIndex", testDeleteChartDataPointInvalidSlideIndex),
        ("testDeleteChartDataPointInvalidShapeIndex", testDeleteChartDataPointInvalidShapeIndex),
        ("testDeleteChartDataPointInvalidSeriesIndex", testDeleteChartDataPointInvalidSeriesIndex),
        ("testDeleteChartDataPointInvalidPointIndex", testDeleteChartDataPointInvalidPointIndex),
        ("testDeleteChartDataPointInvalidPassword", testDeleteChartDataPointInvalidPassword),
        ("testDeleteChartDataPointInvalidFolder", testDeleteChartDataPointInvalidFolder),
        ("testDeleteChartDataPointInvalidStorage", testDeleteChartDataPointInvalidStorage),
        ("testDeleteChartSeries", testDeleteChartSeries),
        ("testDeleteChartSeriesInvalidName", testDeleteChartSeriesInvalidName),
        ("testDeleteChartSeriesInvalidSlideIndex", testDeleteChartSeriesInvalidSlideIndex),
        ("testDeleteChartSeriesInvalidShapeIndex", testDeleteChartSeriesInvalidShapeIndex),
        ("testDeleteChartSeriesInvalidSeriesIndex", testDeleteChartSeriesInvalidSeriesIndex),
        ("testDeleteChartSeriesInvalidPassword", testDeleteChartSeriesInvalidPassword),
        ("testDeleteChartSeriesInvalidFolder", testDeleteChartSeriesInvalidFolder),
        ("testDeleteChartSeriesInvalidStorage", testDeleteChartSeriesInvalidStorage),
        ("testDeleteComments", testDeleteComments),
        ("testDeleteCommentsInvalidName", testDeleteCommentsInvalidName),
        ("testDeleteCommentsInvalidAuthor", testDeleteCommentsInvalidAuthor),
        ("testDeleteCommentsInvalidPassword", testDeleteCommentsInvalidPassword),
        ("testDeleteCommentsInvalidFolder", testDeleteCommentsInvalidFolder),
        ("testDeleteCommentsInvalidStorage", testDeleteCommentsInvalidStorage),
        ("testDeleteCommentsOnline", testDeleteCommentsOnline),
        ("testDeleteCommentsOnlineInvalidDocument", testDeleteCommentsOnlineInvalidDocument),
        ("testDeleteCommentsOnlineInvalidAuthor", testDeleteCommentsOnlineInvalidAuthor),
        ("testDeleteCommentsOnlineInvalidPassword", testDeleteCommentsOnlineInvalidPassword),
        ("testDeleteDocumentProperties", testDeleteDocumentProperties),
        ("testDeleteDocumentPropertiesInvalidName", testDeleteDocumentPropertiesInvalidName),
        ("testDeleteDocumentPropertiesInvalidPassword", testDeleteDocumentPropertiesInvalidPassword),
        ("testDeleteDocumentPropertiesInvalidFolder", testDeleteDocumentPropertiesInvalidFolder),
        ("testDeleteDocumentPropertiesInvalidStorage", testDeleteDocumentPropertiesInvalidStorage),
        ("testDeleteDocumentProperty", testDeleteDocumentProperty),
        ("testDeleteDocumentPropertyInvalidName", testDeleteDocumentPropertyInvalidName),
        ("testDeleteDocumentPropertyInvalidPropertyName", testDeleteDocumentPropertyInvalidPropertyName),
        ("testDeleteDocumentPropertyInvalidPassword", testDeleteDocumentPropertyInvalidPassword),
        ("testDeleteDocumentPropertyInvalidFolder", testDeleteDocumentPropertyInvalidFolder),
        ("testDeleteDocumentPropertyInvalidStorage", testDeleteDocumentPropertyInvalidStorage),
        ("testDeleteEmbeddedFont", testDeleteEmbeddedFont),
        ("testDeleteEmbeddedFontInvalidName", testDeleteEmbeddedFontInvalidName),
        ("testDeleteEmbeddedFontInvalidFontName", testDeleteEmbeddedFontInvalidFontName),
        ("testDeleteEmbeddedFontInvalidPassword", testDeleteEmbeddedFontInvalidPassword),
        ("testDeleteEmbeddedFontInvalidFolder", testDeleteEmbeddedFontInvalidFolder),
        ("testDeleteEmbeddedFontInvalidStorage", testDeleteEmbeddedFontInvalidStorage),
        ("testDeleteEmbeddedFontOnline", testDeleteEmbeddedFontOnline),
        ("testDeleteEmbeddedFontOnlineInvalidDocument", testDeleteEmbeddedFontOnlineInvalidDocument),
        ("testDeleteEmbeddedFontOnlineInvalidFontName", testDeleteEmbeddedFontOnlineInvalidFontName),
        ("testDeleteEmbeddedFontOnlineInvalidPassword", testDeleteEmbeddedFontOnlineInvalidPassword),
        ("testDeleteFile", testDeleteFile),
        ("testDeleteFileInvalidPath", testDeleteFileInvalidPath),
        ("testDeleteFileInvalidStorageName", testDeleteFileInvalidStorageName),
        ("testDeleteFileInvalidVersionId", testDeleteFileInvalidVersionId),
        ("testDeleteFolder", testDeleteFolder),
        ("testDeleteFolderInvalidPath", testDeleteFolderInvalidPath),
        ("testDeleteFolderInvalidStorageName", testDeleteFolderInvalidStorageName),
        ("testDeleteFolderInvalidRecursive", testDeleteFolderInvalidRecursive),
        ("testDeleteNotesSlide", testDeleteNotesSlide),
        ("testDeleteNotesSlideInvalidName", testDeleteNotesSlideInvalidName),
        ("testDeleteNotesSlideInvalidSlideIndex", testDeleteNotesSlideInvalidSlideIndex),
        ("testDeleteNotesSlideInvalidPassword", testDeleteNotesSlideInvalidPassword),
        ("testDeleteNotesSlideInvalidFolder", testDeleteNotesSlideInvalidFolder),
        ("testDeleteNotesSlideInvalidStorage", testDeleteNotesSlideInvalidStorage),
        ("testDeleteParagraph", testDeleteParagraph),
        ("testDeleteParagraphInvalidName", testDeleteParagraphInvalidName),
        ("testDeleteParagraphInvalidSlideIndex", testDeleteParagraphInvalidSlideIndex),
        ("testDeleteParagraphInvalidShapeIndex", testDeleteParagraphInvalidShapeIndex),
        ("testDeleteParagraphInvalidParagraphIndex", testDeleteParagraphInvalidParagraphIndex),
        ("testDeleteParagraphInvalidPassword", testDeleteParagraphInvalidPassword),
        ("testDeleteParagraphInvalidFolder", testDeleteParagraphInvalidFolder),
        ("testDeleteParagraphInvalidStorage", testDeleteParagraphInvalidStorage),
        ("testDeleteParagraphInvalidSubShape", testDeleteParagraphInvalidSubShape),
        ("testDeleteParagraphs", testDeleteParagraphs),
        ("testDeleteParagraphsInvalidName", testDeleteParagraphsInvalidName),
        ("testDeleteParagraphsInvalidSlideIndex", testDeleteParagraphsInvalidSlideIndex),
        ("testDeleteParagraphsInvalidShapeIndex", testDeleteParagraphsInvalidShapeIndex),
        ("testDeleteParagraphsInvalidParagraphs", testDeleteParagraphsInvalidParagraphs),
        ("testDeleteParagraphsInvalidPassword", testDeleteParagraphsInvalidPassword),
        ("testDeleteParagraphsInvalidFolder", testDeleteParagraphsInvalidFolder),
        ("testDeleteParagraphsInvalidStorage", testDeleteParagraphsInvalidStorage),
        ("testDeleteParagraphsInvalidSubShape", testDeleteParagraphsInvalidSubShape),
        ("testDeletePortion", testDeletePortion),
        ("testDeletePortionInvalidName", testDeletePortionInvalidName),
        ("testDeletePortionInvalidSlideIndex", testDeletePortionInvalidSlideIndex),
        ("testDeletePortionInvalidShapeIndex", testDeletePortionInvalidShapeIndex),
        ("testDeletePortionInvalidParagraphIndex", testDeletePortionInvalidParagraphIndex),
        ("testDeletePortionInvalidPortionIndex", testDeletePortionInvalidPortionIndex),
        ("testDeletePortionInvalidPassword", testDeletePortionInvalidPassword),
        ("testDeletePortionInvalidFolder", testDeletePortionInvalidFolder),
        ("testDeletePortionInvalidStorage", testDeletePortionInvalidStorage),
        ("testDeletePortionInvalidSubShape", testDeletePortionInvalidSubShape),
        ("testDeletePortions", testDeletePortions),
        ("testDeletePortionsInvalidName", testDeletePortionsInvalidName),
        ("testDeletePortionsInvalidSlideIndex", testDeletePortionsInvalidSlideIndex),
        ("testDeletePortionsInvalidShapeIndex", testDeletePortionsInvalidShapeIndex),
        ("testDeletePortionsInvalidParagraphIndex", testDeletePortionsInvalidParagraphIndex),
        ("testDeletePortionsInvalidPortions", testDeletePortionsInvalidPortions),
        ("testDeletePortionsInvalidPassword", testDeletePortionsInvalidPassword),
        ("testDeletePortionsInvalidFolder", testDeletePortionsInvalidFolder),
        ("testDeletePortionsInvalidStorage", testDeletePortionsInvalidStorage),
        ("testDeletePortionsInvalidSubShape", testDeletePortionsInvalidSubShape),
        ("testDeleteProtection", testDeleteProtection),
        ("testDeleteProtectionInvalidName", testDeleteProtectionInvalidName),
        ("testDeleteProtectionInvalidPassword", testDeleteProtectionInvalidPassword),
        ("testDeleteProtectionInvalidFolder", testDeleteProtectionInvalidFolder),
        ("testDeleteProtectionInvalidStorage", testDeleteProtectionInvalidStorage),
        ("testDeleteProtectionOnline", testDeleteProtectionOnline),
        ("testDeleteProtectionOnlineInvalidDocument", testDeleteProtectionOnlineInvalidDocument),
        ("testDeleteProtectionOnlineInvalidPassword", testDeleteProtectionOnlineInvalidPassword),
        ("testDeleteSection", testDeleteSection),
        ("testDeleteSectionInvalidName", testDeleteSectionInvalidName),
        ("testDeleteSectionInvalidSectionIndex", testDeleteSectionInvalidSectionIndex),
        ("testDeleteSectionInvalidWithSlides", testDeleteSectionInvalidWithSlides),
        ("testDeleteSectionInvalidPassword", testDeleteSectionInvalidPassword),
        ("testDeleteSectionInvalidFolder", testDeleteSectionInvalidFolder),
        ("testDeleteSectionInvalidStorage", testDeleteSectionInvalidStorage),
        ("testDeleteSections", testDeleteSections),
        ("testDeleteSectionsInvalidName", testDeleteSectionsInvalidName),
        ("testDeleteSectionsInvalidSections", testDeleteSectionsInvalidSections),
        ("testDeleteSectionsInvalidWithSlides", testDeleteSectionsInvalidWithSlides),
        ("testDeleteSectionsInvalidPassword", testDeleteSectionsInvalidPassword),
        ("testDeleteSectionsInvalidFolder", testDeleteSectionsInvalidFolder),
        ("testDeleteSectionsInvalidStorage", testDeleteSectionsInvalidStorage),
        ("testDeleteShape", testDeleteShape),
        ("testDeleteShapeInvalidName", testDeleteShapeInvalidName),
        ("testDeleteShapeInvalidSlideIndex", testDeleteShapeInvalidSlideIndex),
        ("testDeleteShapeInvalidShapeIndex", testDeleteShapeInvalidShapeIndex),
        ("testDeleteShapeInvalidPassword", testDeleteShapeInvalidPassword),
        ("testDeleteShapeInvalidFolder", testDeleteShapeInvalidFolder),
        ("testDeleteShapeInvalidStorage", testDeleteShapeInvalidStorage),
        ("testDeleteShapeInvalidSubShape", testDeleteShapeInvalidSubShape),
        ("testDeleteShapes", testDeleteShapes),
        ("testDeleteShapesInvalidName", testDeleteShapesInvalidName),
        ("testDeleteShapesInvalidSlideIndex", testDeleteShapesInvalidSlideIndex),
        ("testDeleteShapesInvalidShapes", testDeleteShapesInvalidShapes),
        ("testDeleteShapesInvalidPassword", testDeleteShapesInvalidPassword),
        ("testDeleteShapesInvalidFolder", testDeleteShapesInvalidFolder),
        ("testDeleteShapesInvalidStorage", testDeleteShapesInvalidStorage),
        ("testDeleteShapesInvalidSubShape", testDeleteShapesInvalidSubShape),
        ("testDeleteSlide", testDeleteSlide),
        ("testDeleteSlideInvalidName", testDeleteSlideInvalidName),
        ("testDeleteSlideInvalidSlideIndex", testDeleteSlideInvalidSlideIndex),
        ("testDeleteSlideInvalidPassword", testDeleteSlideInvalidPassword),
        ("testDeleteSlideInvalidFolder", testDeleteSlideInvalidFolder),
        ("testDeleteSlideInvalidStorage", testDeleteSlideInvalidStorage),
        ("testDeleteSlideComments", testDeleteSlideComments),
        ("testDeleteSlideCommentsInvalidName", testDeleteSlideCommentsInvalidName),
        ("testDeleteSlideCommentsInvalidSlideIndex", testDeleteSlideCommentsInvalidSlideIndex),
        ("testDeleteSlideCommentsInvalidAuthor", testDeleteSlideCommentsInvalidAuthor),
        ("testDeleteSlideCommentsInvalidPassword", testDeleteSlideCommentsInvalidPassword),
        ("testDeleteSlideCommentsInvalidFolder", testDeleteSlideCommentsInvalidFolder),
        ("testDeleteSlideCommentsInvalidStorage", testDeleteSlideCommentsInvalidStorage),
        ("testDeleteSlideCommentsOnline", testDeleteSlideCommentsOnline),
        ("testDeleteSlideCommentsOnlineInvalidDocument", testDeleteSlideCommentsOnlineInvalidDocument),
        ("testDeleteSlideCommentsOnlineInvalidSlideIndex", testDeleteSlideCommentsOnlineInvalidSlideIndex),
        ("testDeleteSlideCommentsOnlineInvalidAuthor", testDeleteSlideCommentsOnlineInvalidAuthor),
        ("testDeleteSlideCommentsOnlineInvalidPassword", testDeleteSlideCommentsOnlineInvalidPassword),
        ("testDeleteSlides", testDeleteSlides),
        ("testDeleteSlidesInvalidName", testDeleteSlidesInvalidName),
        ("testDeleteSlidesInvalidSlides", testDeleteSlidesInvalidSlides),
        ("testDeleteSlidesInvalidPassword", testDeleteSlidesInvalidPassword),
        ("testDeleteSlidesInvalidFolder", testDeleteSlidesInvalidFolder),
        ("testDeleteSlidesInvalidStorage", testDeleteSlidesInvalidStorage),
        ("testDeleteSmartArtNode", testDeleteSmartArtNode),
        ("testDeleteSmartArtNodeInvalidName", testDeleteSmartArtNodeInvalidName),
        ("testDeleteSmartArtNodeInvalidSlideIndex", testDeleteSmartArtNodeInvalidSlideIndex),
        ("testDeleteSmartArtNodeInvalidSmartArtIndex", testDeleteSmartArtNodeInvalidSmartArtIndex),
        ("testDeleteSmartArtNodeInvalidNodeIndex", testDeleteSmartArtNodeInvalidNodeIndex),
        ("testDeleteSmartArtNodeInvalidSubNode", testDeleteSmartArtNodeInvalidSubNode),
        ("testDeleteSmartArtNodeInvalidPassword", testDeleteSmartArtNodeInvalidPassword),
        ("testDeleteSmartArtNodeInvalidFolder", testDeleteSmartArtNodeInvalidFolder),
        ("testDeleteSmartArtNodeInvalidStorage", testDeleteSmartArtNodeInvalidStorage),
        ("testDeleteSpecialSlideAnimation", testDeleteSpecialSlideAnimation),
        ("testDeleteSpecialSlideAnimationInvalidName", testDeleteSpecialSlideAnimationInvalidName),
        ("testDeleteSpecialSlideAnimationInvalidSlideIndex", testDeleteSpecialSlideAnimationInvalidSlideIndex),
        ("testDeleteSpecialSlideAnimationInvalidSlideType", testDeleteSpecialSlideAnimationInvalidSlideType),
        ("testDeleteSpecialSlideAnimationInvalidPassword", testDeleteSpecialSlideAnimationInvalidPassword),
        ("testDeleteSpecialSlideAnimationInvalidFolder", testDeleteSpecialSlideAnimationInvalidFolder),
        ("testDeleteSpecialSlideAnimationInvalidStorage", testDeleteSpecialSlideAnimationInvalidStorage),
        ("testDeleteSpecialSlideAnimationEffect", testDeleteSpecialSlideAnimationEffect),
        ("testDeleteSpecialSlideAnimationEffectInvalidName", testDeleteSpecialSlideAnimationEffectInvalidName),
        ("testDeleteSpecialSlideAnimationEffectInvalidSlideIndex", testDeleteSpecialSlideAnimationEffectInvalidSlideIndex),
        ("testDeleteSpecialSlideAnimationEffectInvalidSlideType", testDeleteSpecialSlideAnimationEffectInvalidSlideType),
        ("testDeleteSpecialSlideAnimationEffectInvalidEffectIndex", testDeleteSpecialSlideAnimationEffectInvalidEffectIndex),
        ("testDeleteSpecialSlideAnimationEffectInvalidPassword", testDeleteSpecialSlideAnimationEffectInvalidPassword),
        ("testDeleteSpecialSlideAnimationEffectInvalidFolder", testDeleteSpecialSlideAnimationEffectInvalidFolder),
        ("testDeleteSpecialSlideAnimationEffectInvalidStorage", testDeleteSpecialSlideAnimationEffectInvalidStorage),
        ("testDeleteSpecialSlideAnimationInteractiveSequence", testDeleteSpecialSlideAnimationInteractiveSequence),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceInvalidName", testDeleteSpecialSlideAnimationInteractiveSequenceInvalidName),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSlideIndex", testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSlideIndex),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSlideType", testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSlideType),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSequenceIndex", testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSequenceIndex),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceInvalidPassword", testDeleteSpecialSlideAnimationInteractiveSequenceInvalidPassword),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceInvalidFolder", testDeleteSpecialSlideAnimationInteractiveSequenceInvalidFolder),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceInvalidStorage", testDeleteSpecialSlideAnimationInteractiveSequenceInvalidStorage),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffect", testDeleteSpecialSlideAnimationInteractiveSequenceEffect),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidName", testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType", testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndex", testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword", testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder", testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage", testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testDeleteSpecialSlideAnimationInteractiveSequences", testDeleteSpecialSlideAnimationInteractiveSequences),
        ("testDeleteSpecialSlideAnimationInteractiveSequencesInvalidName", testDeleteSpecialSlideAnimationInteractiveSequencesInvalidName),
        ("testDeleteSpecialSlideAnimationInteractiveSequencesInvalidSlideIndex", testDeleteSpecialSlideAnimationInteractiveSequencesInvalidSlideIndex),
        ("testDeleteSpecialSlideAnimationInteractiveSequencesInvalidSlideType", testDeleteSpecialSlideAnimationInteractiveSequencesInvalidSlideType),
        ("testDeleteSpecialSlideAnimationInteractiveSequencesInvalidPassword", testDeleteSpecialSlideAnimationInteractiveSequencesInvalidPassword),
        ("testDeleteSpecialSlideAnimationInteractiveSequencesInvalidFolder", testDeleteSpecialSlideAnimationInteractiveSequencesInvalidFolder),
        ("testDeleteSpecialSlideAnimationInteractiveSequencesInvalidStorage", testDeleteSpecialSlideAnimationInteractiveSequencesInvalidStorage),
        ("testDeleteSpecialSlideAnimationMainSequence", testDeleteSpecialSlideAnimationMainSequence),
        ("testDeleteSpecialSlideAnimationMainSequenceInvalidName", testDeleteSpecialSlideAnimationMainSequenceInvalidName),
        ("testDeleteSpecialSlideAnimationMainSequenceInvalidSlideIndex", testDeleteSpecialSlideAnimationMainSequenceInvalidSlideIndex),
        ("testDeleteSpecialSlideAnimationMainSequenceInvalidSlideType", testDeleteSpecialSlideAnimationMainSequenceInvalidSlideType),
        ("testDeleteSpecialSlideAnimationMainSequenceInvalidPassword", testDeleteSpecialSlideAnimationMainSequenceInvalidPassword),
        ("testDeleteSpecialSlideAnimationMainSequenceInvalidFolder", testDeleteSpecialSlideAnimationMainSequenceInvalidFolder),
        ("testDeleteSpecialSlideAnimationMainSequenceInvalidStorage", testDeleteSpecialSlideAnimationMainSequenceInvalidStorage),
        ("testDeleteSpecialSlideParagraph", testDeleteSpecialSlideParagraph),
        ("testDeleteSpecialSlideParagraphInvalidName", testDeleteSpecialSlideParagraphInvalidName),
        ("testDeleteSpecialSlideParagraphInvalidSlideIndex", testDeleteSpecialSlideParagraphInvalidSlideIndex),
        ("testDeleteSpecialSlideParagraphInvalidSlideType", testDeleteSpecialSlideParagraphInvalidSlideType),
        ("testDeleteSpecialSlideParagraphInvalidShapeIndex", testDeleteSpecialSlideParagraphInvalidShapeIndex),
        ("testDeleteSpecialSlideParagraphInvalidParagraphIndex", testDeleteSpecialSlideParagraphInvalidParagraphIndex),
        ("testDeleteSpecialSlideParagraphInvalidPassword", testDeleteSpecialSlideParagraphInvalidPassword),
        ("testDeleteSpecialSlideParagraphInvalidFolder", testDeleteSpecialSlideParagraphInvalidFolder),
        ("testDeleteSpecialSlideParagraphInvalidStorage", testDeleteSpecialSlideParagraphInvalidStorage),
        ("testDeleteSpecialSlideParagraphInvalidSubShape", testDeleteSpecialSlideParagraphInvalidSubShape),
        ("testDeleteSpecialSlideParagraphs", testDeleteSpecialSlideParagraphs),
        ("testDeleteSpecialSlideParagraphsInvalidName", testDeleteSpecialSlideParagraphsInvalidName),
        ("testDeleteSpecialSlideParagraphsInvalidSlideIndex", testDeleteSpecialSlideParagraphsInvalidSlideIndex),
        ("testDeleteSpecialSlideParagraphsInvalidSlideType", testDeleteSpecialSlideParagraphsInvalidSlideType),
        ("testDeleteSpecialSlideParagraphsInvalidShapeIndex", testDeleteSpecialSlideParagraphsInvalidShapeIndex),
        ("testDeleteSpecialSlideParagraphsInvalidParagraphs", testDeleteSpecialSlideParagraphsInvalidParagraphs),
        ("testDeleteSpecialSlideParagraphsInvalidPassword", testDeleteSpecialSlideParagraphsInvalidPassword),
        ("testDeleteSpecialSlideParagraphsInvalidFolder", testDeleteSpecialSlideParagraphsInvalidFolder),
        ("testDeleteSpecialSlideParagraphsInvalidStorage", testDeleteSpecialSlideParagraphsInvalidStorage),
        ("testDeleteSpecialSlideParagraphsInvalidSubShape", testDeleteSpecialSlideParagraphsInvalidSubShape),
        ("testDeleteSpecialSlidePortion", testDeleteSpecialSlidePortion),
        ("testDeleteSpecialSlidePortionInvalidName", testDeleteSpecialSlidePortionInvalidName),
        ("testDeleteSpecialSlidePortionInvalidSlideIndex", testDeleteSpecialSlidePortionInvalidSlideIndex),
        ("testDeleteSpecialSlidePortionInvalidSlideType", testDeleteSpecialSlidePortionInvalidSlideType),
        ("testDeleteSpecialSlidePortionInvalidShapeIndex", testDeleteSpecialSlidePortionInvalidShapeIndex),
        ("testDeleteSpecialSlidePortionInvalidParagraphIndex", testDeleteSpecialSlidePortionInvalidParagraphIndex),
        ("testDeleteSpecialSlidePortionInvalidPortionIndex", testDeleteSpecialSlidePortionInvalidPortionIndex),
        ("testDeleteSpecialSlidePortionInvalidPassword", testDeleteSpecialSlidePortionInvalidPassword),
        ("testDeleteSpecialSlidePortionInvalidFolder", testDeleteSpecialSlidePortionInvalidFolder),
        ("testDeleteSpecialSlidePortionInvalidStorage", testDeleteSpecialSlidePortionInvalidStorage),
        ("testDeleteSpecialSlidePortionInvalidSubShape", testDeleteSpecialSlidePortionInvalidSubShape),
        ("testDeleteSpecialSlidePortions", testDeleteSpecialSlidePortions),
        ("testDeleteSpecialSlidePortionsInvalidName", testDeleteSpecialSlidePortionsInvalidName),
        ("testDeleteSpecialSlidePortionsInvalidSlideIndex", testDeleteSpecialSlidePortionsInvalidSlideIndex),
        ("testDeleteSpecialSlidePortionsInvalidSlideType", testDeleteSpecialSlidePortionsInvalidSlideType),
        ("testDeleteSpecialSlidePortionsInvalidShapeIndex", testDeleteSpecialSlidePortionsInvalidShapeIndex),
        ("testDeleteSpecialSlidePortionsInvalidParagraphIndex", testDeleteSpecialSlidePortionsInvalidParagraphIndex),
        ("testDeleteSpecialSlidePortionsInvalidPortions", testDeleteSpecialSlidePortionsInvalidPortions),
        ("testDeleteSpecialSlidePortionsInvalidPassword", testDeleteSpecialSlidePortionsInvalidPassword),
        ("testDeleteSpecialSlidePortionsInvalidFolder", testDeleteSpecialSlidePortionsInvalidFolder),
        ("testDeleteSpecialSlidePortionsInvalidStorage", testDeleteSpecialSlidePortionsInvalidStorage),
        ("testDeleteSpecialSlidePortionsInvalidSubShape", testDeleteSpecialSlidePortionsInvalidSubShape),
        ("testDeleteSpecialSlideShape", testDeleteSpecialSlideShape),
        ("testDeleteSpecialSlideShapeInvalidName", testDeleteSpecialSlideShapeInvalidName),
        ("testDeleteSpecialSlideShapeInvalidSlideIndex", testDeleteSpecialSlideShapeInvalidSlideIndex),
        ("testDeleteSpecialSlideShapeInvalidSlideType", testDeleteSpecialSlideShapeInvalidSlideType),
        ("testDeleteSpecialSlideShapeInvalidShapeIndex", testDeleteSpecialSlideShapeInvalidShapeIndex),
        ("testDeleteSpecialSlideShapeInvalidPassword", testDeleteSpecialSlideShapeInvalidPassword),
        ("testDeleteSpecialSlideShapeInvalidFolder", testDeleteSpecialSlideShapeInvalidFolder),
        ("testDeleteSpecialSlideShapeInvalidStorage", testDeleteSpecialSlideShapeInvalidStorage),
        ("testDeleteSpecialSlideShapeInvalidSubShape", testDeleteSpecialSlideShapeInvalidSubShape),
        ("testDeleteSpecialSlideShapes", testDeleteSpecialSlideShapes),
        ("testDeleteSpecialSlideShapesInvalidName", testDeleteSpecialSlideShapesInvalidName),
        ("testDeleteSpecialSlideShapesInvalidSlideIndex", testDeleteSpecialSlideShapesInvalidSlideIndex),
        ("testDeleteSpecialSlideShapesInvalidSlideType", testDeleteSpecialSlideShapesInvalidSlideType),
        ("testDeleteSpecialSlideShapesInvalidShapes", testDeleteSpecialSlideShapesInvalidShapes),
        ("testDeleteSpecialSlideShapesInvalidPassword", testDeleteSpecialSlideShapesInvalidPassword),
        ("testDeleteSpecialSlideShapesInvalidFolder", testDeleteSpecialSlideShapesInvalidFolder),
        ("testDeleteSpecialSlideShapesInvalidStorage", testDeleteSpecialSlideShapesInvalidStorage),
        ("testDeleteSpecialSlideShapesInvalidSubShape", testDeleteSpecialSlideShapesInvalidSubShape),
        ("testDeleteUnusedLayoutSlides", testDeleteUnusedLayoutSlides),
        ("testDeleteUnusedLayoutSlidesInvalidName", testDeleteUnusedLayoutSlidesInvalidName),
        ("testDeleteUnusedLayoutSlidesInvalidPassword", testDeleteUnusedLayoutSlidesInvalidPassword),
        ("testDeleteUnusedLayoutSlidesInvalidFolder", testDeleteUnusedLayoutSlidesInvalidFolder),
        ("testDeleteUnusedLayoutSlidesInvalidStorage", testDeleteUnusedLayoutSlidesInvalidStorage),
        ("testDeleteUnusedLayoutSlidesOnline", testDeleteUnusedLayoutSlidesOnline),
        ("testDeleteUnusedLayoutSlidesOnlineInvalidDocument", testDeleteUnusedLayoutSlidesOnlineInvalidDocument),
        ("testDeleteUnusedLayoutSlidesOnlineInvalidPassword", testDeleteUnusedLayoutSlidesOnlineInvalidPassword),
        ("testDeleteUnusedMasterSlides", testDeleteUnusedMasterSlides),
        ("testDeleteUnusedMasterSlidesInvalidName", testDeleteUnusedMasterSlidesInvalidName),
        ("testDeleteUnusedMasterSlidesInvalidIgnorePreserveField", testDeleteUnusedMasterSlidesInvalidIgnorePreserveField),
        ("testDeleteUnusedMasterSlidesInvalidPassword", testDeleteUnusedMasterSlidesInvalidPassword),
        ("testDeleteUnusedMasterSlidesInvalidFolder", testDeleteUnusedMasterSlidesInvalidFolder),
        ("testDeleteUnusedMasterSlidesInvalidStorage", testDeleteUnusedMasterSlidesInvalidStorage),
        ("testDeleteUnusedMasterSlidesOnline", testDeleteUnusedMasterSlidesOnline),
        ("testDeleteUnusedMasterSlidesOnlineInvalidDocument", testDeleteUnusedMasterSlidesOnlineInvalidDocument),
        ("testDeleteUnusedMasterSlidesOnlineInvalidIgnorePreserveField", testDeleteUnusedMasterSlidesOnlineInvalidIgnorePreserveField),
        ("testDeleteUnusedMasterSlidesOnlineInvalidPassword", testDeleteUnusedMasterSlidesOnlineInvalidPassword),
        ("testDeleteWatermark", testDeleteWatermark),
        ("testDeleteWatermarkInvalidName", testDeleteWatermarkInvalidName),
        ("testDeleteWatermarkInvalidShapeName", testDeleteWatermarkInvalidShapeName),
        ("testDeleteWatermarkInvalidPassword", testDeleteWatermarkInvalidPassword),
        ("testDeleteWatermarkInvalidFolder", testDeleteWatermarkInvalidFolder),
        ("testDeleteWatermarkInvalidStorage", testDeleteWatermarkInvalidStorage),
        ("testDeleteWatermarkOnline", testDeleteWatermarkOnline),
        ("testDeleteWatermarkOnlineInvalidDocument", testDeleteWatermarkOnlineInvalidDocument),
        ("testDeleteWatermarkOnlineInvalidShapeName", testDeleteWatermarkOnlineInvalidShapeName),
        ("testDeleteWatermarkOnlineInvalidPassword", testDeleteWatermarkOnlineInvalidPassword),
        ("testDownloadFile", testDownloadFile),
        ("testDownloadFileInvalidPath", testDownloadFileInvalidPath),
        ("testDownloadFileInvalidStorageName", testDownloadFileInvalidStorageName),
        ("testDownloadFileInvalidVersionId", testDownloadFileInvalidVersionId),
        ("testDownloadImage", testDownloadImage),
        ("testDownloadImageInvalidName", testDownloadImageInvalidName),
        ("testDownloadImageInvalidIndex", testDownloadImageInvalidIndex),
        ("testDownloadImageInvalidFormat", testDownloadImageInvalidFormat),
        ("testDownloadImageInvalidPassword", testDownloadImageInvalidPassword),
        ("testDownloadImageInvalidFolder", testDownloadImageInvalidFolder),
        ("testDownloadImageInvalidStorage", testDownloadImageInvalidStorage),
        ("testDownloadImageDefaultFormat", testDownloadImageDefaultFormat),
        ("testDownloadImageDefaultFormatInvalidName", testDownloadImageDefaultFormatInvalidName),
        ("testDownloadImageDefaultFormatInvalidIndex", testDownloadImageDefaultFormatInvalidIndex),
        ("testDownloadImageDefaultFormatInvalidPassword", testDownloadImageDefaultFormatInvalidPassword),
        ("testDownloadImageDefaultFormatInvalidFolder", testDownloadImageDefaultFormatInvalidFolder),
        ("testDownloadImageDefaultFormatInvalidStorage", testDownloadImageDefaultFormatInvalidStorage),
        ("testDownloadImageDefaultFormatOnline", testDownloadImageDefaultFormatOnline),
        ("testDownloadImageDefaultFormatOnlineInvalidDocument", testDownloadImageDefaultFormatOnlineInvalidDocument),
        ("testDownloadImageDefaultFormatOnlineInvalidIndex", testDownloadImageDefaultFormatOnlineInvalidIndex),
        ("testDownloadImageDefaultFormatOnlineInvalidPassword", testDownloadImageDefaultFormatOnlineInvalidPassword),
        ("testDownloadImageOnline", testDownloadImageOnline),
        ("testDownloadImageOnlineInvalidDocument", testDownloadImageOnlineInvalidDocument),
        ("testDownloadImageOnlineInvalidIndex", testDownloadImageOnlineInvalidIndex),
        ("testDownloadImageOnlineInvalidFormat", testDownloadImageOnlineInvalidFormat),
        ("testDownloadImageOnlineInvalidPassword", testDownloadImageOnlineInvalidPassword),
        ("testDownloadImages", testDownloadImages),
        ("testDownloadImagesInvalidName", testDownloadImagesInvalidName),
        ("testDownloadImagesInvalidFormat", testDownloadImagesInvalidFormat),
        ("testDownloadImagesInvalidPassword", testDownloadImagesInvalidPassword),
        ("testDownloadImagesInvalidFolder", testDownloadImagesInvalidFolder),
        ("testDownloadImagesInvalidStorage", testDownloadImagesInvalidStorage),
        ("testDownloadImagesDefaultFormat", testDownloadImagesDefaultFormat),
        ("testDownloadImagesDefaultFormatInvalidName", testDownloadImagesDefaultFormatInvalidName),
        ("testDownloadImagesDefaultFormatInvalidPassword", testDownloadImagesDefaultFormatInvalidPassword),
        ("testDownloadImagesDefaultFormatInvalidFolder", testDownloadImagesDefaultFormatInvalidFolder),
        ("testDownloadImagesDefaultFormatInvalidStorage", testDownloadImagesDefaultFormatInvalidStorage),
        ("testDownloadImagesDefaultFormatOnline", testDownloadImagesDefaultFormatOnline),
        ("testDownloadImagesDefaultFormatOnlineInvalidDocument", testDownloadImagesDefaultFormatOnlineInvalidDocument),
        ("testDownloadImagesDefaultFormatOnlineInvalidPassword", testDownloadImagesDefaultFormatOnlineInvalidPassword),
        ("testDownloadImagesOnline", testDownloadImagesOnline),
        ("testDownloadImagesOnlineInvalidDocument", testDownloadImagesOnlineInvalidDocument),
        ("testDownloadImagesOnlineInvalidFormat", testDownloadImagesOnlineInvalidFormat),
        ("testDownloadImagesOnlineInvalidPassword", testDownloadImagesOnlineInvalidPassword),
        ("testDownloadNotesSlide", testDownloadNotesSlide),
        ("testDownloadNotesSlideInvalidName", testDownloadNotesSlideInvalidName),
        ("testDownloadNotesSlideInvalidSlideIndex", testDownloadNotesSlideInvalidSlideIndex),
        ("testDownloadNotesSlideInvalidFormat", testDownloadNotesSlideInvalidFormat),
        ("testDownloadNotesSlideInvalidWidth", testDownloadNotesSlideInvalidWidth),
        ("testDownloadNotesSlideInvalidHeight", testDownloadNotesSlideInvalidHeight),
        ("testDownloadNotesSlideInvalidPassword", testDownloadNotesSlideInvalidPassword),
        ("testDownloadNotesSlideInvalidFolder", testDownloadNotesSlideInvalidFolder),
        ("testDownloadNotesSlideInvalidStorage", testDownloadNotesSlideInvalidStorage),
        ("testDownloadNotesSlideInvalidFontsFolder", testDownloadNotesSlideInvalidFontsFolder),
        ("testDownloadNotesSlideOnline", testDownloadNotesSlideOnline),
        ("testDownloadNotesSlideOnlineInvalidDocument", testDownloadNotesSlideOnlineInvalidDocument),
        ("testDownloadNotesSlideOnlineInvalidSlideIndex", testDownloadNotesSlideOnlineInvalidSlideIndex),
        ("testDownloadNotesSlideOnlineInvalidFormat", testDownloadNotesSlideOnlineInvalidFormat),
        ("testDownloadNotesSlideOnlineInvalidWidth", testDownloadNotesSlideOnlineInvalidWidth),
        ("testDownloadNotesSlideOnlineInvalidHeight", testDownloadNotesSlideOnlineInvalidHeight),
        ("testDownloadNotesSlideOnlineInvalidPassword", testDownloadNotesSlideOnlineInvalidPassword),
        ("testDownloadNotesSlideOnlineInvalidFontsFolder", testDownloadNotesSlideOnlineInvalidFontsFolder),
        ("testDownloadPortionAsMathMl", testDownloadPortionAsMathMl),
        ("testDownloadPortionAsMathMlInvalidName", testDownloadPortionAsMathMlInvalidName),
        ("testDownloadPortionAsMathMlInvalidSlideIndex", testDownloadPortionAsMathMlInvalidSlideIndex),
        ("testDownloadPortionAsMathMlInvalidShapeIndex", testDownloadPortionAsMathMlInvalidShapeIndex),
        ("testDownloadPortionAsMathMlInvalidParagraphIndex", testDownloadPortionAsMathMlInvalidParagraphIndex),
        ("testDownloadPortionAsMathMlInvalidPortionIndex", testDownloadPortionAsMathMlInvalidPortionIndex),
        ("testDownloadPortionAsMathMlInvalidPassword", testDownloadPortionAsMathMlInvalidPassword),
        ("testDownloadPortionAsMathMlInvalidFolder", testDownloadPortionAsMathMlInvalidFolder),
        ("testDownloadPortionAsMathMlInvalidStorage", testDownloadPortionAsMathMlInvalidStorage),
        ("testDownloadPresentation", testDownloadPresentation),
        ("testDownloadPresentationInvalidName", testDownloadPresentationInvalidName),
        ("testDownloadPresentationInvalidFormat", testDownloadPresentationInvalidFormat),
        ("testDownloadPresentationInvalidOptions", testDownloadPresentationInvalidOptions),
        ("testDownloadPresentationInvalidPassword", testDownloadPresentationInvalidPassword),
        ("testDownloadPresentationInvalidFolder", testDownloadPresentationInvalidFolder),
        ("testDownloadPresentationInvalidStorage", testDownloadPresentationInvalidStorage),
        ("testDownloadPresentationInvalidFontsFolder", testDownloadPresentationInvalidFontsFolder),
        ("testDownloadPresentationInvalidSlides", testDownloadPresentationInvalidSlides),
        ("testDownloadShape", testDownloadShape),
        ("testDownloadShapeInvalidName", testDownloadShapeInvalidName),
        ("testDownloadShapeInvalidSlideIndex", testDownloadShapeInvalidSlideIndex),
        ("testDownloadShapeInvalidShapeIndex", testDownloadShapeInvalidShapeIndex),
        ("testDownloadShapeInvalidFormat", testDownloadShapeInvalidFormat),
        ("testDownloadShapeInvalidOptions", testDownloadShapeInvalidOptions),
        ("testDownloadShapeInvalidScaleX", testDownloadShapeInvalidScaleX),
        ("testDownloadShapeInvalidScaleY", testDownloadShapeInvalidScaleY),
        ("testDownloadShapeInvalidBounds", testDownloadShapeInvalidBounds),
        ("testDownloadShapeInvalidPassword", testDownloadShapeInvalidPassword),
        ("testDownloadShapeInvalidFolder", testDownloadShapeInvalidFolder),
        ("testDownloadShapeInvalidStorage", testDownloadShapeInvalidStorage),
        ("testDownloadShapeInvalidFontsFolder", testDownloadShapeInvalidFontsFolder),
        ("testDownloadShapeInvalidSubShape", testDownloadShapeInvalidSubShape),
        ("testDownloadShapeOnline", testDownloadShapeOnline),
        ("testDownloadShapeOnlineInvalidDocument", testDownloadShapeOnlineInvalidDocument),
        ("testDownloadShapeOnlineInvalidSlideIndex", testDownloadShapeOnlineInvalidSlideIndex),
        ("testDownloadShapeOnlineInvalidShapeIndex", testDownloadShapeOnlineInvalidShapeIndex),
        ("testDownloadShapeOnlineInvalidFormat", testDownloadShapeOnlineInvalidFormat),
        ("testDownloadShapeOnlineInvalidScaleX", testDownloadShapeOnlineInvalidScaleX),
        ("testDownloadShapeOnlineInvalidScaleY", testDownloadShapeOnlineInvalidScaleY),
        ("testDownloadShapeOnlineInvalidBounds", testDownloadShapeOnlineInvalidBounds),
        ("testDownloadShapeOnlineInvalidPassword", testDownloadShapeOnlineInvalidPassword),
        ("testDownloadShapeOnlineInvalidStorage", testDownloadShapeOnlineInvalidStorage),
        ("testDownloadShapeOnlineInvalidFontsFolder", testDownloadShapeOnlineInvalidFontsFolder),
        ("testDownloadShapeOnlineInvalidOptions", testDownloadShapeOnlineInvalidOptions),
        ("testDownloadSlide", testDownloadSlide),
        ("testDownloadSlideInvalidName", testDownloadSlideInvalidName),
        ("testDownloadSlideInvalidSlideIndex", testDownloadSlideInvalidSlideIndex),
        ("testDownloadSlideInvalidFormat", testDownloadSlideInvalidFormat),
        ("testDownloadSlideInvalidOptions", testDownloadSlideInvalidOptions),
        ("testDownloadSlideInvalidWidth", testDownloadSlideInvalidWidth),
        ("testDownloadSlideInvalidHeight", testDownloadSlideInvalidHeight),
        ("testDownloadSlideInvalidPassword", testDownloadSlideInvalidPassword),
        ("testDownloadSlideInvalidFolder", testDownloadSlideInvalidFolder),
        ("testDownloadSlideInvalidStorage", testDownloadSlideInvalidStorage),
        ("testDownloadSlideInvalidFontsFolder", testDownloadSlideInvalidFontsFolder),
        ("testDownloadSlideOnline", testDownloadSlideOnline),
        ("testDownloadSlideOnlineInvalidDocument", testDownloadSlideOnlineInvalidDocument),
        ("testDownloadSlideOnlineInvalidSlideIndex", testDownloadSlideOnlineInvalidSlideIndex),
        ("testDownloadSlideOnlineInvalidFormat", testDownloadSlideOnlineInvalidFormat),
        ("testDownloadSlideOnlineInvalidWidth", testDownloadSlideOnlineInvalidWidth),
        ("testDownloadSlideOnlineInvalidHeight", testDownloadSlideOnlineInvalidHeight),
        ("testDownloadSlideOnlineInvalidPassword", testDownloadSlideOnlineInvalidPassword),
        ("testDownloadSlideOnlineInvalidStorage", testDownloadSlideOnlineInvalidStorage),
        ("testDownloadSlideOnlineInvalidFontsFolder", testDownloadSlideOnlineInvalidFontsFolder),
        ("testDownloadSlideOnlineInvalidOptions", testDownloadSlideOnlineInvalidOptions),
        ("testDownloadSpecialSlideShape", testDownloadSpecialSlideShape),
        ("testDownloadSpecialSlideShapeInvalidName", testDownloadSpecialSlideShapeInvalidName),
        ("testDownloadSpecialSlideShapeInvalidSlideIndex", testDownloadSpecialSlideShapeInvalidSlideIndex),
        ("testDownloadSpecialSlideShapeInvalidSlideType", testDownloadSpecialSlideShapeInvalidSlideType),
        ("testDownloadSpecialSlideShapeInvalidShapeIndex", testDownloadSpecialSlideShapeInvalidShapeIndex),
        ("testDownloadSpecialSlideShapeInvalidFormat", testDownloadSpecialSlideShapeInvalidFormat),
        ("testDownloadSpecialSlideShapeInvalidOptions", testDownloadSpecialSlideShapeInvalidOptions),
        ("testDownloadSpecialSlideShapeInvalidScaleX", testDownloadSpecialSlideShapeInvalidScaleX),
        ("testDownloadSpecialSlideShapeInvalidScaleY", testDownloadSpecialSlideShapeInvalidScaleY),
        ("testDownloadSpecialSlideShapeInvalidBounds", testDownloadSpecialSlideShapeInvalidBounds),
        ("testDownloadSpecialSlideShapeInvalidPassword", testDownloadSpecialSlideShapeInvalidPassword),
        ("testDownloadSpecialSlideShapeInvalidFolder", testDownloadSpecialSlideShapeInvalidFolder),
        ("testDownloadSpecialSlideShapeInvalidStorage", testDownloadSpecialSlideShapeInvalidStorage),
        ("testDownloadSpecialSlideShapeInvalidFontsFolder", testDownloadSpecialSlideShapeInvalidFontsFolder),
        ("testDownloadSpecialSlideShapeInvalidSubShape", testDownloadSpecialSlideShapeInvalidSubShape),
        ("testGetAnimation", testGetAnimation),
        ("testGetAnimationInvalidName", testGetAnimationInvalidName),
        ("testGetAnimationInvalidSlideIndex", testGetAnimationInvalidSlideIndex),
        ("testGetAnimationInvalidShapeIndex", testGetAnimationInvalidShapeIndex),
        ("testGetAnimationInvalidParagraphIndex", testGetAnimationInvalidParagraphIndex),
        ("testGetAnimationInvalidPassword", testGetAnimationInvalidPassword),
        ("testGetAnimationInvalidFolder", testGetAnimationInvalidFolder),
        ("testGetAnimationInvalidStorage", testGetAnimationInvalidStorage),
        ("testGetApiInfo", testGetApiInfo),
        ("testGetBackground", testGetBackground),
        ("testGetBackgroundInvalidName", testGetBackgroundInvalidName),
        ("testGetBackgroundInvalidSlideIndex", testGetBackgroundInvalidSlideIndex),
        ("testGetBackgroundInvalidPassword", testGetBackgroundInvalidPassword),
        ("testGetBackgroundInvalidFolder", testGetBackgroundInvalidFolder),
        ("testGetBackgroundInvalidStorage", testGetBackgroundInvalidStorage),
        ("testGetColorScheme", testGetColorScheme),
        ("testGetColorSchemeInvalidName", testGetColorSchemeInvalidName),
        ("testGetColorSchemeInvalidSlideIndex", testGetColorSchemeInvalidSlideIndex),
        ("testGetColorSchemeInvalidPassword", testGetColorSchemeInvalidPassword),
        ("testGetColorSchemeInvalidFolder", testGetColorSchemeInvalidFolder),
        ("testGetColorSchemeInvalidStorage", testGetColorSchemeInvalidStorage),
        ("testGetDiscUsage", testGetDiscUsage),
        ("testGetDiscUsageInvalidStorageName", testGetDiscUsageInvalidStorageName),
        ("testGetDocumentProperties", testGetDocumentProperties),
        ("testGetDocumentPropertiesInvalidName", testGetDocumentPropertiesInvalidName),
        ("testGetDocumentPropertiesInvalidPassword", testGetDocumentPropertiesInvalidPassword),
        ("testGetDocumentPropertiesInvalidFolder", testGetDocumentPropertiesInvalidFolder),
        ("testGetDocumentPropertiesInvalidStorage", testGetDocumentPropertiesInvalidStorage),
        ("testGetDocumentProperty", testGetDocumentProperty),
        ("testGetDocumentPropertyInvalidName", testGetDocumentPropertyInvalidName),
        ("testGetDocumentPropertyInvalidPropertyName", testGetDocumentPropertyInvalidPropertyName),
        ("testGetDocumentPropertyInvalidPassword", testGetDocumentPropertyInvalidPassword),
        ("testGetDocumentPropertyInvalidFolder", testGetDocumentPropertyInvalidFolder),
        ("testGetDocumentPropertyInvalidStorage", testGetDocumentPropertyInvalidStorage),
        ("testGetFileVersions", testGetFileVersions),
        ("testGetFileVersionsInvalidPath", testGetFileVersionsInvalidPath),
        ("testGetFileVersionsInvalidStorageName", testGetFileVersionsInvalidStorageName),
        ("testGetFilesList", testGetFilesList),
        ("testGetFilesListInvalidPath", testGetFilesListInvalidPath),
        ("testGetFilesListInvalidStorageName", testGetFilesListInvalidStorageName),
        ("testGetFontScheme", testGetFontScheme),
        ("testGetFontSchemeInvalidName", testGetFontSchemeInvalidName),
        ("testGetFontSchemeInvalidSlideIndex", testGetFontSchemeInvalidSlideIndex),
        ("testGetFontSchemeInvalidPassword", testGetFontSchemeInvalidPassword),
        ("testGetFontSchemeInvalidFolder", testGetFontSchemeInvalidFolder),
        ("testGetFontSchemeInvalidStorage", testGetFontSchemeInvalidStorage),
        ("testGetFonts", testGetFonts),
        ("testGetFontsInvalidName", testGetFontsInvalidName),
        ("testGetFontsInvalidPassword", testGetFontsInvalidPassword),
        ("testGetFontsInvalidFolder", testGetFontsInvalidFolder),
        ("testGetFontsInvalidStorage", testGetFontsInvalidStorage),
        ("testGetFontsOnline", testGetFontsOnline),
        ("testGetFontsOnlineInvalidDocument", testGetFontsOnlineInvalidDocument),
        ("testGetFontsOnlineInvalidPassword", testGetFontsOnlineInvalidPassword),
        ("testGetFormatScheme", testGetFormatScheme),
        ("testGetFormatSchemeInvalidName", testGetFormatSchemeInvalidName),
        ("testGetFormatSchemeInvalidSlideIndex", testGetFormatSchemeInvalidSlideIndex),
        ("testGetFormatSchemeInvalidPassword", testGetFormatSchemeInvalidPassword),
        ("testGetFormatSchemeInvalidFolder", testGetFormatSchemeInvalidFolder),
        ("testGetFormatSchemeInvalidStorage", testGetFormatSchemeInvalidStorage),
        ("testGetLayoutSlide", testGetLayoutSlide),
        ("testGetLayoutSlideInvalidName", testGetLayoutSlideInvalidName),
        ("testGetLayoutSlideInvalidSlideIndex", testGetLayoutSlideInvalidSlideIndex),
        ("testGetLayoutSlideInvalidPassword", testGetLayoutSlideInvalidPassword),
        ("testGetLayoutSlideInvalidFolder", testGetLayoutSlideInvalidFolder),
        ("testGetLayoutSlideInvalidStorage", testGetLayoutSlideInvalidStorage),
        ("testGetLayoutSlides", testGetLayoutSlides),
        ("testGetLayoutSlidesInvalidName", testGetLayoutSlidesInvalidName),
        ("testGetLayoutSlidesInvalidPassword", testGetLayoutSlidesInvalidPassword),
        ("testGetLayoutSlidesInvalidFolder", testGetLayoutSlidesInvalidFolder),
        ("testGetLayoutSlidesInvalidStorage", testGetLayoutSlidesInvalidStorage),
        ("testGetMasterSlide", testGetMasterSlide),
        ("testGetMasterSlideInvalidName", testGetMasterSlideInvalidName),
        ("testGetMasterSlideInvalidSlideIndex", testGetMasterSlideInvalidSlideIndex),
        ("testGetMasterSlideInvalidPassword", testGetMasterSlideInvalidPassword),
        ("testGetMasterSlideInvalidFolder", testGetMasterSlideInvalidFolder),
        ("testGetMasterSlideInvalidStorage", testGetMasterSlideInvalidStorage),
        ("testGetMasterSlides", testGetMasterSlides),
        ("testGetMasterSlidesInvalidName", testGetMasterSlidesInvalidName),
        ("testGetMasterSlidesInvalidPassword", testGetMasterSlidesInvalidPassword),
        ("testGetMasterSlidesInvalidFolder", testGetMasterSlidesInvalidFolder),
        ("testGetMasterSlidesInvalidStorage", testGetMasterSlidesInvalidStorage),
        ("testGetNotesSlide", testGetNotesSlide),
        ("testGetNotesSlideInvalidName", testGetNotesSlideInvalidName),
        ("testGetNotesSlideInvalidSlideIndex", testGetNotesSlideInvalidSlideIndex),
        ("testGetNotesSlideInvalidPassword", testGetNotesSlideInvalidPassword),
        ("testGetNotesSlideInvalidFolder", testGetNotesSlideInvalidFolder),
        ("testGetNotesSlideInvalidStorage", testGetNotesSlideInvalidStorage),
        ("testGetNotesSlideHeaderFooter", testGetNotesSlideHeaderFooter),
        ("testGetNotesSlideHeaderFooterInvalidName", testGetNotesSlideHeaderFooterInvalidName),
        ("testGetNotesSlideHeaderFooterInvalidSlideIndex", testGetNotesSlideHeaderFooterInvalidSlideIndex),
        ("testGetNotesSlideHeaderFooterInvalidPassword", testGetNotesSlideHeaderFooterInvalidPassword),
        ("testGetNotesSlideHeaderFooterInvalidFolder", testGetNotesSlideHeaderFooterInvalidFolder),
        ("testGetNotesSlideHeaderFooterInvalidStorage", testGetNotesSlideHeaderFooterInvalidStorage),
        ("testGetNotesSlideOnline", testGetNotesSlideOnline),
        ("testGetNotesSlideOnlineInvalidDocument", testGetNotesSlideOnlineInvalidDocument),
        ("testGetNotesSlideOnlineInvalidSlideIndex", testGetNotesSlideOnlineInvalidSlideIndex),
        ("testGetNotesSlideOnlineInvalidPassword", testGetNotesSlideOnlineInvalidPassword),
        ("testGetParagraph", testGetParagraph),
        ("testGetParagraphInvalidName", testGetParagraphInvalidName),
        ("testGetParagraphInvalidSlideIndex", testGetParagraphInvalidSlideIndex),
        ("testGetParagraphInvalidShapeIndex", testGetParagraphInvalidShapeIndex),
        ("testGetParagraphInvalidParagraphIndex", testGetParagraphInvalidParagraphIndex),
        ("testGetParagraphInvalidPassword", testGetParagraphInvalidPassword),
        ("testGetParagraphInvalidFolder", testGetParagraphInvalidFolder),
        ("testGetParagraphInvalidStorage", testGetParagraphInvalidStorage),
        ("testGetParagraphInvalidSubShape", testGetParagraphInvalidSubShape),
        ("testGetParagraphEffective", testGetParagraphEffective),
        ("testGetParagraphEffectiveInvalidName", testGetParagraphEffectiveInvalidName),
        ("testGetParagraphEffectiveInvalidSlideIndex", testGetParagraphEffectiveInvalidSlideIndex),
        ("testGetParagraphEffectiveInvalidShapeIndex", testGetParagraphEffectiveInvalidShapeIndex),
        ("testGetParagraphEffectiveInvalidParagraphIndex", testGetParagraphEffectiveInvalidParagraphIndex),
        ("testGetParagraphEffectiveInvalidPassword", testGetParagraphEffectiveInvalidPassword),
        ("testGetParagraphEffectiveInvalidFolder", testGetParagraphEffectiveInvalidFolder),
        ("testGetParagraphEffectiveInvalidStorage", testGetParagraphEffectiveInvalidStorage),
        ("testGetParagraphEffectiveInvalidSubShape", testGetParagraphEffectiveInvalidSubShape),
        ("testGetParagraphRectangle", testGetParagraphRectangle),
        ("testGetParagraphRectangleInvalidName", testGetParagraphRectangleInvalidName),
        ("testGetParagraphRectangleInvalidSlideIndex", testGetParagraphRectangleInvalidSlideIndex),
        ("testGetParagraphRectangleInvalidShapeIndex", testGetParagraphRectangleInvalidShapeIndex),
        ("testGetParagraphRectangleInvalidParagraphIndex", testGetParagraphRectangleInvalidParagraphIndex),
        ("testGetParagraphRectangleInvalidPassword", testGetParagraphRectangleInvalidPassword),
        ("testGetParagraphRectangleInvalidFolder", testGetParagraphRectangleInvalidFolder),
        ("testGetParagraphRectangleInvalidStorage", testGetParagraphRectangleInvalidStorage),
        ("testGetParagraphs", testGetParagraphs),
        ("testGetParagraphsInvalidName", testGetParagraphsInvalidName),
        ("testGetParagraphsInvalidSlideIndex", testGetParagraphsInvalidSlideIndex),
        ("testGetParagraphsInvalidShapeIndex", testGetParagraphsInvalidShapeIndex),
        ("testGetParagraphsInvalidPassword", testGetParagraphsInvalidPassword),
        ("testGetParagraphsInvalidFolder", testGetParagraphsInvalidFolder),
        ("testGetParagraphsInvalidStorage", testGetParagraphsInvalidStorage),
        ("testGetParagraphsInvalidSubShape", testGetParagraphsInvalidSubShape),
        ("testGetPlaceholder", testGetPlaceholder),
        ("testGetPlaceholderInvalidName", testGetPlaceholderInvalidName),
        ("testGetPlaceholderInvalidSlideIndex", testGetPlaceholderInvalidSlideIndex),
        ("testGetPlaceholderInvalidPlaceholderIndex", testGetPlaceholderInvalidPlaceholderIndex),
        ("testGetPlaceholderInvalidPassword", testGetPlaceholderInvalidPassword),
        ("testGetPlaceholderInvalidFolder", testGetPlaceholderInvalidFolder),
        ("testGetPlaceholderInvalidStorage", testGetPlaceholderInvalidStorage),
        ("testGetPlaceholders", testGetPlaceholders),
        ("testGetPlaceholdersInvalidName", testGetPlaceholdersInvalidName),
        ("testGetPlaceholdersInvalidSlideIndex", testGetPlaceholdersInvalidSlideIndex),
        ("testGetPlaceholdersInvalidPassword", testGetPlaceholdersInvalidPassword),
        ("testGetPlaceholdersInvalidFolder", testGetPlaceholdersInvalidFolder),
        ("testGetPlaceholdersInvalidStorage", testGetPlaceholdersInvalidStorage),
        ("testGetPortion", testGetPortion),
        ("testGetPortionInvalidName", testGetPortionInvalidName),
        ("testGetPortionInvalidSlideIndex", testGetPortionInvalidSlideIndex),
        ("testGetPortionInvalidShapeIndex", testGetPortionInvalidShapeIndex),
        ("testGetPortionInvalidParagraphIndex", testGetPortionInvalidParagraphIndex),
        ("testGetPortionInvalidPortionIndex", testGetPortionInvalidPortionIndex),
        ("testGetPortionInvalidPassword", testGetPortionInvalidPassword),
        ("testGetPortionInvalidFolder", testGetPortionInvalidFolder),
        ("testGetPortionInvalidStorage", testGetPortionInvalidStorage),
        ("testGetPortionInvalidSubShape", testGetPortionInvalidSubShape),
        ("testGetPortionEffective", testGetPortionEffective),
        ("testGetPortionEffectiveInvalidName", testGetPortionEffectiveInvalidName),
        ("testGetPortionEffectiveInvalidSlideIndex", testGetPortionEffectiveInvalidSlideIndex),
        ("testGetPortionEffectiveInvalidShapeIndex", testGetPortionEffectiveInvalidShapeIndex),
        ("testGetPortionEffectiveInvalidParagraphIndex", testGetPortionEffectiveInvalidParagraphIndex),
        ("testGetPortionEffectiveInvalidPortionIndex", testGetPortionEffectiveInvalidPortionIndex),
        ("testGetPortionEffectiveInvalidPassword", testGetPortionEffectiveInvalidPassword),
        ("testGetPortionEffectiveInvalidFolder", testGetPortionEffectiveInvalidFolder),
        ("testGetPortionEffectiveInvalidStorage", testGetPortionEffectiveInvalidStorage),
        ("testGetPortionEffectiveInvalidSubShape", testGetPortionEffectiveInvalidSubShape),
        ("testGetPortionRectangle", testGetPortionRectangle),
        ("testGetPortionRectangleInvalidName", testGetPortionRectangleInvalidName),
        ("testGetPortionRectangleInvalidSlideIndex", testGetPortionRectangleInvalidSlideIndex),
        ("testGetPortionRectangleInvalidShapeIndex", testGetPortionRectangleInvalidShapeIndex),
        ("testGetPortionRectangleInvalidParagraphIndex", testGetPortionRectangleInvalidParagraphIndex),
        ("testGetPortionRectangleInvalidPortionIndex", testGetPortionRectangleInvalidPortionIndex),
        ("testGetPortionRectangleInvalidPassword", testGetPortionRectangleInvalidPassword),
        ("testGetPortionRectangleInvalidFolder", testGetPortionRectangleInvalidFolder),
        ("testGetPortionRectangleInvalidStorage", testGetPortionRectangleInvalidStorage),
        ("testGetPortions", testGetPortions),
        ("testGetPortionsInvalidName", testGetPortionsInvalidName),
        ("testGetPortionsInvalidSlideIndex", testGetPortionsInvalidSlideIndex),
        ("testGetPortionsInvalidShapeIndex", testGetPortionsInvalidShapeIndex),
        ("testGetPortionsInvalidParagraphIndex", testGetPortionsInvalidParagraphIndex),
        ("testGetPortionsInvalidPassword", testGetPortionsInvalidPassword),
        ("testGetPortionsInvalidFolder", testGetPortionsInvalidFolder),
        ("testGetPortionsInvalidStorage", testGetPortionsInvalidStorage),
        ("testGetPortionsInvalidSubShape", testGetPortionsInvalidSubShape),
        ("testGetPresentation", testGetPresentation),
        ("testGetPresentationInvalidName", testGetPresentationInvalidName),
        ("testGetPresentationInvalidPassword", testGetPresentationInvalidPassword),
        ("testGetPresentationInvalidFolder", testGetPresentationInvalidFolder),
        ("testGetPresentationInvalidStorage", testGetPresentationInvalidStorage),
        ("testGetPresentationImages", testGetPresentationImages),
        ("testGetPresentationImagesInvalidName", testGetPresentationImagesInvalidName),
        ("testGetPresentationImagesInvalidPassword", testGetPresentationImagesInvalidPassword),
        ("testGetPresentationImagesInvalidFolder", testGetPresentationImagesInvalidFolder),
        ("testGetPresentationImagesInvalidStorage", testGetPresentationImagesInvalidStorage),
        ("testGetPresentationTextItems", testGetPresentationTextItems),
        ("testGetPresentationTextItemsInvalidName", testGetPresentationTextItemsInvalidName),
        ("testGetPresentationTextItemsInvalidWithEmpty", testGetPresentationTextItemsInvalidWithEmpty),
        ("testGetPresentationTextItemsInvalidPassword", testGetPresentationTextItemsInvalidPassword),
        ("testGetPresentationTextItemsInvalidFolder", testGetPresentationTextItemsInvalidFolder),
        ("testGetPresentationTextItemsInvalidStorage", testGetPresentationTextItemsInvalidStorage),
        ("testGetProtectionProperties", testGetProtectionProperties),
        ("testGetProtectionPropertiesInvalidName", testGetProtectionPropertiesInvalidName),
        ("testGetProtectionPropertiesInvalidPassword", testGetProtectionPropertiesInvalidPassword),
        ("testGetProtectionPropertiesInvalidFolder", testGetProtectionPropertiesInvalidFolder),
        ("testGetProtectionPropertiesInvalidStorage", testGetProtectionPropertiesInvalidStorage),
        ("testGetSections", testGetSections),
        ("testGetSectionsInvalidName", testGetSectionsInvalidName),
        ("testGetSectionsInvalidPassword", testGetSectionsInvalidPassword),
        ("testGetSectionsInvalidFolder", testGetSectionsInvalidFolder),
        ("testGetSectionsInvalidStorage", testGetSectionsInvalidStorage),
        ("testGetShape", testGetShape),
        ("testGetShapeInvalidName", testGetShapeInvalidName),
        ("testGetShapeInvalidSlideIndex", testGetShapeInvalidSlideIndex),
        ("testGetShapeInvalidShapeIndex", testGetShapeInvalidShapeIndex),
        ("testGetShapeInvalidPassword", testGetShapeInvalidPassword),
        ("testGetShapeInvalidFolder", testGetShapeInvalidFolder),
        ("testGetShapeInvalidStorage", testGetShapeInvalidStorage),
        ("testGetShapeInvalidSubShape", testGetShapeInvalidSubShape),
        ("testGetShapeGeometryPath", testGetShapeGeometryPath),
        ("testGetShapeGeometryPathInvalidName", testGetShapeGeometryPathInvalidName),
        ("testGetShapeGeometryPathInvalidSlideIndex", testGetShapeGeometryPathInvalidSlideIndex),
        ("testGetShapeGeometryPathInvalidShapeIndex", testGetShapeGeometryPathInvalidShapeIndex),
        ("testGetShapeGeometryPathInvalidPassword", testGetShapeGeometryPathInvalidPassword),
        ("testGetShapeGeometryPathInvalidFolder", testGetShapeGeometryPathInvalidFolder),
        ("testGetShapeGeometryPathInvalidStorage", testGetShapeGeometryPathInvalidStorage),
        ("testGetShapes", testGetShapes),
        ("testGetShapesInvalidName", testGetShapesInvalidName),
        ("testGetShapesInvalidSlideIndex", testGetShapesInvalidSlideIndex),
        ("testGetShapesInvalidPassword", testGetShapesInvalidPassword),
        ("testGetShapesInvalidFolder", testGetShapesInvalidFolder),
        ("testGetShapesInvalidStorage", testGetShapesInvalidStorage),
        ("testGetShapesInvalidShapeType", testGetShapesInvalidShapeType),
        ("testGetShapesInvalidSubShape", testGetShapesInvalidSubShape),
        ("testGetSlide", testGetSlide),
        ("testGetSlideInvalidName", testGetSlideInvalidName),
        ("testGetSlideInvalidSlideIndex", testGetSlideInvalidSlideIndex),
        ("testGetSlideInvalidPassword", testGetSlideInvalidPassword),
        ("testGetSlideInvalidFolder", testGetSlideInvalidFolder),
        ("testGetSlideInvalidStorage", testGetSlideInvalidStorage),
        ("testGetSlideComments", testGetSlideComments),
        ("testGetSlideCommentsInvalidName", testGetSlideCommentsInvalidName),
        ("testGetSlideCommentsInvalidSlideIndex", testGetSlideCommentsInvalidSlideIndex),
        ("testGetSlideCommentsInvalidPassword", testGetSlideCommentsInvalidPassword),
        ("testGetSlideCommentsInvalidFolder", testGetSlideCommentsInvalidFolder),
        ("testGetSlideCommentsInvalidStorage", testGetSlideCommentsInvalidStorage),
        ("testGetSlideHeaderFooter", testGetSlideHeaderFooter),
        ("testGetSlideHeaderFooterInvalidName", testGetSlideHeaderFooterInvalidName),
        ("testGetSlideHeaderFooterInvalidSlideIndex", testGetSlideHeaderFooterInvalidSlideIndex),
        ("testGetSlideHeaderFooterInvalidPassword", testGetSlideHeaderFooterInvalidPassword),
        ("testGetSlideHeaderFooterInvalidFolder", testGetSlideHeaderFooterInvalidFolder),
        ("testGetSlideHeaderFooterInvalidStorage", testGetSlideHeaderFooterInvalidStorage),
        ("testGetSlideImages", testGetSlideImages),
        ("testGetSlideImagesInvalidName", testGetSlideImagesInvalidName),
        ("testGetSlideImagesInvalidSlideIndex", testGetSlideImagesInvalidSlideIndex),
        ("testGetSlideImagesInvalidPassword", testGetSlideImagesInvalidPassword),
        ("testGetSlideImagesInvalidFolder", testGetSlideImagesInvalidFolder),
        ("testGetSlideImagesInvalidStorage", testGetSlideImagesInvalidStorage),
        ("testGetSlideProperties", testGetSlideProperties),
        ("testGetSlidePropertiesInvalidName", testGetSlidePropertiesInvalidName),
        ("testGetSlidePropertiesInvalidPassword", testGetSlidePropertiesInvalidPassword),
        ("testGetSlidePropertiesInvalidFolder", testGetSlidePropertiesInvalidFolder),
        ("testGetSlidePropertiesInvalidStorage", testGetSlidePropertiesInvalidStorage),
        ("testGetSlideShowProperties", testGetSlideShowProperties),
        ("testGetSlideShowPropertiesInvalidName", testGetSlideShowPropertiesInvalidName),
        ("testGetSlideShowPropertiesInvalidPassword", testGetSlideShowPropertiesInvalidPassword),
        ("testGetSlideShowPropertiesInvalidFolder", testGetSlideShowPropertiesInvalidFolder),
        ("testGetSlideShowPropertiesInvalidStorage", testGetSlideShowPropertiesInvalidStorage),
        ("testGetSlideTextItems", testGetSlideTextItems),
        ("testGetSlideTextItemsInvalidName", testGetSlideTextItemsInvalidName),
        ("testGetSlideTextItemsInvalidSlideIndex", testGetSlideTextItemsInvalidSlideIndex),
        ("testGetSlideTextItemsInvalidWithEmpty", testGetSlideTextItemsInvalidWithEmpty),
        ("testGetSlideTextItemsInvalidPassword", testGetSlideTextItemsInvalidPassword),
        ("testGetSlideTextItemsInvalidFolder", testGetSlideTextItemsInvalidFolder),
        ("testGetSlideTextItemsInvalidStorage", testGetSlideTextItemsInvalidStorage),
        ("testGetSlides", testGetSlides),
        ("testGetSlidesInvalidName", testGetSlidesInvalidName),
        ("testGetSlidesInvalidPassword", testGetSlidesInvalidPassword),
        ("testGetSlidesInvalidFolder", testGetSlidesInvalidFolder),
        ("testGetSlidesInvalidStorage", testGetSlidesInvalidStorage),
        ("testGetSpecialSlideAnimation", testGetSpecialSlideAnimation),
        ("testGetSpecialSlideAnimationInvalidName", testGetSpecialSlideAnimationInvalidName),
        ("testGetSpecialSlideAnimationInvalidSlideIndex", testGetSpecialSlideAnimationInvalidSlideIndex),
        ("testGetSpecialSlideAnimationInvalidSlideType", testGetSpecialSlideAnimationInvalidSlideType),
        ("testGetSpecialSlideAnimationInvalidShapeIndex", testGetSpecialSlideAnimationInvalidShapeIndex),
        ("testGetSpecialSlideAnimationInvalidParagraphIndex", testGetSpecialSlideAnimationInvalidParagraphIndex),
        ("testGetSpecialSlideAnimationInvalidPassword", testGetSpecialSlideAnimationInvalidPassword),
        ("testGetSpecialSlideAnimationInvalidFolder", testGetSpecialSlideAnimationInvalidFolder),
        ("testGetSpecialSlideAnimationInvalidStorage", testGetSpecialSlideAnimationInvalidStorage),
        ("testGetSpecialSlideParagraph", testGetSpecialSlideParagraph),
        ("testGetSpecialSlideParagraphInvalidName", testGetSpecialSlideParagraphInvalidName),
        ("testGetSpecialSlideParagraphInvalidSlideIndex", testGetSpecialSlideParagraphInvalidSlideIndex),
        ("testGetSpecialSlideParagraphInvalidSlideType", testGetSpecialSlideParagraphInvalidSlideType),
        ("testGetSpecialSlideParagraphInvalidShapeIndex", testGetSpecialSlideParagraphInvalidShapeIndex),
        ("testGetSpecialSlideParagraphInvalidParagraphIndex", testGetSpecialSlideParagraphInvalidParagraphIndex),
        ("testGetSpecialSlideParagraphInvalidPassword", testGetSpecialSlideParagraphInvalidPassword),
        ("testGetSpecialSlideParagraphInvalidFolder", testGetSpecialSlideParagraphInvalidFolder),
        ("testGetSpecialSlideParagraphInvalidStorage", testGetSpecialSlideParagraphInvalidStorage),
        ("testGetSpecialSlideParagraphInvalidSubShape", testGetSpecialSlideParagraphInvalidSubShape),
        ("testGetSpecialSlideParagraphs", testGetSpecialSlideParagraphs),
        ("testGetSpecialSlideParagraphsInvalidName", testGetSpecialSlideParagraphsInvalidName),
        ("testGetSpecialSlideParagraphsInvalidSlideIndex", testGetSpecialSlideParagraphsInvalidSlideIndex),
        ("testGetSpecialSlideParagraphsInvalidSlideType", testGetSpecialSlideParagraphsInvalidSlideType),
        ("testGetSpecialSlideParagraphsInvalidShapeIndex", testGetSpecialSlideParagraphsInvalidShapeIndex),
        ("testGetSpecialSlideParagraphsInvalidPassword", testGetSpecialSlideParagraphsInvalidPassword),
        ("testGetSpecialSlideParagraphsInvalidFolder", testGetSpecialSlideParagraphsInvalidFolder),
        ("testGetSpecialSlideParagraphsInvalidStorage", testGetSpecialSlideParagraphsInvalidStorage),
        ("testGetSpecialSlideParagraphsInvalidSubShape", testGetSpecialSlideParagraphsInvalidSubShape),
        ("testGetSpecialSlidePortion", testGetSpecialSlidePortion),
        ("testGetSpecialSlidePortionInvalidName", testGetSpecialSlidePortionInvalidName),
        ("testGetSpecialSlidePortionInvalidSlideIndex", testGetSpecialSlidePortionInvalidSlideIndex),
        ("testGetSpecialSlidePortionInvalidSlideType", testGetSpecialSlidePortionInvalidSlideType),
        ("testGetSpecialSlidePortionInvalidShapeIndex", testGetSpecialSlidePortionInvalidShapeIndex),
        ("testGetSpecialSlidePortionInvalidParagraphIndex", testGetSpecialSlidePortionInvalidParagraphIndex),
        ("testGetSpecialSlidePortionInvalidPortionIndex", testGetSpecialSlidePortionInvalidPortionIndex),
        ("testGetSpecialSlidePortionInvalidPassword", testGetSpecialSlidePortionInvalidPassword),
        ("testGetSpecialSlidePortionInvalidFolder", testGetSpecialSlidePortionInvalidFolder),
        ("testGetSpecialSlidePortionInvalidStorage", testGetSpecialSlidePortionInvalidStorage),
        ("testGetSpecialSlidePortionInvalidSubShape", testGetSpecialSlidePortionInvalidSubShape),
        ("testGetSpecialSlidePortions", testGetSpecialSlidePortions),
        ("testGetSpecialSlidePortionsInvalidName", testGetSpecialSlidePortionsInvalidName),
        ("testGetSpecialSlidePortionsInvalidSlideIndex", testGetSpecialSlidePortionsInvalidSlideIndex),
        ("testGetSpecialSlidePortionsInvalidSlideType", testGetSpecialSlidePortionsInvalidSlideType),
        ("testGetSpecialSlidePortionsInvalidShapeIndex", testGetSpecialSlidePortionsInvalidShapeIndex),
        ("testGetSpecialSlidePortionsInvalidParagraphIndex", testGetSpecialSlidePortionsInvalidParagraphIndex),
        ("testGetSpecialSlidePortionsInvalidPassword", testGetSpecialSlidePortionsInvalidPassword),
        ("testGetSpecialSlidePortionsInvalidFolder", testGetSpecialSlidePortionsInvalidFolder),
        ("testGetSpecialSlidePortionsInvalidStorage", testGetSpecialSlidePortionsInvalidStorage),
        ("testGetSpecialSlidePortionsInvalidSubShape", testGetSpecialSlidePortionsInvalidSubShape),
        ("testGetSpecialSlideShape", testGetSpecialSlideShape),
        ("testGetSpecialSlideShapeInvalidName", testGetSpecialSlideShapeInvalidName),
        ("testGetSpecialSlideShapeInvalidSlideIndex", testGetSpecialSlideShapeInvalidSlideIndex),
        ("testGetSpecialSlideShapeInvalidSlideType", testGetSpecialSlideShapeInvalidSlideType),
        ("testGetSpecialSlideShapeInvalidShapeIndex", testGetSpecialSlideShapeInvalidShapeIndex),
        ("testGetSpecialSlideShapeInvalidPassword", testGetSpecialSlideShapeInvalidPassword),
        ("testGetSpecialSlideShapeInvalidFolder", testGetSpecialSlideShapeInvalidFolder),
        ("testGetSpecialSlideShapeInvalidStorage", testGetSpecialSlideShapeInvalidStorage),
        ("testGetSpecialSlideShapeInvalidSubShape", testGetSpecialSlideShapeInvalidSubShape),
        ("testGetSpecialSlideShapes", testGetSpecialSlideShapes),
        ("testGetSpecialSlideShapesInvalidName", testGetSpecialSlideShapesInvalidName),
        ("testGetSpecialSlideShapesInvalidSlideIndex", testGetSpecialSlideShapesInvalidSlideIndex),
        ("testGetSpecialSlideShapesInvalidSlideType", testGetSpecialSlideShapesInvalidSlideType),
        ("testGetSpecialSlideShapesInvalidPassword", testGetSpecialSlideShapesInvalidPassword),
        ("testGetSpecialSlideShapesInvalidFolder", testGetSpecialSlideShapesInvalidFolder),
        ("testGetSpecialSlideShapesInvalidStorage", testGetSpecialSlideShapesInvalidStorage),
        ("testGetSpecialSlideShapesInvalidSubShape", testGetSpecialSlideShapesInvalidSubShape),
        ("testGetTheme", testGetTheme),
        ("testGetThemeInvalidName", testGetThemeInvalidName),
        ("testGetThemeInvalidSlideIndex", testGetThemeInvalidSlideIndex),
        ("testGetThemeInvalidPassword", testGetThemeInvalidPassword),
        ("testGetThemeInvalidFolder", testGetThemeInvalidFolder),
        ("testGetThemeInvalidStorage", testGetThemeInvalidStorage),
        ("testGetViewProperties", testGetViewProperties),
        ("testGetViewPropertiesInvalidName", testGetViewPropertiesInvalidName),
        ("testGetViewPropertiesInvalidPassword", testGetViewPropertiesInvalidPassword),
        ("testGetViewPropertiesInvalidFolder", testGetViewPropertiesInvalidFolder),
        ("testGetViewPropertiesInvalidStorage", testGetViewPropertiesInvalidStorage),
        ("testHighlightShapeRegex", testHighlightShapeRegex),
        ("testHighlightShapeRegexInvalidName", testHighlightShapeRegexInvalidName),
        ("testHighlightShapeRegexInvalidSlideIndex", testHighlightShapeRegexInvalidSlideIndex),
        ("testHighlightShapeRegexInvalidShapeIndex", testHighlightShapeRegexInvalidShapeIndex),
        ("testHighlightShapeRegexInvalidRegex", testHighlightShapeRegexInvalidRegex),
        ("testHighlightShapeRegexInvalidColor", testHighlightShapeRegexInvalidColor),
        ("testHighlightShapeRegexInvalidWholeWordsOnly", testHighlightShapeRegexInvalidWholeWordsOnly),
        ("testHighlightShapeRegexInvalidIgnoreCase", testHighlightShapeRegexInvalidIgnoreCase),
        ("testHighlightShapeRegexInvalidPassword", testHighlightShapeRegexInvalidPassword),
        ("testHighlightShapeRegexInvalidFolder", testHighlightShapeRegexInvalidFolder),
        ("testHighlightShapeRegexInvalidStorage", testHighlightShapeRegexInvalidStorage),
        ("testHighlightShapeText", testHighlightShapeText),
        ("testHighlightShapeTextInvalidName", testHighlightShapeTextInvalidName),
        ("testHighlightShapeTextInvalidSlideIndex", testHighlightShapeTextInvalidSlideIndex),
        ("testHighlightShapeTextInvalidShapeIndex", testHighlightShapeTextInvalidShapeIndex),
        ("testHighlightShapeTextInvalidText", testHighlightShapeTextInvalidText),
        ("testHighlightShapeTextInvalidColor", testHighlightShapeTextInvalidColor),
        ("testHighlightShapeTextInvalidWholeWordsOnly", testHighlightShapeTextInvalidWholeWordsOnly),
        ("testHighlightShapeTextInvalidIgnoreCase", testHighlightShapeTextInvalidIgnoreCase),
        ("testHighlightShapeTextInvalidPassword", testHighlightShapeTextInvalidPassword),
        ("testHighlightShapeTextInvalidFolder", testHighlightShapeTextInvalidFolder),
        ("testHighlightShapeTextInvalidStorage", testHighlightShapeTextInvalidStorage),
        ("testImportFromHtml", testImportFromHtml),
        ("testImportFromHtmlInvalidName", testImportFromHtmlInvalidName),
        ("testImportFromHtmlInvalidHtml", testImportFromHtmlInvalidHtml),
        ("testImportFromHtmlInvalidPassword", testImportFromHtmlInvalidPassword),
        ("testImportFromHtmlInvalidFolder", testImportFromHtmlInvalidFolder),
        ("testImportFromHtmlInvalidStorage", testImportFromHtmlInvalidStorage),
        ("testImportFromPdf", testImportFromPdf),
        ("testImportFromPdfInvalidName", testImportFromPdfInvalidName),
        ("testImportFromPdfInvalidPdf", testImportFromPdfInvalidPdf),
        ("testImportFromPdfInvalidPassword", testImportFromPdfInvalidPassword),
        ("testImportFromPdfInvalidFolder", testImportFromPdfInvalidFolder),
        ("testImportFromPdfInvalidStorage", testImportFromPdfInvalidStorage),
        ("testImportShapesFromSvg", testImportShapesFromSvg),
        ("testImportShapesFromSvgInvalidName", testImportShapesFromSvgInvalidName),
        ("testImportShapesFromSvgInvalidSlideIndex", testImportShapesFromSvgInvalidSlideIndex),
        ("testImportShapesFromSvgInvalidImage", testImportShapesFromSvgInvalidImage),
        ("testImportShapesFromSvgInvalidX", testImportShapesFromSvgInvalidX),
        ("testImportShapesFromSvgInvalidY", testImportShapesFromSvgInvalidY),
        ("testImportShapesFromSvgInvalidWidth", testImportShapesFromSvgInvalidWidth),
        ("testImportShapesFromSvgInvalidHeight", testImportShapesFromSvgInvalidHeight),
        ("testImportShapesFromSvgInvalidShapes", testImportShapesFromSvgInvalidShapes),
        ("testImportShapesFromSvgInvalidGroup", testImportShapesFromSvgInvalidGroup),
        ("testImportShapesFromSvgInvalidPassword", testImportShapesFromSvgInvalidPassword),
        ("testImportShapesFromSvgInvalidFolder", testImportShapesFromSvgInvalidFolder),
        ("testImportShapesFromSvgInvalidStorage", testImportShapesFromSvgInvalidStorage),
        ("testMerge", testMerge),
        ("testMergeInvalidName", testMergeInvalidName),
        ("testMergeInvalidRequest", testMergeInvalidRequest),
        ("testMergeInvalidPassword", testMergeInvalidPassword),
        ("testMergeInvalidFolder", testMergeInvalidFolder),
        ("testMergeInvalidStorage", testMergeInvalidStorage),
        ("testMergeAndSaveOnline", testMergeAndSaveOnline),
        ("testMergeAndSaveOnlineInvalidOutPath", testMergeAndSaveOnlineInvalidOutPath),
        ("testMergeAndSaveOnlineInvalidFiles", testMergeAndSaveOnlineInvalidFiles),
        ("testMergeAndSaveOnlineInvalidRequest", testMergeAndSaveOnlineInvalidRequest),
        ("testMergeAndSaveOnlineInvalidStorage", testMergeAndSaveOnlineInvalidStorage),
        ("testMergeOnline", testMergeOnline),
        ("testMergeOnlineInvalidFiles", testMergeOnlineInvalidFiles),
        ("testMergeOnlineInvalidRequest", testMergeOnlineInvalidRequest),
        ("testMergeOnlineInvalidStorage", testMergeOnlineInvalidStorage),
        ("testMoveFile", testMoveFile),
        ("testMoveFileInvalidSrcPath", testMoveFileInvalidSrcPath),
        ("testMoveFileInvalidDestPath", testMoveFileInvalidDestPath),
        ("testMoveFileInvalidSrcStorageName", testMoveFileInvalidSrcStorageName),
        ("testMoveFileInvalidDestStorageName", testMoveFileInvalidDestStorageName),
        ("testMoveFileInvalidVersionId", testMoveFileInvalidVersionId),
        ("testMoveFolder", testMoveFolder),
        ("testMoveFolderInvalidSrcPath", testMoveFolderInvalidSrcPath),
        ("testMoveFolderInvalidDestPath", testMoveFolderInvalidDestPath),
        ("testMoveFolderInvalidSrcStorageName", testMoveFolderInvalidSrcStorageName),
        ("testMoveFolderInvalidDestStorageName", testMoveFolderInvalidDestStorageName),
        ("testMoveSection", testMoveSection),
        ("testMoveSectionInvalidName", testMoveSectionInvalidName),
        ("testMoveSectionInvalidSectionIndex", testMoveSectionInvalidSectionIndex),
        ("testMoveSectionInvalidNewPosition", testMoveSectionInvalidNewPosition),
        ("testMoveSectionInvalidPassword", testMoveSectionInvalidPassword),
        ("testMoveSectionInvalidFolder", testMoveSectionInvalidFolder),
        ("testMoveSectionInvalidStorage", testMoveSectionInvalidStorage),
        ("testMoveSlide", testMoveSlide),
        ("testMoveSlideInvalidName", testMoveSlideInvalidName),
        ("testMoveSlideInvalidSlideIndex", testMoveSlideInvalidSlideIndex),
        ("testMoveSlideInvalidNewPosition", testMoveSlideInvalidNewPosition),
        ("testMoveSlideInvalidPassword", testMoveSlideInvalidPassword),
        ("testMoveSlideInvalidFolder", testMoveSlideInvalidFolder),
        ("testMoveSlideInvalidStorage", testMoveSlideInvalidStorage),
        ("testNotesSlideExists", testNotesSlideExists),
        ("testNotesSlideExistsInvalidName", testNotesSlideExistsInvalidName),
        ("testNotesSlideExistsInvalidSlideIndex", testNotesSlideExistsInvalidSlideIndex),
        ("testNotesSlideExistsInvalidPassword", testNotesSlideExistsInvalidPassword),
        ("testNotesSlideExistsInvalidFolder", testNotesSlideExistsInvalidFolder),
        ("testNotesSlideExistsInvalidStorage", testNotesSlideExistsInvalidStorage),
        ("testNotesSlideExistsOnline", testNotesSlideExistsOnline),
        ("testNotesSlideExistsOnlineInvalidDocument", testNotesSlideExistsOnlineInvalidDocument),
        ("testNotesSlideExistsOnlineInvalidSlideIndex", testNotesSlideExistsOnlineInvalidSlideIndex),
        ("testNotesSlideExistsOnlineInvalidPassword", testNotesSlideExistsOnlineInvalidPassword),
        ("testObjectExists", testObjectExists),
        ("testObjectExistsInvalidPath", testObjectExistsInvalidPath),
        ("testObjectExistsInvalidStorageName", testObjectExistsInvalidStorageName),
        ("testObjectExistsInvalidVersionId", testObjectExistsInvalidVersionId),
        ("testOrderedMerge", testOrderedMerge),
        ("testOrderedMergeInvalidName", testOrderedMergeInvalidName),
        ("testOrderedMergeInvalidRequest", testOrderedMergeInvalidRequest),
        ("testOrderedMergeInvalidPassword", testOrderedMergeInvalidPassword),
        ("testOrderedMergeInvalidFolder", testOrderedMergeInvalidFolder),
        ("testOrderedMergeInvalidStorage", testOrderedMergeInvalidStorage),
        ("testPipeline", testPipeline),
        ("testPipelineInvalidPipeline", testPipelineInvalidPipeline),
        ("testPipelineInvalidFiles", testPipelineInvalidFiles),
        ("testReorderSlides", testReorderSlides),
        ("testReorderSlidesInvalidName", testReorderSlidesInvalidName),
        ("testReorderSlidesInvalidOldPositions", testReorderSlidesInvalidOldPositions),
        ("testReorderSlidesInvalidNewPositions", testReorderSlidesInvalidNewPositions),
        ("testReorderSlidesInvalidPassword", testReorderSlidesInvalidPassword),
        ("testReorderSlidesInvalidFolder", testReorderSlidesInvalidFolder),
        ("testReorderSlidesInvalidStorage", testReorderSlidesInvalidStorage),
        ("testReplaceFont", testReplaceFont),
        ("testReplaceFontInvalidName", testReplaceFontInvalidName),
        ("testReplaceFontInvalidSourceFont", testReplaceFontInvalidSourceFont),
        ("testReplaceFontInvalidTargetFont", testReplaceFontInvalidTargetFont),
        ("testReplaceFontInvalidEmbed", testReplaceFontInvalidEmbed),
        ("testReplaceFontInvalidPassword", testReplaceFontInvalidPassword),
        ("testReplaceFontInvalidFolder", testReplaceFontInvalidFolder),
        ("testReplaceFontInvalidStorage", testReplaceFontInvalidStorage),
        ("testReplaceFontInvalidFontsFolder", testReplaceFontInvalidFontsFolder),
        ("testReplaceFontOnline", testReplaceFontOnline),
        ("testReplaceFontOnlineInvalidDocument", testReplaceFontOnlineInvalidDocument),
        ("testReplaceFontOnlineInvalidSourceFont", testReplaceFontOnlineInvalidSourceFont),
        ("testReplaceFontOnlineInvalidTargetFont", testReplaceFontOnlineInvalidTargetFont),
        ("testReplaceFontOnlineInvalidEmbed", testReplaceFontOnlineInvalidEmbed),
        ("testReplaceFontOnlineInvalidPassword", testReplaceFontOnlineInvalidPassword),
        ("testReplaceFontOnlineInvalidFontsFolder", testReplaceFontOnlineInvalidFontsFolder),
        ("testReplacePresentationText", testReplacePresentationText),
        ("testReplacePresentationTextInvalidName", testReplacePresentationTextInvalidName),
        ("testReplacePresentationTextInvalidOldValue", testReplacePresentationTextInvalidOldValue),
        ("testReplacePresentationTextInvalidNewValue", testReplacePresentationTextInvalidNewValue),
        ("testReplacePresentationTextInvalidIgnoreCase", testReplacePresentationTextInvalidIgnoreCase),
        ("testReplacePresentationTextInvalidPassword", testReplacePresentationTextInvalidPassword),
        ("testReplacePresentationTextInvalidFolder", testReplacePresentationTextInvalidFolder),
        ("testReplacePresentationTextInvalidStorage", testReplacePresentationTextInvalidStorage),
        ("testReplacePresentationTextOnline", testReplacePresentationTextOnline),
        ("testReplacePresentationTextOnlineInvalidDocument", testReplacePresentationTextOnlineInvalidDocument),
        ("testReplacePresentationTextOnlineInvalidOldValue", testReplacePresentationTextOnlineInvalidOldValue),
        ("testReplacePresentationTextOnlineInvalidNewValue", testReplacePresentationTextOnlineInvalidNewValue),
        ("testReplacePresentationTextOnlineInvalidIgnoreCase", testReplacePresentationTextOnlineInvalidIgnoreCase),
        ("testReplacePresentationTextOnlineInvalidPassword", testReplacePresentationTextOnlineInvalidPassword),
        ("testReplaceSlideText", testReplaceSlideText),
        ("testReplaceSlideTextInvalidName", testReplaceSlideTextInvalidName),
        ("testReplaceSlideTextInvalidSlideIndex", testReplaceSlideTextInvalidSlideIndex),
        ("testReplaceSlideTextInvalidOldValue", testReplaceSlideTextInvalidOldValue),
        ("testReplaceSlideTextInvalidNewValue", testReplaceSlideTextInvalidNewValue),
        ("testReplaceSlideTextInvalidIgnoreCase", testReplaceSlideTextInvalidIgnoreCase),
        ("testReplaceSlideTextInvalidPassword", testReplaceSlideTextInvalidPassword),
        ("testReplaceSlideTextInvalidFolder", testReplaceSlideTextInvalidFolder),
        ("testReplaceSlideTextInvalidStorage", testReplaceSlideTextInvalidStorage),
        ("testReplaceSlideTextOnline", testReplaceSlideTextOnline),
        ("testReplaceSlideTextOnlineInvalidDocument", testReplaceSlideTextOnlineInvalidDocument),
        ("testReplaceSlideTextOnlineInvalidSlideIndex", testReplaceSlideTextOnlineInvalidSlideIndex),
        ("testReplaceSlideTextOnlineInvalidOldValue", testReplaceSlideTextOnlineInvalidOldValue),
        ("testReplaceSlideTextOnlineInvalidNewValue", testReplaceSlideTextOnlineInvalidNewValue),
        ("testReplaceSlideTextOnlineInvalidIgnoreCase", testReplaceSlideTextOnlineInvalidIgnoreCase),
        ("testReplaceSlideTextOnlineInvalidPassword", testReplaceSlideTextOnlineInvalidPassword),
        ("testSavePortionAsMathMl", testSavePortionAsMathMl),
        ("testSavePortionAsMathMlInvalidName", testSavePortionAsMathMlInvalidName),
        ("testSavePortionAsMathMlInvalidSlideIndex", testSavePortionAsMathMlInvalidSlideIndex),
        ("testSavePortionAsMathMlInvalidShapeIndex", testSavePortionAsMathMlInvalidShapeIndex),
        ("testSavePortionAsMathMlInvalidParagraphIndex", testSavePortionAsMathMlInvalidParagraphIndex),
        ("testSavePortionAsMathMlInvalidPortionIndex", testSavePortionAsMathMlInvalidPortionIndex),
        ("testSavePortionAsMathMlInvalidOutPath", testSavePortionAsMathMlInvalidOutPath),
        ("testSavePortionAsMathMlInvalidPassword", testSavePortionAsMathMlInvalidPassword),
        ("testSavePortionAsMathMlInvalidFolder", testSavePortionAsMathMlInvalidFolder),
        ("testSavePortionAsMathMlInvalidStorage", testSavePortionAsMathMlInvalidStorage),
        ("testSavePresentation", testSavePresentation),
        ("testSavePresentationInvalidName", testSavePresentationInvalidName),
        ("testSavePresentationInvalidFormat", testSavePresentationInvalidFormat),
        ("testSavePresentationInvalidOutPath", testSavePresentationInvalidOutPath),
        ("testSavePresentationInvalidOptions", testSavePresentationInvalidOptions),
        ("testSavePresentationInvalidPassword", testSavePresentationInvalidPassword),
        ("testSavePresentationInvalidFolder", testSavePresentationInvalidFolder),
        ("testSavePresentationInvalidStorage", testSavePresentationInvalidStorage),
        ("testSavePresentationInvalidFontsFolder", testSavePresentationInvalidFontsFolder),
        ("testSavePresentationInvalidSlides", testSavePresentationInvalidSlides),
        ("testSaveShape", testSaveShape),
        ("testSaveShapeInvalidName", testSaveShapeInvalidName),
        ("testSaveShapeInvalidSlideIndex", testSaveShapeInvalidSlideIndex),
        ("testSaveShapeInvalidShapeIndex", testSaveShapeInvalidShapeIndex),
        ("testSaveShapeInvalidFormat", testSaveShapeInvalidFormat),
        ("testSaveShapeInvalidOutPath", testSaveShapeInvalidOutPath),
        ("testSaveShapeInvalidOptions", testSaveShapeInvalidOptions),
        ("testSaveShapeInvalidScaleX", testSaveShapeInvalidScaleX),
        ("testSaveShapeInvalidScaleY", testSaveShapeInvalidScaleY),
        ("testSaveShapeInvalidBounds", testSaveShapeInvalidBounds),
        ("testSaveShapeInvalidPassword", testSaveShapeInvalidPassword),
        ("testSaveShapeInvalidFolder", testSaveShapeInvalidFolder),
        ("testSaveShapeInvalidStorage", testSaveShapeInvalidStorage),
        ("testSaveShapeInvalidFontsFolder", testSaveShapeInvalidFontsFolder),
        ("testSaveShapeInvalidSubShape", testSaveShapeInvalidSubShape),
        ("testSaveShapeOnline", testSaveShapeOnline),
        ("testSaveShapeOnlineInvalidDocument", testSaveShapeOnlineInvalidDocument),
        ("testSaveShapeOnlineInvalidSlideIndex", testSaveShapeOnlineInvalidSlideIndex),
        ("testSaveShapeOnlineInvalidShapeIndex", testSaveShapeOnlineInvalidShapeIndex),
        ("testSaveShapeOnlineInvalidFormat", testSaveShapeOnlineInvalidFormat),
        ("testSaveShapeOnlineInvalidOutPath", testSaveShapeOnlineInvalidOutPath),
        ("testSaveShapeOnlineInvalidScaleX", testSaveShapeOnlineInvalidScaleX),
        ("testSaveShapeOnlineInvalidScaleY", testSaveShapeOnlineInvalidScaleY),
        ("testSaveShapeOnlineInvalidBounds", testSaveShapeOnlineInvalidBounds),
        ("testSaveShapeOnlineInvalidPassword", testSaveShapeOnlineInvalidPassword),
        ("testSaveShapeOnlineInvalidStorage", testSaveShapeOnlineInvalidStorage),
        ("testSaveShapeOnlineInvalidFontsFolder", testSaveShapeOnlineInvalidFontsFolder),
        ("testSaveShapeOnlineInvalidOptions", testSaveShapeOnlineInvalidOptions),
        ("testSaveSlide", testSaveSlide),
        ("testSaveSlideInvalidName", testSaveSlideInvalidName),
        ("testSaveSlideInvalidSlideIndex", testSaveSlideInvalidSlideIndex),
        ("testSaveSlideInvalidFormat", testSaveSlideInvalidFormat),
        ("testSaveSlideInvalidOutPath", testSaveSlideInvalidOutPath),
        ("testSaveSlideInvalidOptions", testSaveSlideInvalidOptions),
        ("testSaveSlideInvalidWidth", testSaveSlideInvalidWidth),
        ("testSaveSlideInvalidHeight", testSaveSlideInvalidHeight),
        ("testSaveSlideInvalidPassword", testSaveSlideInvalidPassword),
        ("testSaveSlideInvalidFolder", testSaveSlideInvalidFolder),
        ("testSaveSlideInvalidStorage", testSaveSlideInvalidStorage),
        ("testSaveSlideInvalidFontsFolder", testSaveSlideInvalidFontsFolder),
        ("testSaveSlideOnline", testSaveSlideOnline),
        ("testSaveSlideOnlineInvalidDocument", testSaveSlideOnlineInvalidDocument),
        ("testSaveSlideOnlineInvalidSlideIndex", testSaveSlideOnlineInvalidSlideIndex),
        ("testSaveSlideOnlineInvalidFormat", testSaveSlideOnlineInvalidFormat),
        ("testSaveSlideOnlineInvalidOutPath", testSaveSlideOnlineInvalidOutPath),
        ("testSaveSlideOnlineInvalidWidth", testSaveSlideOnlineInvalidWidth),
        ("testSaveSlideOnlineInvalidHeight", testSaveSlideOnlineInvalidHeight),
        ("testSaveSlideOnlineInvalidPassword", testSaveSlideOnlineInvalidPassword),
        ("testSaveSlideOnlineInvalidStorage", testSaveSlideOnlineInvalidStorage),
        ("testSaveSlideOnlineInvalidFontsFolder", testSaveSlideOnlineInvalidFontsFolder),
        ("testSaveSlideOnlineInvalidOptions", testSaveSlideOnlineInvalidOptions),
        ("testSaveSpecialSlideShape", testSaveSpecialSlideShape),
        ("testSaveSpecialSlideShapeInvalidName", testSaveSpecialSlideShapeInvalidName),
        ("testSaveSpecialSlideShapeInvalidSlideIndex", testSaveSpecialSlideShapeInvalidSlideIndex),
        ("testSaveSpecialSlideShapeInvalidSlideType", testSaveSpecialSlideShapeInvalidSlideType),
        ("testSaveSpecialSlideShapeInvalidShapeIndex", testSaveSpecialSlideShapeInvalidShapeIndex),
        ("testSaveSpecialSlideShapeInvalidFormat", testSaveSpecialSlideShapeInvalidFormat),
        ("testSaveSpecialSlideShapeInvalidOutPath", testSaveSpecialSlideShapeInvalidOutPath),
        ("testSaveSpecialSlideShapeInvalidOptions", testSaveSpecialSlideShapeInvalidOptions),
        ("testSaveSpecialSlideShapeInvalidScaleX", testSaveSpecialSlideShapeInvalidScaleX),
        ("testSaveSpecialSlideShapeInvalidScaleY", testSaveSpecialSlideShapeInvalidScaleY),
        ("testSaveSpecialSlideShapeInvalidBounds", testSaveSpecialSlideShapeInvalidBounds),
        ("testSaveSpecialSlideShapeInvalidPassword", testSaveSpecialSlideShapeInvalidPassword),
        ("testSaveSpecialSlideShapeInvalidFolder", testSaveSpecialSlideShapeInvalidFolder),
        ("testSaveSpecialSlideShapeInvalidStorage", testSaveSpecialSlideShapeInvalidStorage),
        ("testSaveSpecialSlideShapeInvalidFontsFolder", testSaveSpecialSlideShapeInvalidFontsFolder),
        ("testSaveSpecialSlideShapeInvalidSubShape", testSaveSpecialSlideShapeInvalidSubShape),
        ("testSetAnimation", testSetAnimation),
        ("testSetAnimationInvalidName", testSetAnimationInvalidName),
        ("testSetAnimationInvalidSlideIndex", testSetAnimationInvalidSlideIndex),
        ("testSetAnimationInvalidAnimation", testSetAnimationInvalidAnimation),
        ("testSetAnimationInvalidPassword", testSetAnimationInvalidPassword),
        ("testSetAnimationInvalidFolder", testSetAnimationInvalidFolder),
        ("testSetAnimationInvalidStorage", testSetAnimationInvalidStorage),
        ("testSetBackground", testSetBackground),
        ("testSetBackgroundInvalidName", testSetBackgroundInvalidName),
        ("testSetBackgroundInvalidSlideIndex", testSetBackgroundInvalidSlideIndex),
        ("testSetBackgroundInvalidBackground", testSetBackgroundInvalidBackground),
        ("testSetBackgroundInvalidPassword", testSetBackgroundInvalidPassword),
        ("testSetBackgroundInvalidFolder", testSetBackgroundInvalidFolder),
        ("testSetBackgroundInvalidStorage", testSetBackgroundInvalidStorage),
        ("testSetBackgroundColor", testSetBackgroundColor),
        ("testSetBackgroundColorInvalidName", testSetBackgroundColorInvalidName),
        ("testSetBackgroundColorInvalidSlideIndex", testSetBackgroundColorInvalidSlideIndex),
        ("testSetBackgroundColorInvalidColor", testSetBackgroundColorInvalidColor),
        ("testSetBackgroundColorInvalidPassword", testSetBackgroundColorInvalidPassword),
        ("testSetBackgroundColorInvalidFolder", testSetBackgroundColorInvalidFolder),
        ("testSetBackgroundColorInvalidStorage", testSetBackgroundColorInvalidStorage),
        ("testSetChartAxis", testSetChartAxis),
        ("testSetChartAxisInvalidName", testSetChartAxisInvalidName),
        ("testSetChartAxisInvalidSlideIndex", testSetChartAxisInvalidSlideIndex),
        ("testSetChartAxisInvalidShapeIndex", testSetChartAxisInvalidShapeIndex),
        ("testSetChartAxisInvalidAxisType", testSetChartAxisInvalidAxisType),
        ("testSetChartAxisInvalidAxis", testSetChartAxisInvalidAxis),
        ("testSetChartAxisInvalidPassword", testSetChartAxisInvalidPassword),
        ("testSetChartAxisInvalidFolder", testSetChartAxisInvalidFolder),
        ("testSetChartAxisInvalidStorage", testSetChartAxisInvalidStorage),
        ("testSetChartLegend", testSetChartLegend),
        ("testSetChartLegendInvalidName", testSetChartLegendInvalidName),
        ("testSetChartLegendInvalidSlideIndex", testSetChartLegendInvalidSlideIndex),
        ("testSetChartLegendInvalidShapeIndex", testSetChartLegendInvalidShapeIndex),
        ("testSetChartLegendInvalidLegend", testSetChartLegendInvalidLegend),
        ("testSetChartLegendInvalidPassword", testSetChartLegendInvalidPassword),
        ("testSetChartLegendInvalidFolder", testSetChartLegendInvalidFolder),
        ("testSetChartLegendInvalidStorage", testSetChartLegendInvalidStorage),
        ("testSetChartSeriesGroup", testSetChartSeriesGroup),
        ("testSetChartSeriesGroupInvalidName", testSetChartSeriesGroupInvalidName),
        ("testSetChartSeriesGroupInvalidSlideIndex", testSetChartSeriesGroupInvalidSlideIndex),
        ("testSetChartSeriesGroupInvalidShapeIndex", testSetChartSeriesGroupInvalidShapeIndex),
        ("testSetChartSeriesGroupInvalidSeriesGroupIndex", testSetChartSeriesGroupInvalidSeriesGroupIndex),
        ("testSetChartSeriesGroupInvalidSeriesGroup", testSetChartSeriesGroupInvalidSeriesGroup),
        ("testSetChartSeriesGroupInvalidPassword", testSetChartSeriesGroupInvalidPassword),
        ("testSetChartSeriesGroupInvalidFolder", testSetChartSeriesGroupInvalidFolder),
        ("testSetChartSeriesGroupInvalidStorage", testSetChartSeriesGroupInvalidStorage),
        ("testSetChartWall", testSetChartWall),
        ("testSetChartWallInvalidName", testSetChartWallInvalidName),
        ("testSetChartWallInvalidSlideIndex", testSetChartWallInvalidSlideIndex),
        ("testSetChartWallInvalidShapeIndex", testSetChartWallInvalidShapeIndex),
        ("testSetChartWallInvalidChartWallType", testSetChartWallInvalidChartWallType),
        ("testSetChartWallInvalidChartWall", testSetChartWallInvalidChartWall),
        ("testSetChartWallInvalidPassword", testSetChartWallInvalidPassword),
        ("testSetChartWallInvalidFolder", testSetChartWallInvalidFolder),
        ("testSetChartWallInvalidStorage", testSetChartWallInvalidStorage),
        ("testSetDocumentProperties", testSetDocumentProperties),
        ("testSetDocumentPropertiesInvalidName", testSetDocumentPropertiesInvalidName),
        ("testSetDocumentPropertiesInvalidProperties", testSetDocumentPropertiesInvalidProperties),
        ("testSetDocumentPropertiesInvalidPassword", testSetDocumentPropertiesInvalidPassword),
        ("testSetDocumentPropertiesInvalidFolder", testSetDocumentPropertiesInvalidFolder),
        ("testSetDocumentPropertiesInvalidStorage", testSetDocumentPropertiesInvalidStorage),
        ("testSetDocumentProperty", testSetDocumentProperty),
        ("testSetDocumentPropertyInvalidName", testSetDocumentPropertyInvalidName),
        ("testSetDocumentPropertyInvalidPropertyName", testSetDocumentPropertyInvalidPropertyName),
        ("testSetDocumentPropertyInvalidProperty", testSetDocumentPropertyInvalidProperty),
        ("testSetDocumentPropertyInvalidPassword", testSetDocumentPropertyInvalidPassword),
        ("testSetDocumentPropertyInvalidFolder", testSetDocumentPropertyInvalidFolder),
        ("testSetDocumentPropertyInvalidStorage", testSetDocumentPropertyInvalidStorage),
        ("testSetEmbeddedFont", testSetEmbeddedFont),
        ("testSetEmbeddedFontInvalidName", testSetEmbeddedFontInvalidName),
        ("testSetEmbeddedFontInvalidFontName", testSetEmbeddedFontInvalidFontName),
        ("testSetEmbeddedFontInvalidOnlyUsed", testSetEmbeddedFontInvalidOnlyUsed),
        ("testSetEmbeddedFontInvalidPassword", testSetEmbeddedFontInvalidPassword),
        ("testSetEmbeddedFontInvalidFolder", testSetEmbeddedFontInvalidFolder),
        ("testSetEmbeddedFontInvalidStorage", testSetEmbeddedFontInvalidStorage),
        ("testSetEmbeddedFontInvalidFontsFolder", testSetEmbeddedFontInvalidFontsFolder),
        ("testSetEmbeddedFontFromRequest", testSetEmbeddedFontFromRequest),
        ("testSetEmbeddedFontFromRequestInvalidFont", testSetEmbeddedFontFromRequestInvalidFont),
        ("testSetEmbeddedFontFromRequestInvalidName", testSetEmbeddedFontFromRequestInvalidName),
        ("testSetEmbeddedFontFromRequestInvalidOnlyUsed", testSetEmbeddedFontFromRequestInvalidOnlyUsed),
        ("testSetEmbeddedFontFromRequestInvalidPassword", testSetEmbeddedFontFromRequestInvalidPassword),
        ("testSetEmbeddedFontFromRequestInvalidFolder", testSetEmbeddedFontFromRequestInvalidFolder),
        ("testSetEmbeddedFontFromRequestInvalidStorage", testSetEmbeddedFontFromRequestInvalidStorage),
        ("testSetEmbeddedFontFromRequestOnline", testSetEmbeddedFontFromRequestOnline),
        ("testSetEmbeddedFontFromRequestOnlineInvalidDocument", testSetEmbeddedFontFromRequestOnlineInvalidDocument),
        ("testSetEmbeddedFontFromRequestOnlineInvalidFont", testSetEmbeddedFontFromRequestOnlineInvalidFont),
        ("testSetEmbeddedFontFromRequestOnlineInvalidOnlyUsed", testSetEmbeddedFontFromRequestOnlineInvalidOnlyUsed),
        ("testSetEmbeddedFontFromRequestOnlineInvalidPassword", testSetEmbeddedFontFromRequestOnlineInvalidPassword),
        ("testSetEmbeddedFontOnline", testSetEmbeddedFontOnline),
        ("testSetEmbeddedFontOnlineInvalidDocument", testSetEmbeddedFontOnlineInvalidDocument),
        ("testSetEmbeddedFontOnlineInvalidFontName", testSetEmbeddedFontOnlineInvalidFontName),
        ("testSetEmbeddedFontOnlineInvalidOnlyUsed", testSetEmbeddedFontOnlineInvalidOnlyUsed),
        ("testSetEmbeddedFontOnlineInvalidPassword", testSetEmbeddedFontOnlineInvalidPassword),
        ("testSetEmbeddedFontOnlineInvalidFontsFolder", testSetEmbeddedFontOnlineInvalidFontsFolder),
        ("testSetNotesSlideHeaderFooter", testSetNotesSlideHeaderFooter),
        ("testSetNotesSlideHeaderFooterInvalidName", testSetNotesSlideHeaderFooterInvalidName),
        ("testSetNotesSlideHeaderFooterInvalidSlideIndex", testSetNotesSlideHeaderFooterInvalidSlideIndex),
        ("testSetNotesSlideHeaderFooterInvalidDto", testSetNotesSlideHeaderFooterInvalidDto),
        ("testSetNotesSlideHeaderFooterInvalidPassword", testSetNotesSlideHeaderFooterInvalidPassword),
        ("testSetNotesSlideHeaderFooterInvalidFolder", testSetNotesSlideHeaderFooterInvalidFolder),
        ("testSetNotesSlideHeaderFooterInvalidStorage", testSetNotesSlideHeaderFooterInvalidStorage),
        ("testSetPresentationHeaderFooter", testSetPresentationHeaderFooter),
        ("testSetPresentationHeaderFooterInvalidName", testSetPresentationHeaderFooterInvalidName),
        ("testSetPresentationHeaderFooterInvalidDto", testSetPresentationHeaderFooterInvalidDto),
        ("testSetPresentationHeaderFooterInvalidPassword", testSetPresentationHeaderFooterInvalidPassword),
        ("testSetPresentationHeaderFooterInvalidFolder", testSetPresentationHeaderFooterInvalidFolder),
        ("testSetPresentationHeaderFooterInvalidStorage", testSetPresentationHeaderFooterInvalidStorage),
        ("testSetProtection", testSetProtection),
        ("testSetProtectionInvalidName", testSetProtectionInvalidName),
        ("testSetProtectionInvalidDto", testSetProtectionInvalidDto),
        ("testSetProtectionInvalidPassword", testSetProtectionInvalidPassword),
        ("testSetProtectionInvalidFolder", testSetProtectionInvalidFolder),
        ("testSetProtectionInvalidStorage", testSetProtectionInvalidStorage),
        ("testSetProtectionOnline", testSetProtectionOnline),
        ("testSetProtectionOnlineInvalidDocument", testSetProtectionOnlineInvalidDocument),
        ("testSetProtectionOnlineInvalidDto", testSetProtectionOnlineInvalidDto),
        ("testSetProtectionOnlineInvalidPassword", testSetProtectionOnlineInvalidPassword),
        ("testSetSections", testSetSections),
        ("testSetSectionsInvalidName", testSetSectionsInvalidName),
        ("testSetSectionsInvalidSections", testSetSectionsInvalidSections),
        ("testSetSectionsInvalidPassword", testSetSectionsInvalidPassword),
        ("testSetSectionsInvalidFolder", testSetSectionsInvalidFolder),
        ("testSetSectionsInvalidStorage", testSetSectionsInvalidStorage),
        ("testSetShapeGeometryPath", testSetShapeGeometryPath),
        ("testSetShapeGeometryPathInvalidName", testSetShapeGeometryPathInvalidName),
        ("testSetShapeGeometryPathInvalidSlideIndex", testSetShapeGeometryPathInvalidSlideIndex),
        ("testSetShapeGeometryPathInvalidShapeIndex", testSetShapeGeometryPathInvalidShapeIndex),
        ("testSetShapeGeometryPathInvalidDto", testSetShapeGeometryPathInvalidDto),
        ("testSetShapeGeometryPathInvalidPassword", testSetShapeGeometryPathInvalidPassword),
        ("testSetShapeGeometryPathInvalidFolder", testSetShapeGeometryPathInvalidFolder),
        ("testSetShapeGeometryPathInvalidStorage", testSetShapeGeometryPathInvalidStorage),
        ("testSetSlideHeaderFooter", testSetSlideHeaderFooter),
        ("testSetSlideHeaderFooterInvalidName", testSetSlideHeaderFooterInvalidName),
        ("testSetSlideHeaderFooterInvalidSlideIndex", testSetSlideHeaderFooterInvalidSlideIndex),
        ("testSetSlideHeaderFooterInvalidDto", testSetSlideHeaderFooterInvalidDto),
        ("testSetSlideHeaderFooterInvalidPassword", testSetSlideHeaderFooterInvalidPassword),
        ("testSetSlideHeaderFooterInvalidFolder", testSetSlideHeaderFooterInvalidFolder),
        ("testSetSlideHeaderFooterInvalidStorage", testSetSlideHeaderFooterInvalidStorage),
        ("testSetSlideProperties", testSetSlideProperties),
        ("testSetSlidePropertiesInvalidName", testSetSlidePropertiesInvalidName),
        ("testSetSlidePropertiesInvalidDto", testSetSlidePropertiesInvalidDto),
        ("testSetSlidePropertiesInvalidPassword", testSetSlidePropertiesInvalidPassword),
        ("testSetSlidePropertiesInvalidFolder", testSetSlidePropertiesInvalidFolder),
        ("testSetSlidePropertiesInvalidStorage", testSetSlidePropertiesInvalidStorage),
        ("testSetSlideShowProperties", testSetSlideShowProperties),
        ("testSetSlideShowPropertiesInvalidName", testSetSlideShowPropertiesInvalidName),
        ("testSetSlideShowPropertiesInvalidDto", testSetSlideShowPropertiesInvalidDto),
        ("testSetSlideShowPropertiesInvalidPassword", testSetSlideShowPropertiesInvalidPassword),
        ("testSetSlideShowPropertiesInvalidFolder", testSetSlideShowPropertiesInvalidFolder),
        ("testSetSlideShowPropertiesInvalidStorage", testSetSlideShowPropertiesInvalidStorage),
        ("testSetSpecialSlideAnimation", testSetSpecialSlideAnimation),
        ("testSetSpecialSlideAnimationInvalidName", testSetSpecialSlideAnimationInvalidName),
        ("testSetSpecialSlideAnimationInvalidSlideIndex", testSetSpecialSlideAnimationInvalidSlideIndex),
        ("testSetSpecialSlideAnimationInvalidSlideType", testSetSpecialSlideAnimationInvalidSlideType),
        ("testSetSpecialSlideAnimationInvalidAnimation", testSetSpecialSlideAnimationInvalidAnimation),
        ("testSetSpecialSlideAnimationInvalidPassword", testSetSpecialSlideAnimationInvalidPassword),
        ("testSetSpecialSlideAnimationInvalidFolder", testSetSpecialSlideAnimationInvalidFolder),
        ("testSetSpecialSlideAnimationInvalidStorage", testSetSpecialSlideAnimationInvalidStorage),
        ("testSetViewProperties", testSetViewProperties),
        ("testSetViewPropertiesInvalidName", testSetViewPropertiesInvalidName),
        ("testSetViewPropertiesInvalidDto", testSetViewPropertiesInvalidDto),
        ("testSetViewPropertiesInvalidPassword", testSetViewPropertiesInvalidPassword),
        ("testSetViewPropertiesInvalidFolder", testSetViewPropertiesInvalidFolder),
        ("testSetViewPropertiesInvalidStorage", testSetViewPropertiesInvalidStorage),
        ("testSplit", testSplit),
        ("testSplitInvalidName", testSplitInvalidName),
        ("testSplitInvalidOptions", testSplitInvalidOptions),
        ("testSplitInvalidFormat", testSplitInvalidFormat),
        ("testSplitInvalidWidth", testSplitInvalidWidth),
        ("testSplitInvalidHeight", testSplitInvalidHeight),
        ("testSplitInvalidFrom", testSplitInvalidFrom),
        ("testSplitInvalidTo", testSplitInvalidTo),
        ("testSplitInvalidDestFolder", testSplitInvalidDestFolder),
        ("testSplitInvalidPassword", testSplitInvalidPassword),
        ("testSplitInvalidFolder", testSplitInvalidFolder),
        ("testSplitInvalidStorage", testSplitInvalidStorage),
        ("testSplitInvalidFontsFolder", testSplitInvalidFontsFolder),
        ("testSplitAndSaveOnline", testSplitAndSaveOnline),
        ("testSplitAndSaveOnlineInvalidDocument", testSplitAndSaveOnlineInvalidDocument),
        ("testSplitAndSaveOnlineInvalidFormat", testSplitAndSaveOnlineInvalidFormat),
        ("testSplitAndSaveOnlineInvalidDestFolder", testSplitAndSaveOnlineInvalidDestFolder),
        ("testSplitAndSaveOnlineInvalidWidth", testSplitAndSaveOnlineInvalidWidth),
        ("testSplitAndSaveOnlineInvalidHeight", testSplitAndSaveOnlineInvalidHeight),
        ("testSplitAndSaveOnlineInvalidFrom", testSplitAndSaveOnlineInvalidFrom),
        ("testSplitAndSaveOnlineInvalidTo", testSplitAndSaveOnlineInvalidTo),
        ("testSplitAndSaveOnlineInvalidPassword", testSplitAndSaveOnlineInvalidPassword),
        ("testSplitAndSaveOnlineInvalidStorage", testSplitAndSaveOnlineInvalidStorage),
        ("testSplitAndSaveOnlineInvalidFontsFolder", testSplitAndSaveOnlineInvalidFontsFolder),
        ("testSplitOnline", testSplitOnline),
        ("testSplitOnlineInvalidDocument", testSplitOnlineInvalidDocument),
        ("testSplitOnlineInvalidFormat", testSplitOnlineInvalidFormat),
        ("testSplitOnlineInvalidWidth", testSplitOnlineInvalidWidth),
        ("testSplitOnlineInvalidHeight", testSplitOnlineInvalidHeight),
        ("testSplitOnlineInvalidFrom", testSplitOnlineInvalidFrom),
        ("testSplitOnlineInvalidTo", testSplitOnlineInvalidTo),
        ("testSplitOnlineInvalidPassword", testSplitOnlineInvalidPassword),
        ("testSplitOnlineInvalidStorage", testSplitOnlineInvalidStorage),
        ("testSplitOnlineInvalidFontsFolder", testSplitOnlineInvalidFontsFolder),
        ("testStorageExists", testStorageExists),
        ("testStorageExistsInvalidStorageName", testStorageExistsInvalidStorageName),
        ("testUpdateAnimationEffect", testUpdateAnimationEffect),
        ("testUpdateAnimationEffectInvalidName", testUpdateAnimationEffectInvalidName),
        ("testUpdateAnimationEffectInvalidSlideIndex", testUpdateAnimationEffectInvalidSlideIndex),
        ("testUpdateAnimationEffectInvalidEffectIndex", testUpdateAnimationEffectInvalidEffectIndex),
        ("testUpdateAnimationEffectInvalidEffect", testUpdateAnimationEffectInvalidEffect),
        ("testUpdateAnimationEffectInvalidPassword", testUpdateAnimationEffectInvalidPassword),
        ("testUpdateAnimationEffectInvalidFolder", testUpdateAnimationEffectInvalidFolder),
        ("testUpdateAnimationEffectInvalidStorage", testUpdateAnimationEffectInvalidStorage),
        ("testUpdateAnimationInteractiveSequenceEffect", testUpdateAnimationInteractiveSequenceEffect),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidName", testUpdateAnimationInteractiveSequenceEffectInvalidName),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidSlideIndex", testUpdateAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidSequenceIndex", testUpdateAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidEffectIndex", testUpdateAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidEffect", testUpdateAnimationInteractiveSequenceEffectInvalidEffect),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidPassword", testUpdateAnimationInteractiveSequenceEffectInvalidPassword),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidFolder", testUpdateAnimationInteractiveSequenceEffectInvalidFolder),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidStorage", testUpdateAnimationInteractiveSequenceEffectInvalidStorage),
        ("testUpdateChartCategory", testUpdateChartCategory),
        ("testUpdateChartCategoryInvalidName", testUpdateChartCategoryInvalidName),
        ("testUpdateChartCategoryInvalidSlideIndex", testUpdateChartCategoryInvalidSlideIndex),
        ("testUpdateChartCategoryInvalidShapeIndex", testUpdateChartCategoryInvalidShapeIndex),
        ("testUpdateChartCategoryInvalidCategoryIndex", testUpdateChartCategoryInvalidCategoryIndex),
        ("testUpdateChartCategoryInvalidCategory", testUpdateChartCategoryInvalidCategory),
        ("testUpdateChartCategoryInvalidPassword", testUpdateChartCategoryInvalidPassword),
        ("testUpdateChartCategoryInvalidFolder", testUpdateChartCategoryInvalidFolder),
        ("testUpdateChartCategoryInvalidStorage", testUpdateChartCategoryInvalidStorage),
        ("testUpdateChartDataPoint", testUpdateChartDataPoint),
        ("testUpdateChartDataPointInvalidName", testUpdateChartDataPointInvalidName),
        ("testUpdateChartDataPointInvalidSlideIndex", testUpdateChartDataPointInvalidSlideIndex),
        ("testUpdateChartDataPointInvalidShapeIndex", testUpdateChartDataPointInvalidShapeIndex),
        ("testUpdateChartDataPointInvalidSeriesIndex", testUpdateChartDataPointInvalidSeriesIndex),
        ("testUpdateChartDataPointInvalidPointIndex", testUpdateChartDataPointInvalidPointIndex),
        ("testUpdateChartDataPointInvalidDataPoint", testUpdateChartDataPointInvalidDataPoint),
        ("testUpdateChartDataPointInvalidPassword", testUpdateChartDataPointInvalidPassword),
        ("testUpdateChartDataPointInvalidFolder", testUpdateChartDataPointInvalidFolder),
        ("testUpdateChartDataPointInvalidStorage", testUpdateChartDataPointInvalidStorage),
        ("testUpdateChartSeries", testUpdateChartSeries),
        ("testUpdateChartSeriesInvalidName", testUpdateChartSeriesInvalidName),
        ("testUpdateChartSeriesInvalidSlideIndex", testUpdateChartSeriesInvalidSlideIndex),
        ("testUpdateChartSeriesInvalidShapeIndex", testUpdateChartSeriesInvalidShapeIndex),
        ("testUpdateChartSeriesInvalidSeriesIndex", testUpdateChartSeriesInvalidSeriesIndex),
        ("testUpdateChartSeriesInvalidSeries", testUpdateChartSeriesInvalidSeries),
        ("testUpdateChartSeriesInvalidPassword", testUpdateChartSeriesInvalidPassword),
        ("testUpdateChartSeriesInvalidFolder", testUpdateChartSeriesInvalidFolder),
        ("testUpdateChartSeriesInvalidStorage", testUpdateChartSeriesInvalidStorage),
        ("testUpdateLayoutSlide", testUpdateLayoutSlide),
        ("testUpdateLayoutSlideInvalidName", testUpdateLayoutSlideInvalidName),
        ("testUpdateLayoutSlideInvalidSlideIndex", testUpdateLayoutSlideInvalidSlideIndex),
        ("testUpdateLayoutSlideInvalidSlideDto", testUpdateLayoutSlideInvalidSlideDto),
        ("testUpdateLayoutSlideInvalidPassword", testUpdateLayoutSlideInvalidPassword),
        ("testUpdateLayoutSlideInvalidFolder", testUpdateLayoutSlideInvalidFolder),
        ("testUpdateLayoutSlideInvalidStorage", testUpdateLayoutSlideInvalidStorage),
        ("testUpdateNotesSlide", testUpdateNotesSlide),
        ("testUpdateNotesSlideInvalidName", testUpdateNotesSlideInvalidName),
        ("testUpdateNotesSlideInvalidSlideIndex", testUpdateNotesSlideInvalidSlideIndex),
        ("testUpdateNotesSlideInvalidDto", testUpdateNotesSlideInvalidDto),
        ("testUpdateNotesSlideInvalidPassword", testUpdateNotesSlideInvalidPassword),
        ("testUpdateNotesSlideInvalidFolder", testUpdateNotesSlideInvalidFolder),
        ("testUpdateNotesSlideInvalidStorage", testUpdateNotesSlideInvalidStorage),
        ("testUpdateParagraph", testUpdateParagraph),
        ("testUpdateParagraphInvalidName", testUpdateParagraphInvalidName),
        ("testUpdateParagraphInvalidSlideIndex", testUpdateParagraphInvalidSlideIndex),
        ("testUpdateParagraphInvalidShapeIndex", testUpdateParagraphInvalidShapeIndex),
        ("testUpdateParagraphInvalidParagraphIndex", testUpdateParagraphInvalidParagraphIndex),
        ("testUpdateParagraphInvalidDto", testUpdateParagraphInvalidDto),
        ("testUpdateParagraphInvalidPassword", testUpdateParagraphInvalidPassword),
        ("testUpdateParagraphInvalidFolder", testUpdateParagraphInvalidFolder),
        ("testUpdateParagraphInvalidStorage", testUpdateParagraphInvalidStorage),
        ("testUpdateParagraphInvalidSubShape", testUpdateParagraphInvalidSubShape),
        ("testUpdatePortion", testUpdatePortion),
        ("testUpdatePortionInvalidName", testUpdatePortionInvalidName),
        ("testUpdatePortionInvalidSlideIndex", testUpdatePortionInvalidSlideIndex),
        ("testUpdatePortionInvalidShapeIndex", testUpdatePortionInvalidShapeIndex),
        ("testUpdatePortionInvalidParagraphIndex", testUpdatePortionInvalidParagraphIndex),
        ("testUpdatePortionInvalidPortionIndex", testUpdatePortionInvalidPortionIndex),
        ("testUpdatePortionInvalidDto", testUpdatePortionInvalidDto),
        ("testUpdatePortionInvalidPassword", testUpdatePortionInvalidPassword),
        ("testUpdatePortionInvalidFolder", testUpdatePortionInvalidFolder),
        ("testUpdatePortionInvalidStorage", testUpdatePortionInvalidStorage),
        ("testUpdatePortionInvalidSubShape", testUpdatePortionInvalidSubShape),
        ("testUpdateSection", testUpdateSection),
        ("testUpdateSectionInvalidName", testUpdateSectionInvalidName),
        ("testUpdateSectionInvalidSectionIndex", testUpdateSectionInvalidSectionIndex),
        ("testUpdateSectionInvalidSectionName", testUpdateSectionInvalidSectionName),
        ("testUpdateSectionInvalidPassword", testUpdateSectionInvalidPassword),
        ("testUpdateSectionInvalidFolder", testUpdateSectionInvalidFolder),
        ("testUpdateSectionInvalidStorage", testUpdateSectionInvalidStorage),
        ("testUpdateShape", testUpdateShape),
        ("testUpdateShapeInvalidName", testUpdateShapeInvalidName),
        ("testUpdateShapeInvalidSlideIndex", testUpdateShapeInvalidSlideIndex),
        ("testUpdateShapeInvalidShapeIndex", testUpdateShapeInvalidShapeIndex),
        ("testUpdateShapeInvalidDto", testUpdateShapeInvalidDto),
        ("testUpdateShapeInvalidPassword", testUpdateShapeInvalidPassword),
        ("testUpdateShapeInvalidFolder", testUpdateShapeInvalidFolder),
        ("testUpdateShapeInvalidStorage", testUpdateShapeInvalidStorage),
        ("testUpdateShapeInvalidSubShape", testUpdateShapeInvalidSubShape),
        ("testUpdateSlide", testUpdateSlide),
        ("testUpdateSlideInvalidName", testUpdateSlideInvalidName),
        ("testUpdateSlideInvalidSlideIndex", testUpdateSlideInvalidSlideIndex),
        ("testUpdateSlideInvalidSlideDto", testUpdateSlideInvalidSlideDto),
        ("testUpdateSlideInvalidPassword", testUpdateSlideInvalidPassword),
        ("testUpdateSlideInvalidFolder", testUpdateSlideInvalidFolder),
        ("testUpdateSlideInvalidStorage", testUpdateSlideInvalidStorage),
        ("testUpdateSpecialSlideAnimationEffect", testUpdateSpecialSlideAnimationEffect),
        ("testUpdateSpecialSlideAnimationEffectInvalidName", testUpdateSpecialSlideAnimationEffectInvalidName),
        ("testUpdateSpecialSlideAnimationEffectInvalidSlideIndex", testUpdateSpecialSlideAnimationEffectInvalidSlideIndex),
        ("testUpdateSpecialSlideAnimationEffectInvalidSlideType", testUpdateSpecialSlideAnimationEffectInvalidSlideType),
        ("testUpdateSpecialSlideAnimationEffectInvalidEffectIndex", testUpdateSpecialSlideAnimationEffectInvalidEffectIndex),
        ("testUpdateSpecialSlideAnimationEffectInvalidEffect", testUpdateSpecialSlideAnimationEffectInvalidEffect),
        ("testUpdateSpecialSlideAnimationEffectInvalidPassword", testUpdateSpecialSlideAnimationEffectInvalidPassword),
        ("testUpdateSpecialSlideAnimationEffectInvalidFolder", testUpdateSpecialSlideAnimationEffectInvalidFolder),
        ("testUpdateSpecialSlideAnimationEffectInvalidStorage", testUpdateSpecialSlideAnimationEffectInvalidStorage),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffect", testUpdateSpecialSlideAnimationInteractiveSequenceEffect),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidName", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidName),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndex", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffect", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffect),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder),
        ("testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage", testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage),
        ("testUpdateSpecialSlideParagraph", testUpdateSpecialSlideParagraph),
        ("testUpdateSpecialSlideParagraphInvalidName", testUpdateSpecialSlideParagraphInvalidName),
        ("testUpdateSpecialSlideParagraphInvalidSlideIndex", testUpdateSpecialSlideParagraphInvalidSlideIndex),
        ("testUpdateSpecialSlideParagraphInvalidSlideType", testUpdateSpecialSlideParagraphInvalidSlideType),
        ("testUpdateSpecialSlideParagraphInvalidShapeIndex", testUpdateSpecialSlideParagraphInvalidShapeIndex),
        ("testUpdateSpecialSlideParagraphInvalidParagraphIndex", testUpdateSpecialSlideParagraphInvalidParagraphIndex),
        ("testUpdateSpecialSlideParagraphInvalidDto", testUpdateSpecialSlideParagraphInvalidDto),
        ("testUpdateSpecialSlideParagraphInvalidPassword", testUpdateSpecialSlideParagraphInvalidPassword),
        ("testUpdateSpecialSlideParagraphInvalidFolder", testUpdateSpecialSlideParagraphInvalidFolder),
        ("testUpdateSpecialSlideParagraphInvalidStorage", testUpdateSpecialSlideParagraphInvalidStorage),
        ("testUpdateSpecialSlideParagraphInvalidSubShape", testUpdateSpecialSlideParagraphInvalidSubShape),
        ("testUpdateSpecialSlidePortion", testUpdateSpecialSlidePortion),
        ("testUpdateSpecialSlidePortionInvalidName", testUpdateSpecialSlidePortionInvalidName),
        ("testUpdateSpecialSlidePortionInvalidSlideIndex", testUpdateSpecialSlidePortionInvalidSlideIndex),
        ("testUpdateSpecialSlidePortionInvalidSlideType", testUpdateSpecialSlidePortionInvalidSlideType),
        ("testUpdateSpecialSlidePortionInvalidShapeIndex", testUpdateSpecialSlidePortionInvalidShapeIndex),
        ("testUpdateSpecialSlidePortionInvalidParagraphIndex", testUpdateSpecialSlidePortionInvalidParagraphIndex),
        ("testUpdateSpecialSlidePortionInvalidPortionIndex", testUpdateSpecialSlidePortionInvalidPortionIndex),
        ("testUpdateSpecialSlidePortionInvalidDto", testUpdateSpecialSlidePortionInvalidDto),
        ("testUpdateSpecialSlidePortionInvalidPassword", testUpdateSpecialSlidePortionInvalidPassword),
        ("testUpdateSpecialSlidePortionInvalidFolder", testUpdateSpecialSlidePortionInvalidFolder),
        ("testUpdateSpecialSlidePortionInvalidStorage", testUpdateSpecialSlidePortionInvalidStorage),
        ("testUpdateSpecialSlidePortionInvalidSubShape", testUpdateSpecialSlidePortionInvalidSubShape),
        ("testUpdateSpecialSlideShape", testUpdateSpecialSlideShape),
        ("testUpdateSpecialSlideShapeInvalidName", testUpdateSpecialSlideShapeInvalidName),
        ("testUpdateSpecialSlideShapeInvalidSlideIndex", testUpdateSpecialSlideShapeInvalidSlideIndex),
        ("testUpdateSpecialSlideShapeInvalidSlideType", testUpdateSpecialSlideShapeInvalidSlideType),
        ("testUpdateSpecialSlideShapeInvalidShapeIndex", testUpdateSpecialSlideShapeInvalidShapeIndex),
        ("testUpdateSpecialSlideShapeInvalidDto", testUpdateSpecialSlideShapeInvalidDto),
        ("testUpdateSpecialSlideShapeInvalidPassword", testUpdateSpecialSlideShapeInvalidPassword),
        ("testUpdateSpecialSlideShapeInvalidFolder", testUpdateSpecialSlideShapeInvalidFolder),
        ("testUpdateSpecialSlideShapeInvalidStorage", testUpdateSpecialSlideShapeInvalidStorage),
        ("testUpdateSpecialSlideShapeInvalidSubShape", testUpdateSpecialSlideShapeInvalidSubShape),
        ("testUploadFile", testUploadFile),
        ("testUploadFileInvalidPath", testUploadFileInvalidPath),
        ("testUploadFileInvalidFile", testUploadFileInvalidFile),
        ("testUploadFileInvalidStorageName", testUploadFileInvalidStorageName),
    ];
    
    internal let testTimeout: TimeInterval = 200.0 

    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        super.tearDown()
    }    
    
    func testAlignShapes() {
        let expectation = self.expectation(description: "testalignShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "alignShapes", name: "subShape", type: "String")
        TestUtils.initialize("alignShapes") { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidName() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidAlignmentType() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "alignmentType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "alignmentType", paramAlignmentType) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "alignmentType", parameterValue: paramAlignmentType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidAlignToSlide() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "alignToSlide"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "alignToSlide", paramAlignToSlide) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "alignToSlide", parameterValue: paramAlignToSlide as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidShapes() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "shapes"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidPassword() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidFolder() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidStorage() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidSubShape() {
        let expectation = self.expectation(description: "testalignShapes")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignShapes", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testAlignSpecialSlideShapes() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "slideType", type: "String")
        let paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "alignmentType", type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "alignToSlide", type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "alignSpecialSlideShapes", name: "subShape", type: "String")
        TestUtils.initialize("alignSpecialSlideShapes") { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidSlideType() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidAlignmentType() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "alignmentType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "alignmentType", paramAlignmentType) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "alignmentType", parameterValue: paramAlignmentType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidAlignToSlide() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "alignToSlide"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "alignToSlide", paramAlignToSlide) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "alignToSlide", parameterValue: paramAlignToSlide as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidShapes() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "shapes"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignSpecialSlideShapesInvalidSubShape() {
        let expectation = self.expectation(description: "testalignSpecialSlideShapes")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignmentType : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignmentType", invalidFieldName: invalidFieldName, type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "alignToSlide", invalidFieldName: invalidFieldName, type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "alignSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("alignSpecialSlideShapes", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.alignSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignSpecialSlideShapes", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCompressEmbeddedFonts() {
        let expectation = self.expectation(description: "testcompressEmbeddedFonts")
        let paramName : String = TestUtils.getTestValue(functionName: "compressEmbeddedFonts", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "compressEmbeddedFonts", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "compressEmbeddedFonts", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "compressEmbeddedFonts", name: "storage", type: "String")
        TestUtils.initialize("compressEmbeddedFonts") { (response, error) -> Void in
            SlidesAPI.compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCompressEmbeddedFontsInvalidName() {
        let expectation = self.expectation(description: "testcompressEmbeddedFonts")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("compressEmbeddedFonts", "name", paramName) { (response, error) -> Void in
            SlidesAPI.compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "compressEmbeddedFonts", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCompressEmbeddedFontsInvalidPassword() {
        let expectation = self.expectation(description: "testcompressEmbeddedFonts")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("compressEmbeddedFonts", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "compressEmbeddedFonts", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCompressEmbeddedFontsInvalidFolder() {
        let expectation = self.expectation(description: "testcompressEmbeddedFonts")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("compressEmbeddedFonts", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "compressEmbeddedFonts", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCompressEmbeddedFontsInvalidStorage() {
        let expectation = self.expectation(description: "testcompressEmbeddedFonts")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFonts", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("compressEmbeddedFonts", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.compressEmbeddedFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "compressEmbeddedFonts", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCompressEmbeddedFontsOnline() {
        let expectation = self.expectation(description: "testcompressEmbeddedFontsOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "compressEmbeddedFontsOnline", name: "document", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "compressEmbeddedFontsOnline", name: "password", type: "String")
        TestUtils.initialize("compressEmbeddedFontsOnline") { (response, error) -> Void in
            SlidesAPI.compressEmbeddedFontsOnline(paramDocument, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCompressEmbeddedFontsOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testcompressEmbeddedFontsOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFontsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFontsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("compressEmbeddedFontsOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.compressEmbeddedFontsOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "compressEmbeddedFontsOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCompressEmbeddedFontsOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testcompressEmbeddedFontsOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFontsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "compressEmbeddedFontsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("compressEmbeddedFontsOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.compressEmbeddedFontsOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "compressEmbeddedFontsOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testConvert() {
        let expectation = self.expectation(description: "testconvert")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "convert", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "convert", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "convert", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "convert", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "convert", name: "fontsFolder", type: "String")
        let paramSlides : [Int] = TestUtils.getTestValue(functionName: "convert", name: "slides", type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "convert", name: "options", type: "ExportOptions")
        TestUtils.initialize("convert") { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidDocument() {
        let expectation = self.expectation(description: "testconvert")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convert", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convert", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convert", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convert", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidFormat() {
        let expectation = self.expectation(description: "testconvert")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convert", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convert", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convert", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convert", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidPassword() {
        let expectation = self.expectation(description: "testconvert")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convert", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convert", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convert", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convert", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidStorage() {
        let expectation = self.expectation(description: "testconvert")
        let invalidFieldName = "storage"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convert", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convert", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convert", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convert", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidFontsFolder() {
        let expectation = self.expectation(description: "testconvert")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convert", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convert", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convert", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convert", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidSlides() {
        let expectation = self.expectation(description: "testconvert")
        let invalidFieldName = "slides"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convert", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convert", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convert", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convert", "slides", paramSlides) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "slides", parameterValue: paramSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidOptions() {
        let expectation = self.expectation(description: "testconvert")
        let invalidFieldName = "options"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convert", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convert", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convert", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convert", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convert", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testConvertAndSave() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "convertAndSave", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "outPath", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "fontsFolder", type: "String")
        let paramSlides : [Int] = TestUtils.getTestValue(functionName: "convertAndSave", name: "slides", type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "convertAndSave", name: "options", type: "ExportOptions")
        TestUtils.initialize("convertAndSave") { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidDocument() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convertAndSave", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidFormat() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convertAndSave", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidOutPath() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let invalidFieldName = "outPath"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convertAndSave", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidPassword() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convertAndSave", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidStorage() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let invalidFieldName = "storage"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convertAndSave", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidFontsFolder() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convertAndSave", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidSlides() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let invalidFieldName = "slides"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convertAndSave", "slides", paramSlides) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "slides", parameterValue: paramSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidOptions() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let invalidFieldName = "options"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "convertAndSave", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("convertAndSave", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder, paramSlides, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyFile() {
        let expectation = self.expectation(description: "testcopyFile")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        TestUtils.initialize("copyFile") { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidSrcPath() {
        let expectation = self.expectation(description: "testcopyFile")
        let invalidFieldName = "srcPath"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFile", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidDestPath() {
        let expectation = self.expectation(description: "testcopyFile")
        let invalidFieldName = "destPath"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFile", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        let invalidFieldName = "srcStorageName"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFile", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidDestStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        let invalidFieldName = "destStorageName"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFile", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidVersionId() {
        let expectation = self.expectation(description: "testcopyFile")
        let invalidFieldName = "versionId"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "copyFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyFolder() {
        let expectation = self.expectation(description: "testcopyFolder")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        TestUtils.initialize("copyFolder") { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidSrcPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        let invalidFieldName = "srcPath"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFolder", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidDestPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        let invalidFieldName = "destPath"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFolder", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        let invalidFieldName = "srcStorageName"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFolder", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidDestStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        let invalidFieldName = "destStorageName"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "copyFolder", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyFolder", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyLayoutSlide() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        let paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        TestUtils.initialize("copyLayoutSlide") { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyLayoutSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidCloneFrom() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let invalidFieldName = "cloneFrom"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyLayoutSlide", "cloneFrom", paramCloneFrom) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "cloneFrom", parameterValue: paramCloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidCloneFromPosition() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let invalidFieldName = "cloneFromPosition"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyLayoutSlide", "cloneFromPosition", paramCloneFromPosition) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "cloneFromPosition", parameterValue: paramCloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidCloneFromPassword() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let invalidFieldName = "cloneFromPassword"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyLayoutSlide", "cloneFromPassword", paramCloneFromPassword) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "cloneFromPassword", parameterValue: paramCloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidCloneFromStorage() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let invalidFieldName = "cloneFromStorage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyLayoutSlide", "cloneFromStorage", paramCloneFromStorage) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "cloneFromStorage", parameterValue: paramCloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyLayoutSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyLayoutSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyLayoutSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyMasterSlide() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        let paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        TestUtils.initialize("copyMasterSlide") { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidName() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidCloneFrom() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "cloneFrom"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "cloneFrom", paramCloneFrom) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "cloneFrom", parameterValue: paramCloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidCloneFromPosition() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "cloneFromPosition"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "cloneFromPosition", paramCloneFromPosition) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "cloneFromPosition", parameterValue: paramCloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidCloneFromPassword() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "cloneFromPassword"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "cloneFromPassword", paramCloneFromPassword) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "cloneFromPassword", parameterValue: paramCloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidCloneFromStorage() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "cloneFromStorage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "cloneFromStorage", paramCloneFromStorage) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "cloneFromStorage", parameterValue: paramCloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidApplyToAll() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "applyToAll"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "applyToAll", paramApplyToAll) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "applyToAll", parameterValue: paramApplyToAll as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidPassword() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidFolder() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidStorage() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFrom : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFrom", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "cloneFromStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "applyToAll", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copyMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copyMasterSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopySlide() {
        let expectation = self.expectation(description: "testcopySlide")
        let paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        let paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        let paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        let paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        TestUtils.initialize("copySlide") { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidName() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidSlideToCopy() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "slideToCopy"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "slideToCopy", paramSlideToCopy) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "slideToCopy", parameterValue: paramSlideToCopy as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidPosition() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidSource() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "source"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "source", paramSource) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "source", parameterValue: paramSource as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidSourcePassword() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "sourcePassword"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "sourcePassword", paramSourcePassword) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "sourcePassword", parameterValue: paramSourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidSourceStorage() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "sourceStorage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "sourceStorage", paramSourceStorage) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "sourceStorage", parameterValue: paramSourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidPassword() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidFolder() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidStorage() {
        let expectation = self.expectation(description: "testcopySlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "slideToCopy", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramSource : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "source", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "copySlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("copySlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateAnimationEffect() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("createAnimationEffect") { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        let invalidFieldName = "effect"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidSequence() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        let invalidFieldName = "sequence"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "sequence", paramSequence) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "sequence", parameterValue: paramSequence as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "sequenceIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "effect"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateChartCategory() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        TestUtils.initialize("createChartCategory") { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidCategory() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let invalidFieldName = "category"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartCategory", "category", paramCategory) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "category", parameterValue: paramCategory as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateChartDataPoint() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("createChartDataPoint") { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let invalidFieldName = "seriesIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidDataPoint() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let invalidFieldName = "dataPoint"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartDataPoint", "dataPoint", paramDataPoint) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "dataPoint", parameterValue: paramDataPoint as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateChartSeries() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        let paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        TestUtils.initialize("createChartSeries") { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidSeries() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let invalidFieldName = "series"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartSeries", "series", paramSeries) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "series", parameterValue: paramSeries as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateComment() {
        let expectation = self.expectation(description: "testcreateComment")
        let paramName : String = TestUtils.getTestValue(functionName: "createComment", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "slideIndex", type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValue(functionName: "createComment", name: "dto", type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createComment", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createComment", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createComment", name: "storage", type: "String")
        TestUtils.initialize("createComment") { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidName() {
        let expectation = self.expectation(description: "testcreateComment")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createComment", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateComment")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createComment", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidDto() {
        let expectation = self.expectation(description: "testcreateComment")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createComment", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateComment")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createComment", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidPassword() {
        let expectation = self.expectation(description: "testcreateComment")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createComment", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidFolder() {
        let expectation = self.expectation(description: "testcreateComment")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createComment", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidStorage() {
        let expectation = self.expectation(description: "testcreateComment")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createComment", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createComment", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateCommentOnline() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "createCommentOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createCommentOnline", name: "slideIndex", type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValue(functionName: "createCommentOnline", name: "dto", type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createCommentOnline", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createCommentOnline", name: "password", type: "String")
        TestUtils.initialize("createCommentOnline") { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createCommentOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createCommentOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidDto() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        let invalidFieldName = "dto"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createCommentOnline", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        let invalidFieldName = "shapeIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createCommentOnline", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : SlideCommentBase = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "dto", invalidFieldName: invalidFieldName, type: "SlideCommentBase")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createCommentOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createCommentOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramShapeIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateFolder() {
        let expectation = self.expectation(description: "testcreateFolder")
        let paramPath : String = TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String")
        TestUtils.initialize("createFolder") { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateFolderInvalidPath() {
        let expectation = self.expectation(description: "testcreateFolder")
        let invalidFieldName = "path"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "createFolder", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "createFolder", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createFolder", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateFolderInvalidStorageName() {
        let expectation = self.expectation(description: "testcreateFolder")
        let invalidFieldName = "storageName"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "createFolder", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "createFolder", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createFolder", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateImageWatermark() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        let paramName : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "name", type: "String")
        let paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermark", name: "image", type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermark", name: "pictureFrame", type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "storage", type: "String")
        TestUtils.initialize("createImageWatermark") { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidName() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermark", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidImage() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        let invalidFieldName = "image"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermark", "image", paramImage) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "image", parameterValue: paramImage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidPictureFrame() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        let invalidFieldName = "pictureFrame"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermark", "pictureFrame", paramPictureFrame) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "pictureFrame", parameterValue: paramPictureFrame as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidPassword() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermark", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidFolder() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermark", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidStorage() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermark", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateImageWatermarkOnline() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "document", type: "Data")
        let paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "image", type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "pictureFrame", type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "password", type: "String")
        TestUtils.initialize("createImageWatermarkOnline") { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermarkOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermarkOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkOnlineInvalidImage() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        let invalidFieldName = "image"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermarkOnline", "image", paramImage) { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermarkOnline", parameterName: "image", parameterValue: paramImage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkOnlineInvalidPictureFrame() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        let invalidFieldName = "pictureFrame"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermarkOnline", "pictureFrame", paramPictureFrame) { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermarkOnline", parameterName: "pictureFrame", parameterValue: paramPictureFrame as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "pictureFrame", invalidFieldName: invalidFieldName, type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createImageWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createImageWatermarkOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermarkOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateNotesSlide() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlide", name: "slideIndex", type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValue(functionName: "createNotesSlide", name: "dto", type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("createNotesSlide") { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidDto() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createNotesSlide", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateParagraph() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "createParagraph", name: "subShape", type: "String")
        TestUtils.initialize("createParagraph") { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidName() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidDto() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidSubShape() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createParagraph", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreatePortion() {
        let expectation = self.expectation(description: "testcreatePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "createPortion", name: "subShape", type: "String")
        TestUtils.initialize("createPortion") { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidName() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidDto() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidPosition() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidPassword() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidFolder() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidStorage() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidSubShape() {
        let expectation = self.expectation(description: "testcreatePortion")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPortion", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreatePresentation() {
        let expectation = self.expectation(description: "testcreatePresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "createPresentation", name: "name", type: "String")
        let paramData : Data = TestUtils.getTestValue(functionName: "createPresentation", name: "data", type: "Data")
        let paramInputPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "inputPassword", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createPresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createPresentation", name: "storage", type: "String")
        TestUtils.initialize("createPresentation") { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidName() {
        let expectation = self.expectation(description: "testcreatePresentation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramData : Data = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "data", invalidFieldName: invalidFieldName, type: "Data")
        let paramInputPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "inputPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidData() {
        let expectation = self.expectation(description: "testcreatePresentation")
        let invalidFieldName = "data"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramData : Data = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "data", invalidFieldName: invalidFieldName, type: "Data")
        let paramInputPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "inputPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentation", "data", paramData) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "data", parameterValue: paramData as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidInputPassword() {
        let expectation = self.expectation(description: "testcreatePresentation")
        let invalidFieldName = "inputPassword"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramData : Data = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "data", invalidFieldName: invalidFieldName, type: "Data")
        let paramInputPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "inputPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentation", "inputPassword", paramInputPassword) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "inputPassword", parameterValue: paramInputPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidPassword() {
        let expectation = self.expectation(description: "testcreatePresentation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramData : Data = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "data", invalidFieldName: invalidFieldName, type: "Data")
        let paramInputPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "inputPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidFolder() {
        let expectation = self.expectation(description: "testcreatePresentation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramData : Data = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "data", invalidFieldName: invalidFieldName, type: "Data")
        let paramInputPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "inputPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidStorage() {
        let expectation = self.expectation(description: "testcreatePresentation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramData : Data = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "data", invalidFieldName: invalidFieldName, type: "Data")
        let paramInputPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "inputPassword", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreatePresentationFromSource() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        let paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        let paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        let paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        TestUtils.initialize("createPresentationFromSource") { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidName() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePath", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromSource", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidSourcePath() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let invalidFieldName = "sourcePath"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePath", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromSource", "sourcePath", paramSourcePath) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "sourcePath", parameterValue: paramSourcePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidSourcePassword() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let invalidFieldName = "sourcePassword"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePath", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromSource", "sourcePassword", paramSourcePassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "sourcePassword", parameterValue: paramSourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidSourceStorage() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let invalidFieldName = "sourceStorage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePath", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromSource", "sourceStorage", paramSourceStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "sourceStorage", parameterValue: paramSourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidPassword() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePath", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromSource", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidFolder() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePath", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromSource", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidStorage() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePath", invalidFieldName: invalidFieldName, type: "String")
        let paramSourcePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourcePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "sourceStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromSource", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromSource", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreatePresentationFromTemplate() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        let paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        let paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        TestUtils.initialize("createPresentationFromTemplate") { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidName() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidTemplatePath() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "templatePath"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "templatePath", paramTemplatePath) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "templatePath", parameterValue: paramTemplatePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidData() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "data"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "data", paramData) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "data", parameterValue: paramData as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidTemplatePassword() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "templatePassword"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "templatePassword", paramTemplatePassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "templatePassword", parameterValue: paramTemplatePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidTemplateStorage() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "templateStorage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "templateStorage", paramTemplateStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "templateStorage", parameterValue: paramTemplateStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidIsImageDataEmbedded() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "isImageDataEmbedded"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "isImageDataEmbedded", parameterValue: paramIsImageDataEmbedded as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidPassword() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidFolder() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidStorage() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePath : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePath", invalidFieldName: invalidFieldName, type: "String")
        let paramData : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "data", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templatePassword", invalidFieldName: invalidFieldName, type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "templateStorage", invalidFieldName: invalidFieldName, type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createPresentationFromTemplate", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSection() {
        let expectation = self.expectation(description: "testcreateSection")
        let paramName : String = TestUtils.getTestValue(functionName: "createSection", name: "name", type: "String")
        let paramSectionName : String = TestUtils.getTestValue(functionName: "createSection", name: "sectionName", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSection", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSection", name: "storage", type: "String")
        TestUtils.initialize("createSection") { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidName() {
        let expectation = self.expectation(description: "testcreateSection")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidSectionName() {
        let expectation = self.expectation(description: "testcreateSection")
        let invalidFieldName = "sectionName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSection", "sectionName", paramSectionName) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "sectionName", parameterValue: paramSectionName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSection")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSection", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSection")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSection")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSection")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateShape() {
        let expectation = self.expectation(description: "testcreateShape")
        let paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "createShape", name: "subShape", type: "String")
        TestUtils.initialize("createShape") { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidName() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidDto() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "shapeToClone"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "shapeToClone", paramShapeToClone) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "shapeToClone", parameterValue: paramShapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidPosition() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidPassword() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidFolder() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidStorage() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testcreateShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSlide() {
        let expectation = self.expectation(description: "testcreateSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "createSlide", name: "name", type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValue(functionName: "createSlide", name: "layoutAlias", type: "String")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSlide", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSlide", name: "storage", type: "String")
        TestUtils.initialize("createSlide") { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidName() {
        let expectation = self.expectation(description: "testcreateSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "layoutAlias", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidLayoutAlias() {
        let expectation = self.expectation(description: "testcreateSlide")
        let invalidFieldName = "layoutAlias"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "layoutAlias", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSlide", "layoutAlias", paramLayoutAlias) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "layoutAlias", parameterValue: paramLayoutAlias as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSlide")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "layoutAlias", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSlide", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "layoutAlias", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "layoutAlias", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "layoutAlias", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSmartArtNode() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let paramName : String = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "slideIndex", type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "smartArtIndex", type: "Int")
        let paramSubNode : String = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "subNode", type: "String")
        let paramText : String = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "text", type: "String")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSmartArtNode", name: "storage", type: "String")
        TestUtils.initialize("createSmartArtNode") { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidName() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidSmartArtIndex() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "smartArtIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "smartArtIndex", paramSmartArtIndex) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "smartArtIndex", parameterValue: paramSmartArtIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidSubNode() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "subNode"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "subNode", paramSubNode) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "subNode", parameterValue: paramSubNode as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidText() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "text"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "text", paramText) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "text", parameterValue: paramText as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSmartArtNodeInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSmartArtNode")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSmartArtNode", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramSubNode, paramText, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSmartArtNode", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSpecialSlideAnimationEffect() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationEffect", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationEffect", name: "slideType", type: "String")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("createSpecialSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationEffectInvalidSlideType() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationEffect")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationEffect", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationEffect", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationEffect")
        let invalidFieldName = "effect"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSpecialSlideAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideType", type: "String")
        let paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "storage", type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceInvalidSlideType() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequence", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequence", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceInvalidSequence() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "sequence"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequence", "sequence", paramSequence) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequence", parameterName: "sequence", parameterValue: paramSequence as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequence : InteractiveSequence = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "sequence", invalidFieldName: invalidFieldName, type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSpecialSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "sequenceIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "effect"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSpecialSlideParagraph() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "shapeIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "dto", type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "createSpecialSlideParagraph", name: "subShape", type: "String")
        TestUtils.initialize("createSpecialSlideParagraph") { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidSlideType() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidDto() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideParagraphInvalidSubShape() {
        let expectation = self.expectation(description: "testcreateSpecialSlideParagraph")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideParagraph", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideParagraph", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSpecialSlidePortion() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "paragraphIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "dto", type: "Portion")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "createSpecialSlidePortion", name: "subShape", type: "String")
        TestUtils.initialize("createSpecialSlidePortion") { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidSlideType() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidDto() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlidePortionInvalidSubShape() {
        let expectation = self.expectation(description: "testcreateSpecialSlidePortion")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlidePortion", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.createSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlidePortion", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSpecialSlideShape() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "slideType", type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "dto", type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "shapeToClone", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "createSpecialSlideShape", name: "subShape", type: "String")
        TestUtils.initialize("createSpecialSlideShape") { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidSlideType() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidDto() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "shapeToClone"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "shapeToClone", paramShapeToClone) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "shapeToClone", parameterValue: paramShapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "position"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSpecialSlideShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testcreateSpecialSlideShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "shapeToClone", invalidFieldName: invalidFieldName, type: "Int")
        let paramPosition : Int = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "position", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "createSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createSpecialSlideShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.createSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSpecialSlideShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateWatermark() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        let paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        let paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        let paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        let paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        TestUtils.initialize("createWatermark") { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidName() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidShape() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "shape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "shape", paramShape) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "shape", parameterValue: paramShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidFontHeight() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "fontHeight"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "fontHeight", paramFontHeight) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "fontHeight", parameterValue: paramFontHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidText() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "text"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "text", paramText) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "text", parameterValue: paramText as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidFontName() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "fontName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "fontName", paramFontName) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "fontName", parameterValue: paramFontName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidFontColor() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "fontColor"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "fontColor", paramFontColor) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "fontColor", parameterValue: paramFontColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidPassword() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidFolder() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidStorage() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "createWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermark", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateWatermarkOnline() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        let paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        let paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        let paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        let paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        TestUtils.initialize("createWatermarkOnline") { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermarkOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidShape() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let invalidFieldName = "shape"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermarkOnline", "shape", paramShape) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "shape", parameterValue: paramShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidFontHeight() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let invalidFieldName = "fontHeight"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermarkOnline", "fontHeight", paramFontHeight) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "fontHeight", parameterValue: paramFontHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidText() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let invalidFieldName = "text"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermarkOnline", "text", paramText) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "text", parameterValue: paramText as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidFontName() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let invalidFieldName = "fontName"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermarkOnline", "fontName", paramFontName) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "fontName", parameterValue: paramFontName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidFontColor() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let invalidFieldName = "fontColor"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermarkOnline", "fontColor", paramFontColor) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "fontColor", parameterValue: paramFontColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShape : Shape = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "shape", invalidFieldName: invalidFieldName, type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontHeight", invalidFieldName: invalidFieldName, type: "Double")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramFontColor : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "fontColor", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "createWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("createWatermarkOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimation() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimation", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimation") { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationEffect() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationEffect") { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        let invalidFieldName = "effectIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        let invalidFieldName = "sequenceIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let invalidFieldName = "sequenceIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let invalidFieldName = "effectIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationInteractiveSequences() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationMainSequence() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationMainSequence") { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteBackground() {
        let expectation = self.expectation(description: "testdeleteBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteBackground", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "storage", type: "String")
        TestUtils.initialize("deleteBackground") { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidName() {
        let expectation = self.expectation(description: "testdeleteBackground")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteBackground")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteBackground")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteBackground")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteBackground")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartCategory() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        TestUtils.initialize("deleteChartCategory") { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidCategoryIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let invalidFieldName = "categoryIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartCategory", "categoryIndex", paramCategoryIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "categoryIndex", parameterValue: paramCategoryIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartDataPoint() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("deleteChartDataPoint") { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let invalidFieldName = "seriesIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidPointIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let invalidFieldName = "pointIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "pointIndex", paramPointIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "pointIndex", parameterValue: paramPointIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartSeries() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        TestUtils.initialize("deleteChartSeries") { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let invalidFieldName = "seriesIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartSeries", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteComments() {
        let expectation = self.expectation(description: "testdeleteComments")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteComments", name: "name", type: "String")
        let paramAuthor : String = TestUtils.getTestValue(functionName: "deleteComments", name: "author", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteComments", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteComments", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteComments", name: "storage", type: "String")
        TestUtils.initialize("deleteComments") { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidName() {
        let expectation = self.expectation(description: "testdeleteComments")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteComments", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidAuthor() {
        let expectation = self.expectation(description: "testdeleteComments")
        let invalidFieldName = "author"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteComments", "author", paramAuthor) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "author", parameterValue: paramAuthor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteComments")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteComments", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteComments")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteComments", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteComments")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteComments", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteCommentsOnline() {
        let expectation = self.expectation(description: "testdeleteCommentsOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "document", type: "Data")
        let paramAuthor : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "author", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "password", type: "String")
        TestUtils.initialize("deleteCommentsOnline") { (response, error) -> Void in
            SlidesAPI.deleteCommentsOnline(paramDocument, paramAuthor, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteCommentsOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteCommentsOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteCommentsOnline(paramDocument, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteCommentsOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsOnlineInvalidAuthor() {
        let expectation = self.expectation(description: "testdeleteCommentsOnline")
        let invalidFieldName = "author"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteCommentsOnline", "author", paramAuthor) { (response, error) -> Void in
            SlidesAPI.deleteCommentsOnline(paramDocument, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteCommentsOnline", parameterName: "author", parameterValue: paramAuthor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteCommentsOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteCommentsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteCommentsOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteCommentsOnline(paramDocument, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteCommentsOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteDocumentProperties() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("deleteDocumentProperties") { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteDocumentProperty() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "propertyName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("deleteDocumentProperty") { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        let invalidFieldName = "propertyName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteEmbeddedFont() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFont")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteEmbeddedFont", name: "name", type: "String")
        let paramFontName : String = TestUtils.getTestValue(functionName: "deleteEmbeddedFont", name: "fontName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteEmbeddedFont", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteEmbeddedFont", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteEmbeddedFont", name: "storage", type: "String")
        TestUtils.initialize("deleteEmbeddedFont") { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteEmbeddedFontInvalidName() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFont")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteEmbeddedFont", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteEmbeddedFont", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteEmbeddedFontInvalidFontName() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFont")
        let invalidFieldName = "fontName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteEmbeddedFont", "fontName", paramFontName) { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteEmbeddedFont", parameterName: "fontName", parameterValue: paramFontName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteEmbeddedFontInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFont")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteEmbeddedFont", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteEmbeddedFont", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteEmbeddedFontInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFont")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteEmbeddedFont", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteEmbeddedFont", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteEmbeddedFontInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFont")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteEmbeddedFont", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFont(paramName, paramFontName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteEmbeddedFont", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteEmbeddedFontOnline() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFontOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteEmbeddedFontOnline", name: "document", type: "Data")
        let paramFontName : String = TestUtils.getTestValue(functionName: "deleteEmbeddedFontOnline", name: "fontName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteEmbeddedFontOnline", name: "password", type: "String")
        TestUtils.initialize("deleteEmbeddedFontOnline") { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFontOnline(paramDocument, paramFontName, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteEmbeddedFontOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFontOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteEmbeddedFontOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFontOnline(paramDocument, paramFontName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteEmbeddedFontOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteEmbeddedFontOnlineInvalidFontName() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFontOnline")
        let invalidFieldName = "fontName"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteEmbeddedFontOnline", "fontName", paramFontName) { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFontOnline(paramDocument, paramFontName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteEmbeddedFontOnline", parameterName: "fontName", parameterValue: paramFontName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteEmbeddedFontOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteEmbeddedFontOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteEmbeddedFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteEmbeddedFontOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteEmbeddedFontOnline(paramDocument, paramFontName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteEmbeddedFontOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteFile() {
        let expectation = self.expectation(description: "testdeleteFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        TestUtils.initialize("deleteFile") { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidPath() {
        let expectation = self.expectation(description: "testdeleteFile")
        let invalidFieldName = "path"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidStorageName() {
        let expectation = self.expectation(description: "testdeleteFile")
        let invalidFieldName = "storageName"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidVersionId() {
        let expectation = self.expectation(description: "testdeleteFile")
        let invalidFieldName = "versionId"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "deleteFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteFolder() {
        let expectation = self.expectation(description: "testdeleteFolder")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        let paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        TestUtils.initialize("deleteFolder") { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidPath() {
        let expectation = self.expectation(description: "testdeleteFolder")
        let invalidFieldName = "path"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramRecursive : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "recursive", invalidFieldName: invalidFieldName, type: "Bool")
        TestUtils.initialize("deleteFolder", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidStorageName() {
        let expectation = self.expectation(description: "testdeleteFolder")
        let invalidFieldName = "storageName"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramRecursive : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "recursive", invalidFieldName: invalidFieldName, type: "Bool")
        TestUtils.initialize("deleteFolder", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidRecursive() {
        let expectation = self.expectation(description: "testdeleteFolder")
        let invalidFieldName = "recursive"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramRecursive : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteFolder", name: "recursive", invalidFieldName: invalidFieldName, type: "Bool")
        TestUtils.initialize("deleteFolder", "recursive", paramRecursive) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "recursive", parameterValue: paramRecursive as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlide() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlide") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteParagraph() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "subShape", type: "String")
        TestUtils.initialize("deleteParagraph") { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraph", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "subShape", type: "String")
        TestUtils.initialize("deleteParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let invalidFieldName = "paragraphs"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraphs", "paragraphs", paramParagraphs) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "paragraphs", parameterValue: paramParagraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteParagraphs", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeletePortion() {
        let expectation = self.expectation(description: "testdeletePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deletePortion", name: "subShape", type: "String")
        TestUtils.initialize("deletePortion") { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidName() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidSubShape() {
        let expectation = self.expectation(description: "testdeletePortion")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortion", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeletePortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deletePortions", name: "subShape", type: "String")
        TestUtils.initialize("deletePortions") { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "portions"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "portions", paramPortions) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "portions", parameterValue: paramPortions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidSubShape() {
        let expectation = self.expectation(description: "testdeletePortions")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deletePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deletePortions", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteProtection() {
        let expectation = self.expectation(description: "testdeleteProtection")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "storage", type: "String")
        TestUtils.initialize("deleteProtection") { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionInvalidName() {
        let expectation = self.expectation(description: "testdeleteProtection")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteProtection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteProtection")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteProtection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteProtection")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteProtection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteProtection")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteProtection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteProtectionOnline() {
        let expectation = self.expectation(description: "testdeleteProtectionOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteProtectionOnline", name: "document", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtectionOnline", name: "password", type: "String")
        TestUtils.initialize("deleteProtectionOnline") { (response, error) -> Void in
            SlidesAPI.deleteProtectionOnline(paramDocument, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteProtectionOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteProtectionOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtectionOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteProtectionOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteProtectionOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtectionOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteProtectionOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteProtectionOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteProtectionOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteProtectionOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteProtectionOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtectionOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSection() {
        let expectation = self.expectation(description: "testdeleteSection")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        TestUtils.initialize("deleteSection") { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidName() {
        let expectation = self.expectation(description: "testdeleteSection")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidSectionIndex() {
        let expectation = self.expectation(description: "testdeleteSection")
        let invalidFieldName = "sectionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSection", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidWithSlides() {
        let expectation = self.expectation(description: "testdeleteSection")
        let invalidFieldName = "withSlides"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSection", "withSlides", paramWithSlides) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "withSlides", parameterValue: paramWithSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSection")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSection")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSection")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSections() {
        let expectation = self.expectation(description: "testdeleteSections")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        let paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        TestUtils.initialize("deleteSections") { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSections")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "sections", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidSections() {
        let expectation = self.expectation(description: "testdeleteSections")
        let invalidFieldName = "sections"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "sections", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSections", "sections", paramSections) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "sections", parameterValue: paramSections as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidWithSlides() {
        let expectation = self.expectation(description: "testdeleteSections")
        let invalidFieldName = "withSlides"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "sections", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSections", "withSlides", paramWithSlides) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "withSlides", parameterValue: paramWithSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSections")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "sections", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSections")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "sections", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSections")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "sections", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "withSlides", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteShape() {
        let expectation = self.expectation(description: "testdeleteShape")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteShape", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteShape", name: "subShape", type: "String")
        TestUtils.initialize("deleteShape") { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteShapes() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShapes", name: "slideIndex", type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "subShape", type: "String")
        TestUtils.initialize("deleteShapes") { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let invalidFieldName = "shapes"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteShapes", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlide() {
        let expectation = self.expectation(description: "testdeleteSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "storage", type: "String")
        TestUtils.initialize("deleteSlide") { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideComments() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "slideIndex", type: "Int")
        let paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "author", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideComments") { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideComments", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideComments", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidAuthor() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        let invalidFieldName = "author"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideComments", "author", paramAuthor) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "author", parameterValue: paramAuthor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideComments", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideComments", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideComments", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideCommentsOnline() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "slideIndex", type: "Int")
        let paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "author", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "password", type: "String")
        TestUtils.initialize("deleteSlideCommentsOnline") { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideCommentsOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideCommentsOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideCommentsOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideCommentsOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsOnlineInvalidAuthor() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        let invalidFieldName = "author"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideCommentsOnline", "author", paramAuthor) { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideCommentsOnline", parameterName: "author", parameterValue: paramAuthor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAuthor : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "author", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlideCommentsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlideCommentsOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideCommentsOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlides() {
        let expectation = self.expectation(description: "testdeleteSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "name", type: "String")
        let paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlides", name: "slides", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "storage", type: "String")
        TestUtils.initialize("deleteSlides") { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlides")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidSlides() {
        let expectation = self.expectation(description: "testdeleteSlides")
        let invalidFieldName = "slides"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlides", "slides", paramSlides) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "slides", parameterValue: paramSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlides")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlides")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlides")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSmartArtNode() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSmartArtNode", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSmartArtNode", name: "slideIndex", type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValue(functionName: "deleteSmartArtNode", name: "smartArtIndex", type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValue(functionName: "deleteSmartArtNode", name: "nodeIndex", type: "Int")
        let paramSubNode : String = TestUtils.getTestValue(functionName: "deleteSmartArtNode", name: "subNode", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSmartArtNode", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSmartArtNode", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSmartArtNode", name: "storage", type: "String")
        TestUtils.initialize("deleteSmartArtNode") { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSmartArtNodeInvalidName() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "nodeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSmartArtNode", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSmartArtNode", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSmartArtNodeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "nodeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSmartArtNode", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSmartArtNode", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSmartArtNodeInvalidSmartArtIndex() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let invalidFieldName = "smartArtIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "nodeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSmartArtNode", "smartArtIndex", paramSmartArtIndex) { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSmartArtNode", parameterName: "smartArtIndex", parameterValue: paramSmartArtIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSmartArtNodeInvalidNodeIndex() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let invalidFieldName = "nodeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "nodeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSmartArtNode", "nodeIndex", paramNodeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSmartArtNode", parameterName: "nodeIndex", parameterValue: paramNodeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSmartArtNodeInvalidSubNode() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let invalidFieldName = "subNode"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "nodeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSmartArtNode", "subNode", paramSubNode) { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSmartArtNode", parameterName: "subNode", parameterValue: paramSubNode as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSmartArtNodeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "nodeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSmartArtNode", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSmartArtNode", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSmartArtNodeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "nodeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSmartArtNode", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSmartArtNode", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSmartArtNodeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSmartArtNode")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSmartArtIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "smartArtIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNodeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "nodeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSubNode : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "subNode", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSmartArtNode", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSmartArtNode", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSmartArtNode(paramName, paramSlideIndex, paramSmartArtIndex, paramNodeIndex, paramSubNode, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSmartArtNode", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideAnimation() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimation", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimation", name: "slideType", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimation", name: "storage", type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimation") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimation")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimation")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimation", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimation", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideAnimationEffect() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationEffect", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationEffect", name: "slideType", type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationEffect", name: "effectIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationEffectInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationEffect")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationEffect", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationEffect", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationEffect")
        let invalidFieldName = "effectIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideType", type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "storage", type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequence", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequence", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "sequenceIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequence", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequence")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequence(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "sequenceIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "effectIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideAnimationInteractiveSequences() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequences")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideType", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "storage", type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequences") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequencesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequences")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequences", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequences", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequencesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequences")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequences", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequencesInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequences")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequences", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequences", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequencesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequences")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequences", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequences", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequencesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequences")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequences", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequences", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationInteractiveSequencesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationInteractiveSequences")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationInteractiveSequences", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationInteractiveSequences", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationInteractiveSequences(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationInteractiveSequences", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideAnimationMainSequence() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationMainSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationMainSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideType", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationMainSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationMainSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideAnimationMainSequence", name: "storage", type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationMainSequence") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationMainSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationMainSequence")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationMainSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationMainSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationMainSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationMainSequence")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationMainSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationMainSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationMainSequenceInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationMainSequence")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationMainSequence", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationMainSequence", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationMainSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationMainSequence")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationMainSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationMainSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationMainSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationMainSequence")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationMainSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationMainSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideAnimationMainSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideAnimationMainSequence")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideAnimationMainSequence", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideAnimationMainSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideAnimationMainSequence(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideAnimationMainSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideParagraph() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraph", name: "subShape", type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraph")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraph", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraph", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideParagraphs() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideParagraphs", name: "subShape", type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "paragraphs"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "paragraphs", paramParagraphs) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "paragraphs", parameterValue: paramParagraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideParagraphsInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideParagraphs")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "paragraphs", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideParagraphs", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideParagraphs", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlidePortion() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortion", name: "subShape", type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortion")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortion", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortion", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlidePortions() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "portions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteSpecialSlidePortions", name: "subShape", type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "portions"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "portions", paramPortions) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "portions", parameterValue: paramPortions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlidePortionsInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteSpecialSlidePortions")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "portions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlidePortions", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlidePortions", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideShape() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideShape", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShape", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShape", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShape", name: "subShape", type: "String")
        TestUtils.initialize("deleteSpecialSlideShape") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapeInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShape", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShape", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSpecialSlideShapes() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSpecialSlideShapes", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShapes", name: "slideType", type: "String")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSpecialSlideShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShapes", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "deleteSpecialSlideShapes", name: "subShape", type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes") { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapesInvalidSlideType() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShapes", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let invalidFieldName = "shapes"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSpecialSlideShapesInvalidSubShape() {
        let expectation = self.expectation(description: "testdeleteSpecialSlideShapes")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "deleteSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteSpecialSlideShapes", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.deleteSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramShapes, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSpecialSlideShapes", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteUnusedLayoutSlides() {
        let expectation = self.expectation(description: "testdeleteUnusedLayoutSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteUnusedLayoutSlides", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteUnusedLayoutSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteUnusedLayoutSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteUnusedLayoutSlides", name: "storage", type: "String")
        TestUtils.initialize("deleteUnusedLayoutSlides") { (response, error) -> Void in
            SlidesAPI.deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedLayoutSlidesInvalidName() {
        let expectation = self.expectation(description: "testdeleteUnusedLayoutSlides")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedLayoutSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedLayoutSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedLayoutSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteUnusedLayoutSlides")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedLayoutSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedLayoutSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedLayoutSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteUnusedLayoutSlides")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedLayoutSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedLayoutSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedLayoutSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteUnusedLayoutSlides")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedLayoutSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteUnusedLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedLayoutSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteUnusedLayoutSlidesOnline() {
        let expectation = self.expectation(description: "testdeleteUnusedLayoutSlidesOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteUnusedLayoutSlidesOnline", name: "document", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteUnusedLayoutSlidesOnline", name: "password", type: "String")
        TestUtils.initialize("deleteUnusedLayoutSlidesOnline") { (response, error) -> Void in
            SlidesAPI.deleteUnusedLayoutSlidesOnline(paramDocument, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedLayoutSlidesOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteUnusedLayoutSlidesOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlidesOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlidesOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedLayoutSlidesOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteUnusedLayoutSlidesOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedLayoutSlidesOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedLayoutSlidesOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteUnusedLayoutSlidesOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlidesOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedLayoutSlidesOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedLayoutSlidesOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteUnusedLayoutSlidesOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedLayoutSlidesOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteUnusedMasterSlides() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteUnusedMasterSlides", name: "name", type: "String")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValue(functionName: "deleteUnusedMasterSlides", name: "ignorePreserveField", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteUnusedMasterSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteUnusedMasterSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteUnusedMasterSlides", name: "storage", type: "String")
        TestUtils.initialize("deleteUnusedMasterSlides") { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedMasterSlidesInvalidName() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlides")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "ignorePreserveField", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedMasterSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedMasterSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedMasterSlidesInvalidIgnorePreserveField() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlides")
        let invalidFieldName = "ignorePreserveField"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "ignorePreserveField", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedMasterSlides", "ignorePreserveField", paramIgnorePreserveField) { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedMasterSlides", parameterName: "ignorePreserveField", parameterValue: paramIgnorePreserveField as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedMasterSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlides")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "ignorePreserveField", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedMasterSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedMasterSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedMasterSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlides")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "ignorePreserveField", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedMasterSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedMasterSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedMasterSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlides")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "ignorePreserveField", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedMasterSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlides(paramName, paramIgnorePreserveField, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedMasterSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteUnusedMasterSlidesOnline() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlidesOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteUnusedMasterSlidesOnline", name: "document", type: "Data")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValue(functionName: "deleteUnusedMasterSlidesOnline", name: "ignorePreserveField", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteUnusedMasterSlidesOnline", name: "password", type: "String")
        TestUtils.initialize("deleteUnusedMasterSlidesOnline") { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlidesOnline(paramDocument, paramIgnorePreserveField, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedMasterSlidesOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlidesOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "ignorePreserveField", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedMasterSlidesOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlidesOnline(paramDocument, paramIgnorePreserveField, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedMasterSlidesOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedMasterSlidesOnlineInvalidIgnorePreserveField() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlidesOnline")
        let invalidFieldName = "ignorePreserveField"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "ignorePreserveField", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedMasterSlidesOnline", "ignorePreserveField", paramIgnorePreserveField) { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlidesOnline(paramDocument, paramIgnorePreserveField, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedMasterSlidesOnline", parameterName: "ignorePreserveField", parameterValue: paramIgnorePreserveField as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteUnusedMasterSlidesOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteUnusedMasterSlidesOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIgnorePreserveField : Bool = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "ignorePreserveField", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteUnusedMasterSlidesOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteUnusedMasterSlidesOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteUnusedMasterSlidesOnline(paramDocument, paramIgnorePreserveField, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteUnusedMasterSlidesOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteWatermark() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "name", type: "String")
        let paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "shapeName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "storage", type: "String")
        TestUtils.initialize("deleteWatermark") { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidName() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "shapeName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteWatermark", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidShapeName() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        let invalidFieldName = "shapeName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "shapeName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteWatermark", "shapeName", paramShapeName) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "shapeName", parameterValue: paramShapeName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "shapeName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteWatermark", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "shapeName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteWatermark", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "shapeName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermark", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteWatermark", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteWatermarkOnline() {
        let expectation = self.expectation(description: "testdeleteWatermarkOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "document", type: "Data")
        let paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "shapeName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "password", type: "String")
        TestUtils.initialize("deleteWatermarkOnline") { (response, error) -> Void in
            SlidesAPI.deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteWatermarkOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShapeName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "shapeName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteWatermarkOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermarkOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkOnlineInvalidShapeName() {
        let expectation = self.expectation(description: "testdeleteWatermarkOnline")
        let invalidFieldName = "shapeName"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShapeName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "shapeName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteWatermarkOnline", "shapeName", paramShapeName) { (response, error) -> Void in
            SlidesAPI.deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermarkOnline", parameterName: "shapeName", parameterValue: paramShapeName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteWatermarkOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramShapeName : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "shapeName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "deleteWatermarkOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("deleteWatermarkOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermarkOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadFile() {
        let expectation = self.expectation(description: "testdownloadFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        TestUtils.initialize("downloadFile") { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidPath() {
        let expectation = self.expectation(description: "testdownloadFile")
        let invalidFieldName = "path"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidStorageName() {
        let expectation = self.expectation(description: "testdownloadFile")
        let invalidFieldName = "storageName"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidVersionId() {
        let expectation = self.expectation(description: "testdownloadFile")
        let invalidFieldName = "versionId"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "downloadFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImage() {
        let expectation = self.expectation(description: "testdownloadImage")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadImage", name: "name", type: "String")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImage", name: "index", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadImage", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImage", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadImage", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadImage", name: "storage", type: "String")
        TestUtils.initialize("downloadImage") { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidName() {
        let expectation = self.expectation(description: "testdownloadImage")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImage", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidIndex() {
        let expectation = self.expectation(description: "testdownloadImage")
        let invalidFieldName = "index"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImage", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadImage")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImage", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImage")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImage", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadImage")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImage", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadImage")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImage", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImage", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImageDefaultFormat() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "name", type: "String")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "index", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "storage", type: "String")
        TestUtils.initialize("downloadImageDefaultFormat") { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidName() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidIndex() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        let invalidFieldName = "index"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImageDefaultFormatOnline() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormatOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "document", type: "Data")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "index", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "password", type: "String")
        TestUtils.initialize("downloadImageDefaultFormatOnline") { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormatOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageDefaultFormatOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormatOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatOnlineInvalidIndex() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormatOnline")
        let invalidFieldName = "index"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageDefaultFormatOnline", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormatOnline", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormatOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageDefaultFormatOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageDefaultFormatOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormatOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImageOnline() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "document", type: "Data")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "index", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "password", type: "String")
        TestUtils.initialize("downloadImageOnline") { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageOnlineInvalidIndex() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        let invalidFieldName = "index"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageOnline", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageOnline", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "index", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImageOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImageOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImages() {
        let expectation = self.expectation(description: "testdownloadImages")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadImages", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadImages", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImages", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadImages", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadImages", name: "storage", type: "String")
        TestUtils.initialize("downloadImages") { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidName() {
        let expectation = self.expectation(description: "testdownloadImages")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImages", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadImages")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImages", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImages")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImages", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadImages")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImages", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadImages")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImages", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImagesDefaultFormat() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "storage", type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat") { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatInvalidName() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormat", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImagesDefaultFormatOnline() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormatOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "document", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "password", type: "String")
        TestUtils.initialize("downloadImagesDefaultFormatOnline") { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormatOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormatOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormatOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormatOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormatOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormatOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormatOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesDefaultFormatOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormatOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormatOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImagesOnline() {
        let expectation = self.expectation(description: "testdownloadImagesOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "password", type: "String")
        TestUtils.initialize("downloadImagesOnline") { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadImagesOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadImagesOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImagesOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadImagesOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadImagesOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadNotesSlide() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadNotesSlide") { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidWidth() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "width"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidHeight() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "height"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlide", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadNotesSlideOnline() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadNotesSlideOnline") { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let invalidFieldName = "width"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let invalidFieldName = "height"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadNotesSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadPortionAsMathMl() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadPortionAsMathMl", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadPortionAsMathMl", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadPortionAsMathMl", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "downloadPortionAsMathMl", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadPortionAsMathMl", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadPortionAsMathMl", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadPortionAsMathMl", name: "storage", type: "String")
        TestUtils.initialize("downloadPortionAsMathMl") { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPortionAsMathMlInvalidName() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadPortionAsMathMl", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPortionAsMathMl", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPortionAsMathMlInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadPortionAsMathMl", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPortionAsMathMl", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPortionAsMathMlInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadPortionAsMathMl", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPortionAsMathMl", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPortionAsMathMlInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadPortionAsMathMl", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPortionAsMathMl", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPortionAsMathMlInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadPortionAsMathMl", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPortionAsMathMl", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPortionAsMathMlInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadPortionAsMathMl", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPortionAsMathMl", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPortionAsMathMlInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadPortionAsMathMl", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPortionAsMathMl", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPortionAsMathMlInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadPortionAsMathMl")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadPortionAsMathMl", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadPortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPortionAsMathMl", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadPresentation() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        let paramSlides : [Int] = TestUtils.getTestValue(functionName: "downloadPresentation", name: "slides", type: "[Int]")
        TestUtils.initialize("downloadPresentation") { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidName() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("downloadPresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("downloadPresentation", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("downloadPresentation", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("downloadPresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("downloadPresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("downloadPresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("downloadPresentation", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidSlides() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let invalidFieldName = "slides"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "downloadPresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("downloadPresentation", "slides", paramSlides) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "slides", parameterValue: paramSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadShape() {
        let expectation = self.expectation(description: "testdownloadShape")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "downloadShape", name: "subShape", type: "String")
        TestUtils.initialize("downloadShape") { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidName() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "scaleX"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "scaleY"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidBounds() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "bounds"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testdownloadShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadShapeOnline() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "options", type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline") { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "shapeIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidScaleX() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "scaleX"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidScaleY() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "scaleY"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidBounds() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "bounds"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "storage"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let invalidFieldName = "options"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShapeOnline", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadSlide() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadSlide") { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidName() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidWidth() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "width"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidHeight() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "height"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSlide", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadSlideOnline() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "options", type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline") { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "width"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "height"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "storage"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let invalidFieldName = "options"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("downloadSlideOnline", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadSpecialSlideShape() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "format", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "fontsFolder", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "downloadSpecialSlideShape", name: "subShape", type: "String")
        TestUtils.initialize("downloadSpecialSlideShape") { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidSlideType() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "scaleX"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "scaleY"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidBounds() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "bounds"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSpecialSlideShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testdownloadSpecialSlideShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "downloadSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("downloadSpecialSlideShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.downloadSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSpecialSlideShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetAnimation() {
        let expectation = self.expectation(description: "testgetAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "getAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getAnimation", name: "storage", type: "String")
        TestUtils.initialize("getAnimation") { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidName() {
        let expectation = self.expectation(description: "testgetAnimation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetAnimation")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetAnimation")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getAnimation", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetAnimation")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getAnimation", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testgetAnimation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testgetAnimation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testgetAnimation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetApiInfo() {
        let expectation = self.expectation(description: "testgetApiInfo")
        TestUtils.initialize("getApiInfo") { (response, error) -> Void in
            SlidesAPI.getApiInfo() { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetBackground() {
        let expectation = self.expectation(description: "testgetBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "getBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getBackground", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getBackground", name: "storage", type: "String")
        TestUtils.initialize("getBackground") { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidName() {
        let expectation = self.expectation(description: "testgetBackground")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetBackground")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testgetBackground")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testgetBackground")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testgetBackground")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetColorScheme() {
        let expectation = self.expectation(description: "testgetColorScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getColorScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "storage", type: "String")
        TestUtils.initialize("getColorScheme") { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetColorScheme")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getColorScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetColorScheme")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getColorScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetColorScheme")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getColorScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetColorScheme")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getColorScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetColorScheme")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getColorScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getColorScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetDiscUsage() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String")
        TestUtils.initialize("getDiscUsage") { (response, error) -> Void in
            SlidesAPI.getDiscUsage(paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDiscUsageInvalidStorageName() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        let invalidFieldName = "storageName"
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "getDiscUsage", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDiscUsage", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getDiscUsage(paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDiscUsage", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetDocumentProperties() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("getDocumentProperties") { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetDocumentProperty() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "propertyName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("getDocumentProperty") { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        let invalidFieldName = "propertyName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFileVersions() {
        let expectation = self.expectation(description: "testgetFileVersions")
        let paramPath : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String")
        TestUtils.initialize("getFileVersions") { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFileVersionsInvalidPath() {
        let expectation = self.expectation(description: "testgetFileVersions")
        let invalidFieldName = "path"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "getFileVersions", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "getFileVersions", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFileVersions", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFileVersionsInvalidStorageName() {
        let expectation = self.expectation(description: "testgetFileVersions")
        let invalidFieldName = "storageName"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "getFileVersions", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "getFileVersions", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFileVersions", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFilesList() {
        let expectation = self.expectation(description: "testgetFilesList")
        let paramPath : String = TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String")
        TestUtils.initialize("getFilesList") { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFilesListInvalidPath() {
        let expectation = self.expectation(description: "testgetFilesList")
        let invalidFieldName = "path"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "getFilesList", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "getFilesList", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFilesList", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFilesListInvalidStorageName() {
        let expectation = self.expectation(description: "testgetFilesList")
        let invalidFieldName = "storageName"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "getFilesList", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "getFilesList", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFilesList", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFontScheme() {
        let expectation = self.expectation(description: "testgetFontScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFontScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "storage", type: "String")
        TestUtils.initialize("getFontScheme") { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetFontScheme")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFontScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetFontScheme")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFontScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetFontScheme")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFontScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetFontScheme")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFontScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetFontScheme")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFontScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFontScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFonts() {
        let expectation = self.expectation(description: "testgetFonts")
        let paramName : String = TestUtils.getTestValue(functionName: "getFonts", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getFonts", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getFonts", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getFonts", name: "storage", type: "String")
        TestUtils.initialize("getFonts") { (response, error) -> Void in
            SlidesAPI.getFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontsInvalidName() {
        let expectation = self.expectation(description: "testgetFonts")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFonts", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFonts", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontsInvalidPassword() {
        let expectation = self.expectation(description: "testgetFonts")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFonts", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFonts", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontsInvalidFolder() {
        let expectation = self.expectation(description: "testgetFonts")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFonts", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFonts", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontsInvalidStorage() {
        let expectation = self.expectation(description: "testgetFonts")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFonts", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFonts", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getFonts(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFonts", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFontsOnline() {
        let expectation = self.expectation(description: "testgetFontsOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "getFontsOnline", name: "document", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getFontsOnline", name: "password", type: "String")
        TestUtils.initialize("getFontsOnline") { (response, error) -> Void in
            SlidesAPI.getFontsOnline(paramDocument, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontsOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testgetFontsOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "getFontsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFontsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFontsOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.getFontsOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontsOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontsOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testgetFontsOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "getFontsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFontsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFontsOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getFontsOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontsOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFormatScheme() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFormatScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "storage", type: "String")
        TestUtils.initialize("getFormatScheme") { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFormatScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFormatScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFormatScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFormatScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getFormatScheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getFormatScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetLayoutSlide() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        TestUtils.initialize("getLayoutSlide") { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetLayoutSlides() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "storage", type: "String")
        TestUtils.initialize("getLayoutSlides") { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesInvalidName() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getLayoutSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getLayoutSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetMasterSlide() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        TestUtils.initialize("getMasterSlide") { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidName() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetMasterSlides() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "storage", type: "String")
        TestUtils.initialize("getMasterSlides") { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesInvalidName() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getMasterSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getMasterSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlide() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlide") { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideHeaderFooter() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideOnline() {
        let expectation = self.expectation(description: "testgetNotesSlideOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "password", type: "String")
        TestUtils.initialize("getNotesSlideOnline") { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testgetNotesSlideOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlideOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlideOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getNotesSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getNotesSlideOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraph() {
        let expectation = self.expectation(description: "testgetParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getParagraph", name: "subShape", type: "String")
        TestUtils.initialize("getParagraph") { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetParagraph")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraph")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraph")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraph")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraph")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraph")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraph")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidSubShape() {
        let expectation = self.expectation(description: "testgetParagraph")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraph", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraphEffective() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let paramName : String = TestUtils.getTestValue(functionName: "getParagraphEffective", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphEffective", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphEffective", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphEffective", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphEffective", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphEffective", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphEffective", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getParagraphEffective", name: "subShape", type: "String")
        TestUtils.initialize("getParagraphEffective") { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphEffectiveInvalidName() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphEffective", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphEffective", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphEffectiveInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphEffective", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphEffective", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphEffectiveInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphEffective", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphEffective", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphEffectiveInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphEffective", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphEffective", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphEffectiveInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphEffective", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphEffective", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphEffectiveInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphEffective", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphEffective", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphEffectiveInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphEffective", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphEffective", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphEffectiveInvalidSubShape() {
        let expectation = self.expectation(description: "testgetParagraphEffective")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphEffective", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getParagraphEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphEffective", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraphRectangle() {
        let expectation = self.expectation(description: "testgetParagraphRectangle")
        let paramName : String = TestUtils.getTestValue(functionName: "getParagraphRectangle", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphRectangle", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphRectangle", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraphRectangle", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphRectangle", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphRectangle", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphRectangle", name: "storage", type: "String")
        TestUtils.initialize("getParagraphRectangle") { (response, error) -> Void in
            SlidesAPI.getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphRectangleInvalidName() {
        let expectation = self.expectation(description: "testgetParagraphRectangle")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphRectangle", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphRectangle", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphRectangleInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraphRectangle")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphRectangle", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphRectangle", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphRectangleInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphRectangle")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphRectangle", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphRectangle", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphRectangleInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraphRectangle")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphRectangle", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphRectangle", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphRectangleInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraphRectangle")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphRectangle", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphRectangle", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphRectangleInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraphRectangle")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphRectangle", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphRectangle", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphRectangleInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraphRectangle")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphRectangle", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getParagraphRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphRectangle", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraphs() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "subShape", type: "String")
        TestUtils.initialize("getParagraphs") { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidSubShape() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getParagraphs", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPlaceholder() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        let paramName : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "slideIndex", type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "placeholderIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "storage", type: "String")
        TestUtils.initialize("getPlaceholder") { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidName() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "placeholderIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholder", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "placeholderIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholder", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidPlaceholderIndex() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        let invalidFieldName = "placeholderIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "placeholderIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholder", "placeholderIndex", paramPlaceholderIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "placeholderIndex", parameterValue: paramPlaceholderIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidPassword() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "placeholderIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholder", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidFolder() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "placeholderIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholder", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidStorage() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "placeholderIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholder", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholder", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPlaceholders() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        let paramName : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholders", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "storage", type: "String")
        TestUtils.initialize("getPlaceholders") { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidName() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholders", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholders", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidPassword() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholders", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidFolder() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholders", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidStorage() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPlaceholders", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPlaceholders", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPortion() {
        let expectation = self.expectation(description: "testgetPortion")
        let paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getPortion", name: "subShape", type: "String")
        TestUtils.initialize("getPortion") { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidName() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidSubShape() {
        let expectation = self.expectation(description: "testgetPortion")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortion", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPortionEffective() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let paramName : String = TestUtils.getTestValue(functionName: "getPortionEffective", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortionEffective", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortionEffective", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortionEffective", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortionEffective", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPortionEffective", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPortionEffective", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPortionEffective", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getPortionEffective", name: "subShape", type: "String")
        TestUtils.initialize("getPortionEffective") { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidName() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidPassword() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidFolder() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidStorage() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionEffectiveInvalidSubShape() {
        let expectation = self.expectation(description: "testgetPortionEffective")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortionEffective", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionEffective", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getPortionEffective(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionEffective", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPortionRectangle() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let paramName : String = TestUtils.getTestValue(functionName: "getPortionRectangle", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortionRectangle", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortionRectangle", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortionRectangle", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortionRectangle", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPortionRectangle", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPortionRectangle", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPortionRectangle", name: "storage", type: "String")
        TestUtils.initialize("getPortionRectangle") { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionRectangleInvalidName() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionRectangle", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionRectangle", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionRectangleInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionRectangle", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionRectangle", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionRectangleInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionRectangle", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionRectangle", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionRectangleInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionRectangle", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionRectangle", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionRectangleInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionRectangle", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionRectangle", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionRectangleInvalidPassword() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionRectangle", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionRectangle", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionRectangleInvalidFolder() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionRectangle", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionRectangle", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionRectangleInvalidStorage() {
        let expectation = self.expectation(description: "testgetPortionRectangle")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortionRectangle", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortionRectangle", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPortionRectangle(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortionRectangle", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPortions() {
        let expectation = self.expectation(description: "testgetPortions")
        let paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getPortions", name: "subShape", type: "String")
        TestUtils.initialize("getPortions") { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidName() {
        let expectation = self.expectation(description: "testgetPortions")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPortions")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetPortions")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetPortions")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetPortions")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetPortions")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetPortions")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidSubShape() {
        let expectation = self.expectation(description: "testgetPortions")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getPortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPortions", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPresentation() {
        let expectation = self.expectation(description: "testgetPresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "getPresentation", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPresentation", name: "storage", type: "String")
        TestUtils.initialize("getPresentation") { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationInvalidName() {
        let expectation = self.expectation(description: "testgetPresentation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationInvalidPassword() {
        let expectation = self.expectation(description: "testgetPresentation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationInvalidFolder() {
        let expectation = self.expectation(description: "testgetPresentation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationInvalidStorage() {
        let expectation = self.expectation(description: "testgetPresentation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPresentationImages() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        let paramName : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "storage", type: "String")
        TestUtils.initialize("getPresentationImages") { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationImagesInvalidName() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationImages", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationImages", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationImagesInvalidPassword() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationImages", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationImages", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationImagesInvalidFolder() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationImages", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationImages", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationImagesInvalidStorage() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationImages", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationImages", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPresentationTextItems() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        let paramName : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "name", type: "String")
        let paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "withEmpty", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "storage", type: "String")
        TestUtils.initialize("getPresentationTextItems") { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidName() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationTextItems", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidWithEmpty() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        let invalidFieldName = "withEmpty"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationTextItems", "withEmpty", paramWithEmpty) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "withEmpty", parameterValue: paramWithEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidPassword() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationTextItems", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidFolder() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationTextItems", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidStorage() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getPresentationTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getPresentationTextItems", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetProtectionProperties() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "storage", type: "String")
        TestUtils.initialize("getProtectionProperties") { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetProtectionPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getProtectionProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getProtectionProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetProtectionPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getProtectionProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getProtectionProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetProtectionPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getProtectionProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getProtectionProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetProtectionPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getProtectionProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getProtectionProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getProtectionProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSections() {
        let expectation = self.expectation(description: "testgetSections")
        let paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        TestUtils.initialize("getSections") { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidName() {
        let expectation = self.expectation(description: "testgetSections")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSections")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSections")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSections")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetShape() {
        let expectation = self.expectation(description: "testgetShape")
        let paramName : String = TestUtils.getTestValue(functionName: "getShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getShape", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getShape", name: "subShape", type: "String")
        TestUtils.initialize("getShape") { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidName() {
        let expectation = self.expectation(description: "testgetShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testgetShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetShapeGeometryPath() {
        let expectation = self.expectation(description: "testgetShapeGeometryPath")
        let paramName : String = TestUtils.getTestValue(functionName: "getShapeGeometryPath", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShapeGeometryPath", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShapeGeometryPath", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getShapeGeometryPath", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getShapeGeometryPath", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getShapeGeometryPath", name: "storage", type: "String")
        TestUtils.initialize("getShapeGeometryPath") { (response, error) -> Void in
            SlidesAPI.getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeGeometryPathInvalidName() {
        let expectation = self.expectation(description: "testgetShapeGeometryPath")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapeGeometryPath", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapeGeometryPath", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeGeometryPathInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetShapeGeometryPath")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapeGeometryPath", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapeGeometryPath", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeGeometryPathInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetShapeGeometryPath")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapeGeometryPath", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapeGeometryPath", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeGeometryPathInvalidPassword() {
        let expectation = self.expectation(description: "testgetShapeGeometryPath")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapeGeometryPath", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapeGeometryPath", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeGeometryPathInvalidFolder() {
        let expectation = self.expectation(description: "testgetShapeGeometryPath")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapeGeometryPath", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapeGeometryPath", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeGeometryPathInvalidStorage() {
        let expectation = self.expectation(description: "testgetShapeGeometryPath")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapeGeometryPath", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapeGeometryPath", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetShapes() {
        let expectation = self.expectation(description: "testgetShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "getShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShapes", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getShapes", name: "storage", type: "String")
        let paramShapeType : String = TestUtils.getTestValue(functionName: "getShapes", name: "shapeType", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getShapes", name: "subShape", type: "String")
        TestUtils.initialize("getShapes") { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidName() {
        let expectation = self.expectation(description: "testgetShapes")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeType : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "shapeType", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetShapes")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeType : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "shapeType", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetShapes")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeType : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "shapeType", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetShapes")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeType : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "shapeType", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetShapes")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeType : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "shapeType", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidShapeType() {
        let expectation = self.expectation(description: "testgetShapes")
        let invalidFieldName = "shapeType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeType : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "shapeType", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapes", "shapeType", paramShapeType) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "shapeType", parameterValue: paramShapeType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidSubShape() {
        let expectation = self.expectation(description: "testgetShapes")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeType : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "shapeType", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getShapes", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage, paramShapeType, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlide() {
        let expectation = self.expectation(description: "testgetSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlide", name: "storage", type: "String")
        TestUtils.initialize("getSlide") { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidName() {
        let expectation = self.expectation(description: "testgetSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideComments() {
        let expectation = self.expectation(description: "testgetSlideComments")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideComments", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "storage", type: "String")
        TestUtils.initialize("getSlideComments") { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidName() {
        let expectation = self.expectation(description: "testgetSlideComments")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideComments", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideComments")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideComments", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideComments")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideComments", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideComments")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideComments", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideComments")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideComments", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideComments", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideHeaderFooter() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("getSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideImages() {
        let expectation = self.expectation(description: "testgetSlideImages")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideImages", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "storage", type: "String")
        TestUtils.initialize("getSlideImages") { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideImages")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideImages", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideImages")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideImages", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideImages")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideImages", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideImages")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideImages", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideImages")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideImages", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideImages", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideProperties() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "storage", type: "String")
        TestUtils.initialize("getSlideProperties") { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidePropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidePropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidePropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidePropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideShowProperties() {
        let expectation = self.expectation(description: "testgetSlideShowProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideShowProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideShowProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideShowProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideShowProperties", name: "storage", type: "String")
        TestUtils.initialize("getSlideShowProperties") { (response, error) -> Void in
            SlidesAPI.getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShowPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideShowProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideShowProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShowProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShowPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideShowProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideShowProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShowProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShowPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideShowProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideShowProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShowProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideShowPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideShowProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideShowProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideShowProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShowProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideTextItems() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "slideIndex", type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "withEmpty", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "storage", type: "String")
        TestUtils.initialize("getSlideTextItems") { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidName() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideTextItems", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideTextItems", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidWithEmpty() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        let invalidFieldName = "withEmpty"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideTextItems", "withEmpty", paramWithEmpty) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "withEmpty", parameterValue: paramWithEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideTextItems", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideTextItems", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "withEmpty", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlideTextItems", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlideTextItems", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlides() {
        let expectation = self.expectation(description: "testgetSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlides", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlides", name: "storage", type: "String")
        TestUtils.initialize("getSlides") { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesInvalidName() {
        let expectation = self.expectation(description: "testgetSlides")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlides")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlides")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlides")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSpecialSlideAnimation() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "getSpecialSlideAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideAnimation", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "getSpecialSlideAnimation", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideAnimation", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSpecialSlideAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSpecialSlideAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSpecialSlideAnimation", name: "storage", type: "String")
        TestUtils.initialize("getSpecialSlideAnimation") { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideAnimationInvalidSlideType() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideAnimation", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideAnimation", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideAnimationInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideAnimation", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideAnimation", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideAnimationInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideAnimation", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideAnimation", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testgetSpecialSlideAnimation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSpecialSlideParagraph() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraph", name: "subShape", type: "String")
        TestUtils.initialize("getSpecialSlideParagraph") { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidSlideType() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphInvalidSubShape() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraph")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraph", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraph", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSpecialSlideParagraphs() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideParagraphs", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraphs", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraphs", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getSpecialSlideParagraphs", name: "subShape", type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs") { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphsInvalidSlideType() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraphs", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideParagraphsInvalidSubShape() {
        let expectation = self.expectation(description: "testgetSpecialSlideParagraphs")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideParagraphs", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideParagraphs", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideParagraphs(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideParagraphs", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSpecialSlidePortion() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortion", name: "subShape", type: "String")
        TestUtils.initialize("getSpecialSlidePortion") { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidSlideType() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionInvalidSubShape() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortion")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortion", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortion", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSpecialSlidePortions() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getSpecialSlidePortions", name: "subShape", type: "String")
        TestUtils.initialize("getSpecialSlidePortions") { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidName() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidSlideType() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlidePortionsInvalidSubShape() {
        let expectation = self.expectation(description: "testgetSpecialSlidePortions")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlidePortions", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlidePortions", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getSpecialSlidePortions(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlidePortions", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSpecialSlideShape() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "getSpecialSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideShape", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "getSpecialSlideShape", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSpecialSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSpecialSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSpecialSlideShape", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getSpecialSlideShape", name: "subShape", type: "String")
        TestUtils.initialize("getSpecialSlideShape") { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapeInvalidSlideType() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShape", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShape", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testgetSpecialSlideShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSpecialSlideShapes() {
        let expectation = self.expectation(description: "testgetSpecialSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "getSpecialSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSpecialSlideShapes", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "getSpecialSlideShapes", name: "slideType", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSpecialSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSpecialSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSpecialSlideShapes", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "getSpecialSlideShapes", name: "subShape", type: "String")
        TestUtils.initialize("getSpecialSlideShapes") { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testgetSpecialSlideShapes")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSpecialSlideShapes")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapesInvalidSlideType() {
        let expectation = self.expectation(description: "testgetSpecialSlideShapes")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShapes", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShapes", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSpecialSlideShapes")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSpecialSlideShapes")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSpecialSlideShapes")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSpecialSlideShapesInvalidSubShape() {
        let expectation = self.expectation(description: "testgetSpecialSlideShapes")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "getSpecialSlideShapes", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getSpecialSlideShapes", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.getSpecialSlideShapes(paramName, paramSlideIndex, paramSlideType, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSpecialSlideShapes", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetTheme() {
        let expectation = self.expectation(description: "testgetTheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getTheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getTheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getTheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getTheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getTheme", name: "storage", type: "String")
        TestUtils.initialize("getTheme") { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidName() {
        let expectation = self.expectation(description: "testgetTheme")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getTheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetTheme")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getTheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetTheme")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getTheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetTheme")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getTheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetTheme")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getTheme", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getTheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetViewProperties() {
        let expectation = self.expectation(description: "testgetViewProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "storage", type: "String")
        TestUtils.initialize("getViewProperties") { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetViewPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetViewProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getViewProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getViewProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetViewPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetViewProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getViewProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getViewProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetViewPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetViewProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getViewProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getViewProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetViewPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetViewProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "getViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("getViewProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getViewProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testHighlightShapeRegex() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let paramName : String = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "shapeIndex", type: "Int")
        let paramRegex : String = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "regex", type: "String")
        let paramColor : String = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "color", type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "wholeWordsOnly", type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "highlightShapeRegex", name: "storage", type: "String")
        TestUtils.initialize("highlightShapeRegex") { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidName() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "name", paramName) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidSlideIndex() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidShapeIndex() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidRegex() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "regex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "regex", paramRegex) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "regex", parameterValue: paramRegex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidColor() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "color"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "color", paramColor) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "color", parameterValue: paramColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidWholeWordsOnly() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "wholeWordsOnly"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "wholeWordsOnly", paramWholeWordsOnly) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "wholeWordsOnly", parameterValue: paramWholeWordsOnly as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "ignoreCase"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidPassword() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidFolder() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeRegexInvalidStorage() {
        let expectation = self.expectation(description: "testhighlightShapeRegex")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramRegex : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "regex", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeRegex", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeRegex", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.highlightShapeRegex(paramName, paramSlideIndex, paramShapeIndex, paramRegex, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeRegex", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testHighlightShapeText() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let paramName : String = TestUtils.getTestValue(functionName: "highlightShapeText", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "highlightShapeText", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "highlightShapeText", name: "shapeIndex", type: "Int")
        let paramText : String = TestUtils.getTestValue(functionName: "highlightShapeText", name: "text", type: "String")
        let paramColor : String = TestUtils.getTestValue(functionName: "highlightShapeText", name: "color", type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValue(functionName: "highlightShapeText", name: "wholeWordsOnly", type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "highlightShapeText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "highlightShapeText", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "highlightShapeText", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "highlightShapeText", name: "storage", type: "String")
        TestUtils.initialize("highlightShapeText") { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidName() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "name", paramName) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidSlideIndex() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidShapeIndex() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidText() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "text"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "text", paramText) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "text", parameterValue: paramText as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidColor() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "color"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "color", paramColor) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "color", parameterValue: paramColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidWholeWordsOnly() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "wholeWordsOnly"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "wholeWordsOnly", paramWholeWordsOnly) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "wholeWordsOnly", parameterValue: paramWholeWordsOnly as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "ignoreCase"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidPassword() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidFolder() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testHighlightShapeTextInvalidStorage() {
        let expectation = self.expectation(description: "testhighlightShapeText")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramText : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "text", invalidFieldName: invalidFieldName, type: "String")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramWholeWordsOnly : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "wholeWordsOnly", invalidFieldName: invalidFieldName, type: "Bool")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "highlightShapeText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("highlightShapeText", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.highlightShapeText(paramName, paramSlideIndex, paramShapeIndex, paramText, paramColor, paramWholeWordsOnly, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "highlightShapeText", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testImportFromHtml() {
        let expectation = self.expectation(description: "testimportFromHtml")
        let paramName : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "name", type: "String")
        let paramHtml : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "html", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "storage", type: "String")
        TestUtils.initialize("importFromHtml") { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidName() {
        let expectation = self.expectation(description: "testimportFromHtml")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramHtml : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "html", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromHtml", "name", paramName) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidHtml() {
        let expectation = self.expectation(description: "testimportFromHtml")
        let invalidFieldName = "html"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramHtml : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "html", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromHtml", "html", paramHtml) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "html", parameterValue: paramHtml as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidPassword() {
        let expectation = self.expectation(description: "testimportFromHtml")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramHtml : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "html", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromHtml", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidFolder() {
        let expectation = self.expectation(description: "testimportFromHtml")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramHtml : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "html", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromHtml", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidStorage() {
        let expectation = self.expectation(description: "testimportFromHtml")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramHtml : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "html", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromHtml", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromHtml", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testImportFromPdf() {
        let expectation = self.expectation(description: "testimportFromPdf")
        let paramName : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "name", type: "String")
        let paramPdf : Data = TestUtils.getTestValue(functionName: "importFromPdf", name: "pdf", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "storage", type: "String")
        TestUtils.initialize("importFromPdf") { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidName() {
        let expectation = self.expectation(description: "testimportFromPdf")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPdf : Data = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "pdf", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromPdf", "name", paramName) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidPdf() {
        let expectation = self.expectation(description: "testimportFromPdf")
        let invalidFieldName = "pdf"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPdf : Data = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "pdf", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromPdf", "pdf", paramPdf) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "pdf", parameterValue: paramPdf as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidPassword() {
        let expectation = self.expectation(description: "testimportFromPdf")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPdf : Data = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "pdf", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromPdf", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidFolder() {
        let expectation = self.expectation(description: "testimportFromPdf")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPdf : Data = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "pdf", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromPdf", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidStorage() {
        let expectation = self.expectation(description: "testimportFromPdf")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPdf : Data = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "pdf", invalidFieldName: invalidFieldName, type: "Data")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importFromPdf", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importFromPdf", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testImportShapesFromSvg() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let paramName : String = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "slideIndex", type: "Int")
        let paramImage : Data = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "image", type: "Data")
        let paramX : Int = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "x", type: "Int")
        let paramY : Int = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "y", type: "Int")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "height", type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "shapes", type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "group", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "importShapesFromSvg", name: "storage", type: "String")
        TestUtils.initialize("importShapesFromSvg") { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidName() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "name", paramName) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidSlideIndex() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidImage() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "image"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "image", paramImage) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "image", parameterValue: paramImage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidX() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "x"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "x", paramX) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "x", parameterValue: paramX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidY() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "y"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "y", paramY) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "y", parameterValue: paramY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidWidth() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "width"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidHeight() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "height"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidShapes() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "shapes"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidGroup() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "group"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "group", paramGroup) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "group", parameterValue: paramGroup as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidPassword() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidFolder() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportShapesFromSvgInvalidStorage() {
        let expectation = self.expectation(description: "testimportShapesFromSvg")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramImage : Data = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "image", invalidFieldName: invalidFieldName, type: "Data")
        let paramX : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "x", invalidFieldName: invalidFieldName, type: "Int")
        let paramY : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "y", invalidFieldName: invalidFieldName, type: "Int")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "shapes", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramGroup : Bool = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "group", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "importShapesFromSvg", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("importShapesFromSvg", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.importShapesFromSvg(paramName, paramSlideIndex, paramImage, paramX, paramY, paramWidth, paramHeight, paramShapes, paramGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importShapesFromSvg", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMerge() {
        let expectation = self.expectation(description: "testmerge")
        let paramName : String = TestUtils.getTestValue(functionName: "merge", name: "name", type: "String")
        let paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "merge", name: "request", type: "PresentationsMergeRequest")
        let paramPassword : String = TestUtils.getTestValue(functionName: "merge", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "merge", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "merge", name: "storage", type: "String")
        TestUtils.initialize("merge") { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidName() {
        let expectation = self.expectation(description: "testmerge")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : PresentationsMergeRequest = TestUtils.getTestValueForInvalid(functionName: "merge", name: "request", invalidFieldName: invalidFieldName, type: "PresentationsMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("merge", "name", paramName) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidRequest() {
        let expectation = self.expectation(description: "testmerge")
        let invalidFieldName = "request"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : PresentationsMergeRequest = TestUtils.getTestValueForInvalid(functionName: "merge", name: "request", invalidFieldName: invalidFieldName, type: "PresentationsMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("merge", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidPassword() {
        let expectation = self.expectation(description: "testmerge")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : PresentationsMergeRequest = TestUtils.getTestValueForInvalid(functionName: "merge", name: "request", invalidFieldName: invalidFieldName, type: "PresentationsMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("merge", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidFolder() {
        let expectation = self.expectation(description: "testmerge")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : PresentationsMergeRequest = TestUtils.getTestValueForInvalid(functionName: "merge", name: "request", invalidFieldName: invalidFieldName, type: "PresentationsMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("merge", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidStorage() {
        let expectation = self.expectation(description: "testmerge")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : PresentationsMergeRequest = TestUtils.getTestValueForInvalid(functionName: "merge", name: "request", invalidFieldName: invalidFieldName, type: "PresentationsMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "merge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("merge", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMergeAndSaveOnline() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "outPath", type: "String")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "files", type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "request", type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "storage", type: "String")
        TestUtils.initialize("mergeAndSaveOnline") { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeAndSaveOnlineInvalidOutPath() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        let invalidFieldName = "outPath"
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("mergeAndSaveOnline", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeAndSaveOnline", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeAndSaveOnlineInvalidFiles() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        let invalidFieldName = "files"
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("mergeAndSaveOnline", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeAndSaveOnline", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeAndSaveOnlineInvalidRequest() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        let invalidFieldName = "request"
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("mergeAndSaveOnline", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeAndSaveOnline", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeAndSaveOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        let invalidFieldName = "storage"
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "mergeAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("mergeAndSaveOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeAndSaveOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMergeOnline() {
        let expectation = self.expectation(description: "testmergeOnline")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeOnline", name: "files", type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeOnline", name: "request", type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValue(functionName: "mergeOnline", name: "storage", type: "String")
        TestUtils.initialize("mergeOnline") { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeOnlineInvalidFiles() {
        let expectation = self.expectation(description: "testmergeOnline")
        let invalidFieldName = "files"
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("mergeOnline", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeOnline", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeOnlineInvalidRequest() {
        let expectation = self.expectation(description: "testmergeOnline")
        let invalidFieldName = "request"
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("mergeOnline", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeOnline", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testmergeOnline")
        let invalidFieldName = "storage"
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "mergeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("mergeOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveFile() {
        let expectation = self.expectation(description: "testmoveFile")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        TestUtils.initialize("moveFile") { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidSrcPath() {
        let expectation = self.expectation(description: "testmoveFile")
        let invalidFieldName = "srcPath"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFile", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidDestPath() {
        let expectation = self.expectation(description: "testmoveFile")
        let invalidFieldName = "destPath"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFile", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        let invalidFieldName = "srcStorageName"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFile", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidDestStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        let invalidFieldName = "destStorageName"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFile", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidVersionId() {
        let expectation = self.expectation(description: "testmoveFile")
        let invalidFieldName = "versionId"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "moveFile", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveFolder() {
        let expectation = self.expectation(description: "testmoveFolder")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        TestUtils.initialize("moveFolder") { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidSrcPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        let invalidFieldName = "srcPath"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFolder", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidDestPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        let invalidFieldName = "destPath"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFolder", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        let invalidFieldName = "srcStorageName"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFolder", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidDestStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        let invalidFieldName = "destStorageName"
        let paramSrcPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "srcPath", invalidFieldName: invalidFieldName, type: "String")
        let paramDestPath : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "destPath", invalidFieldName: invalidFieldName, type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "srcStorageName", invalidFieldName: invalidFieldName, type: "String")
        let paramDestStorageName : String = TestUtils.getTestValueForInvalid(functionName: "moveFolder", name: "destStorageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveFolder", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveSection() {
        let expectation = self.expectation(description: "testmoveSection")
        let paramName : String = TestUtils.getTestValue(functionName: "moveSection", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "moveSection", name: "sectionIndex", type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSection", name: "newPosition", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "moveSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "moveSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "moveSection", name: "storage", type: "String")
        TestUtils.initialize("moveSection") { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidName() {
        let expectation = self.expectation(description: "testmoveSection")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidSectionIndex() {
        let expectation = self.expectation(description: "testmoveSection")
        let invalidFieldName = "sectionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSection", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidNewPosition() {
        let expectation = self.expectation(description: "testmoveSection")
        let invalidFieldName = "newPosition"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSection", "newPosition", paramNewPosition) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "newPosition", parameterValue: paramNewPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidPassword() {
        let expectation = self.expectation(description: "testmoveSection")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidFolder() {
        let expectation = self.expectation(description: "testmoveSection")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidStorage() {
        let expectation = self.expectation(description: "testmoveSection")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveSlide() {
        let expectation = self.expectation(description: "testmoveSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "moveSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "slideIndex", type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "newPosition", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "moveSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "moveSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "moveSlide", name: "storage", type: "String")
        TestUtils.initialize("moveSlide") { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidName() {
        let expectation = self.expectation(description: "testmoveSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testmoveSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidNewPosition() {
        let expectation = self.expectation(description: "testmoveSlide")
        let invalidFieldName = "newPosition"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSlide", "newPosition", paramNewPosition) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "newPosition", parameterValue: paramNewPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidPassword() {
        let expectation = self.expectation(description: "testmoveSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidFolder() {
        let expectation = self.expectation(description: "testmoveSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidStorage() {
        let expectation = self.expectation(description: "testmoveSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "newPosition", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "moveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("moveSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testNotesSlideExists() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        let paramName : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExists", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "storage", type: "String")
        TestUtils.initialize("notesSlideExists") { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidName() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("notesSlideExists", "name", paramName) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("notesSlideExists", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidPassword() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("notesSlideExists", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidFolder() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("notesSlideExists", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidStorage() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExists", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("notesSlideExists", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testNotesSlideExistsOnline() {
        let expectation = self.expectation(description: "testnotesSlideExistsOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "password", type: "String")
        TestUtils.initialize("notesSlideExistsOnline") { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testnotesSlideExistsOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("notesSlideExistsOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExistsOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testnotesSlideExistsOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("notesSlideExistsOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExistsOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testnotesSlideExistsOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "notesSlideExistsOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("notesSlideExistsOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExistsOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testObjectExists() {
        let expectation = self.expectation(description: "testobjectExists")
        let paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        TestUtils.initialize("objectExists") { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidPath() {
        let expectation = self.expectation(description: "testobjectExists")
        let invalidFieldName = "path"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("objectExists", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidStorageName() {
        let expectation = self.expectation(description: "testobjectExists")
        let invalidFieldName = "storageName"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("objectExists", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidVersionId() {
        let expectation = self.expectation(description: "testobjectExists")
        let invalidFieldName = "versionId"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        let paramVersionId : String = TestUtils.getTestValueForInvalid(functionName: "objectExists", name: "versionId", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("objectExists", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testOrderedMerge() {
        let expectation = self.expectation(description: "testorderedMerge")
        let paramName : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "name", type: "String")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "orderedMerge", name: "request", type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "storage", type: "String")
        TestUtils.initialize("orderedMerge") { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidName() {
        let expectation = self.expectation(description: "testorderedMerge")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("orderedMerge", "name", paramName) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidRequest() {
        let expectation = self.expectation(description: "testorderedMerge")
        let invalidFieldName = "request"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("orderedMerge", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidPassword() {
        let expectation = self.expectation(description: "testorderedMerge")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("orderedMerge", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidFolder() {
        let expectation = self.expectation(description: "testorderedMerge")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("orderedMerge", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidStorage() {
        let expectation = self.expectation(description: "testorderedMerge")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "request", invalidFieldName: invalidFieldName, type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "orderedMerge", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("orderedMerge", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPipeline() {
        let expectation = self.expectation(description: "testpipeline")
        let paramPipeline : Pipeline = TestUtils.getTestValue(functionName: "pipeline", name: "pipeline", type: "Pipeline")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "pipeline", name: "files", type: "[Data]")
        TestUtils.initialize("pipeline") { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPipelineInvalidPipeline() {
        let expectation = self.expectation(description: "testpipeline")
        let invalidFieldName = "pipeline"
        let paramPipeline : Pipeline = TestUtils.getTestValueForInvalid(functionName: "pipeline", name: "pipeline", invalidFieldName: invalidFieldName, type: "Pipeline")
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "pipeline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        TestUtils.initialize("pipeline", "pipeline", paramPipeline) { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "pipeline", parameterName: "pipeline", parameterValue: paramPipeline as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPipelineInvalidFiles() {
        let expectation = self.expectation(description: "testpipeline")
        let invalidFieldName = "files"
        let paramPipeline : Pipeline = TestUtils.getTestValueForInvalid(functionName: "pipeline", name: "pipeline", invalidFieldName: invalidFieldName, type: "Pipeline")
        let paramFiles : [Data] = TestUtils.getTestValueForInvalid(functionName: "pipeline", name: "files", invalidFieldName: invalidFieldName, type: "[Data]")
        TestUtils.initialize("pipeline", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "pipeline", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReorderSlides() {
        let expectation = self.expectation(description: "testreorderSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "name", type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "oldPositions", type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "newPositions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "storage", type: "String")
        TestUtils.initialize("reorderSlides") { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidName() {
        let expectation = self.expectation(description: "testreorderSlides")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "oldPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "newPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("reorderSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidOldPositions() {
        let expectation = self.expectation(description: "testreorderSlides")
        let invalidFieldName = "oldPositions"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "oldPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "newPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("reorderSlides", "oldPositions", paramOldPositions) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "oldPositions", parameterValue: paramOldPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidNewPositions() {
        let expectation = self.expectation(description: "testreorderSlides")
        let invalidFieldName = "newPositions"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "oldPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "newPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("reorderSlides", "newPositions", paramNewPositions) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "newPositions", parameterValue: paramNewPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testreorderSlides")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "oldPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "newPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("reorderSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testreorderSlides")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "oldPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "newPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("reorderSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testreorderSlides")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "oldPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "newPositions", invalidFieldName: invalidFieldName, type: "[Int]")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "reorderSlides", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("reorderSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplaceFont() {
        let expectation = self.expectation(description: "testreplaceFont")
        let paramName : String = TestUtils.getTestValue(functionName: "replaceFont", name: "name", type: "String")
        let paramSourceFont : String = TestUtils.getTestValue(functionName: "replaceFont", name: "sourceFont", type: "String")
        let paramTargetFont : String = TestUtils.getTestValue(functionName: "replaceFont", name: "targetFont", type: "String")
        let paramEmbed : Bool = TestUtils.getTestValue(functionName: "replaceFont", name: "embed", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replaceFont", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "replaceFont", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "replaceFont", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "replaceFont", name: "fontsFolder", type: "String")
        TestUtils.initialize("replaceFont") { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontInvalidName() {
        let expectation = self.expectation(description: "testreplaceFont")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFont", "name", paramName) { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFont", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontInvalidSourceFont() {
        let expectation = self.expectation(description: "testreplaceFont")
        let invalidFieldName = "sourceFont"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFont", "sourceFont", paramSourceFont) { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFont", parameterName: "sourceFont", parameterValue: paramSourceFont as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontInvalidTargetFont() {
        let expectation = self.expectation(description: "testreplaceFont")
        let invalidFieldName = "targetFont"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFont", "targetFont", paramTargetFont) { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFont", parameterName: "targetFont", parameterValue: paramTargetFont as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontInvalidEmbed() {
        let expectation = self.expectation(description: "testreplaceFont")
        let invalidFieldName = "embed"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFont", "embed", paramEmbed) { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFont", parameterName: "embed", parameterValue: paramEmbed as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontInvalidPassword() {
        let expectation = self.expectation(description: "testreplaceFont")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFont", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFont", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontInvalidFolder() {
        let expectation = self.expectation(description: "testreplaceFont")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFont", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFont", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontInvalidStorage() {
        let expectation = self.expectation(description: "testreplaceFont")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFont", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFont", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontInvalidFontsFolder() {
        let expectation = self.expectation(description: "testreplaceFont")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFont", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.replaceFont(paramName, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFont", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplaceFontOnline() {
        let expectation = self.expectation(description: "testreplaceFontOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "replaceFontOnline", name: "document", type: "Data")
        let paramSourceFont : String = TestUtils.getTestValue(functionName: "replaceFontOnline", name: "sourceFont", type: "String")
        let paramTargetFont : String = TestUtils.getTestValue(functionName: "replaceFontOnline", name: "targetFont", type: "String")
        let paramEmbed : Bool = TestUtils.getTestValue(functionName: "replaceFontOnline", name: "embed", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replaceFontOnline", name: "password", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "replaceFontOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("replaceFontOnline") { (response, error) -> Void in
            SlidesAPI.replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testreplaceFontOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFontOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFontOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontOnlineInvalidSourceFont() {
        let expectation = self.expectation(description: "testreplaceFontOnline")
        let invalidFieldName = "sourceFont"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFontOnline", "sourceFont", paramSourceFont) { (response, error) -> Void in
            SlidesAPI.replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFontOnline", parameterName: "sourceFont", parameterValue: paramSourceFont as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontOnlineInvalidTargetFont() {
        let expectation = self.expectation(description: "testreplaceFontOnline")
        let invalidFieldName = "targetFont"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFontOnline", "targetFont", paramTargetFont) { (response, error) -> Void in
            SlidesAPI.replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFontOnline", parameterName: "targetFont", parameterValue: paramTargetFont as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontOnlineInvalidEmbed() {
        let expectation = self.expectation(description: "testreplaceFontOnline")
        let invalidFieldName = "embed"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFontOnline", "embed", paramEmbed) { (response, error) -> Void in
            SlidesAPI.replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFontOnline", parameterName: "embed", parameterValue: paramEmbed as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testreplaceFontOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFontOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFontOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceFontOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testreplaceFontOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSourceFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "sourceFont", invalidFieldName: invalidFieldName, type: "String")
        let paramTargetFont : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "targetFont", invalidFieldName: invalidFieldName, type: "String")
        let paramEmbed : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "embed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceFontOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.replaceFontOnline(paramDocument, paramSourceFont, paramTargetFont, paramEmbed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceFontOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplacePresentationText() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        TestUtils.initialize("replacePresentationText") { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidName() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationText", "name", paramName) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidOldValue() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let invalidFieldName = "oldValue"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationText", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidNewValue() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let invalidFieldName = "newValue"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationText", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let invalidFieldName = "ignoreCase"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidPassword() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidFolder() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationText", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidStorage() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationText", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplacePresentationTextOnline() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "document", type: "Data")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "password", type: "String")
        TestUtils.initialize("replacePresentationTextOnline") { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationTextOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidOldValue() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        let invalidFieldName = "oldValue"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationTextOnline", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidNewValue() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        let invalidFieldName = "newValue"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationTextOnline", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        let invalidFieldName = "ignoreCase"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationTextOnline", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replacePresentationTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replacePresentationTextOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplaceSlideText() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        TestUtils.initialize("replaceSlideText") { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidName() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideText", "name", paramName) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidSlideIndex() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideText", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidOldValue() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let invalidFieldName = "oldValue"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideText", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidNewValue() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let invalidFieldName = "newValue"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideText", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let invalidFieldName = "ignoreCase"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidPassword() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidFolder() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideText", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidStorage() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideText", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideText", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplaceSlideTextOnline() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", type: "Int")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "password", type: "String")
        TestUtils.initialize("replaceSlideTextOnline") { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidOldValue() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        let invalidFieldName = "oldValue"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidNewValue() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        let invalidFieldName = "newValue"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        let invalidFieldName = "ignoreCase"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOldValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "oldValue", invalidFieldName: invalidFieldName, type: "String")
        let paramNewValue : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "newValue", invalidFieldName: invalidFieldName, type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "ignoreCase", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "replaceSlideTextOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSavePortionAsMathMl() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let paramName : String = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "portionIndex", type: "Int")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "outPath", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "savePortionAsMathMl", name: "storage", type: "String")
        TestUtils.initialize("savePortionAsMathMl") { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidName() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "name", paramName) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidPortionIndex() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidOutPath() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "outPath"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidPassword() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidFolder() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePortionAsMathMlInvalidStorage() {
        let expectation = self.expectation(description: "testsavePortionAsMathMl")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePortionAsMathMl", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("savePortionAsMathMl", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.savePortionAsMathMl(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramOutPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePortionAsMathMl", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSavePresentation() {
        let expectation = self.expectation(description: "testsavePresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        let paramSlides : [Int] = TestUtils.getTestValue(functionName: "savePresentation", name: "slides", type: "[Int]")
        TestUtils.initialize("savePresentation") { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidName() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidFormat() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidOutPath() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "outPath"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidOptions() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidPassword() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidFolder() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidStorage() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidSlides() {
        let expectation = self.expectation(description: "testsavePresentation")
        let invalidFieldName = "slides"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSlides : [Int] = TestUtils.getTestValueForInvalid(functionName: "savePresentation", name: "slides", invalidFieldName: invalidFieldName, type: "[Int]")
        TestUtils.initialize("savePresentation", "slides", paramSlides) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSlides) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "slides", parameterValue: paramSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveShape() {
        let expectation = self.expectation(description: "testsaveShape")
        let paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "saveShape", name: "subShape", type: "String")
        TestUtils.initialize("saveShape") { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidName() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidFormat() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "outPath"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidOptions() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "scaleX"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "scaleY"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidBounds() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "bounds"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidPassword() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidFolder() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidStorage() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testsaveShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveShapeOnline() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "options", type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline") { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "shapeIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "outPath"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidScaleX() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "scaleX"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidScaleY() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "scaleY"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidBounds() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "bounds"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "storage"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidOptions() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let invalidFieldName = "options"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveShapeOnline", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        TestUtils.initialize("saveShapeOnline", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveSlide() {
        let expectation = self.expectation(description: "testsaveSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        TestUtils.initialize("saveSlide") { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidName() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidFormat() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "outPath"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidOptions() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidWidth() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "width"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidHeight() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "height"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidPassword() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidFolder() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidStorage() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveSlide")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlide", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSlide", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveSlideOnline() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "options", type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline") { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "slideIndex"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "outPath"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "width"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "height"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "storage"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidOptions() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let invalidFieldName = "options"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSlideOnline", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        TestUtils.initialize("saveSlideOnline", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder, paramOptions) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveSpecialSlideShape() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "outPath", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "fontsFolder", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "saveSpecialSlideShape", name: "subShape", type: "String")
        TestUtils.initialize("saveSpecialSlideShape") { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidSlideType() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidFormat() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "outPath"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidOptions() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "scaleX"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "scaleY"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidBounds() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "bounds"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSpecialSlideShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testsaveSpecialSlideShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramOutPath : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "outPath", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "options", invalidFieldName: invalidFieldName, type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleX", invalidFieldName: invalidFieldName, type: "Double")
        let paramScaleY : Double = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "scaleY", invalidFieldName: invalidFieldName, type: "Double")
        let paramBounds : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "bounds", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "saveSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("saveSpecialSlideShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.saveSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSpecialSlideShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetAnimation() {
        let expectation = self.expectation(description: "testsetAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "setAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setAnimation", name: "slideIndex", type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setAnimation", name: "animation", type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setAnimation", name: "storage", type: "String")
        TestUtils.initialize("setAnimation") { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidName() {
        let expectation = self.expectation(description: "testsetAnimation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetAnimation")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidAnimation() {
        let expectation = self.expectation(description: "testsetAnimation")
        let invalidFieldName = "animation"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setAnimation", "animation", paramAnimation) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "animation", parameterValue: paramAnimation as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testsetAnimation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testsetAnimation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testsetAnimation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetBackground() {
        let expectation = self.expectation(description: "testsetBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "setBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackground", name: "slideIndex", type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "setBackground", name: "background", type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setBackground", name: "storage", type: "String")
        TestUtils.initialize("setBackground") { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidName() {
        let expectation = self.expectation(description: "testsetBackground")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "background", invalidFieldName: invalidFieldName, type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetBackground")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "background", invalidFieldName: invalidFieldName, type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidBackground() {
        let expectation = self.expectation(description: "testsetBackground")
        let invalidFieldName = "background"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "background", invalidFieldName: invalidFieldName, type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackground", "background", paramBackground) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "background", parameterValue: paramBackground as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testsetBackground")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "background", invalidFieldName: invalidFieldName, type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testsetBackground")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "background", invalidFieldName: invalidFieldName, type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testsetBackground")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "background", invalidFieldName: invalidFieldName, type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackground", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetBackgroundColor() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        let paramName : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "slideIndex", type: "Int")
        let paramColor : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "color", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "storage", type: "String")
        TestUtils.initialize("setBackgroundColor") { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidName() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackgroundColor", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackgroundColor", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidColor() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        let invalidFieldName = "color"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackgroundColor", "color", paramColor) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "color", parameterValue: paramColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidPassword() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackgroundColor", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidFolder() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackgroundColor", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidStorage() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramColor : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "color", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setBackgroundColor", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setBackgroundColor", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetChartAxis() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let paramName : String = TestUtils.getTestValue(functionName: "setChartAxis", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setChartAxis", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "setChartAxis", name: "shapeIndex", type: "Int")
        let paramAxisType : String = TestUtils.getTestValue(functionName: "setChartAxis", name: "axisType", type: "String")
        let paramAxis : Axis = TestUtils.getTestValue(functionName: "setChartAxis", name: "axis", type: "Axis")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setChartAxis", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setChartAxis", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setChartAxis", name: "storage", type: "String")
        TestUtils.initialize("setChartAxis") { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartAxisInvalidName() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAxisType : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axisType", invalidFieldName: invalidFieldName, type: "String")
        let paramAxis : Axis = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axis", invalidFieldName: invalidFieldName, type: "Axis")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartAxis", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartAxis", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartAxisInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAxisType : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axisType", invalidFieldName: invalidFieldName, type: "String")
        let paramAxis : Axis = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axis", invalidFieldName: invalidFieldName, type: "Axis")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartAxis", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartAxis", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartAxisInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAxisType : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axisType", invalidFieldName: invalidFieldName, type: "String")
        let paramAxis : Axis = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axis", invalidFieldName: invalidFieldName, type: "Axis")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartAxis", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartAxis", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartAxisInvalidAxisType() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let invalidFieldName = "axisType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAxisType : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axisType", invalidFieldName: invalidFieldName, type: "String")
        let paramAxis : Axis = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axis", invalidFieldName: invalidFieldName, type: "Axis")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartAxis", "axisType", paramAxisType) { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartAxis", parameterName: "axisType", parameterValue: paramAxisType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartAxisInvalidAxis() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let invalidFieldName = "axis"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAxisType : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axisType", invalidFieldName: invalidFieldName, type: "String")
        let paramAxis : Axis = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axis", invalidFieldName: invalidFieldName, type: "Axis")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartAxis", "axis", paramAxis) { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartAxis", parameterName: "axis", parameterValue: paramAxis as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartAxisInvalidPassword() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAxisType : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axisType", invalidFieldName: invalidFieldName, type: "String")
        let paramAxis : Axis = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axis", invalidFieldName: invalidFieldName, type: "Axis")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartAxis", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartAxis", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartAxisInvalidFolder() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAxisType : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axisType", invalidFieldName: invalidFieldName, type: "String")
        let paramAxis : Axis = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axis", invalidFieldName: invalidFieldName, type: "Axis")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartAxis", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartAxis", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartAxisInvalidStorage() {
        let expectation = self.expectation(description: "testsetChartAxis")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramAxisType : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axisType", invalidFieldName: invalidFieldName, type: "String")
        let paramAxis : Axis = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "axis", invalidFieldName: invalidFieldName, type: "Axis")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartAxis", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartAxis", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setChartAxis(paramName, paramSlideIndex, paramShapeIndex, paramAxisType, paramAxis, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartAxis", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetChartLegend() {
        let expectation = self.expectation(description: "testsetChartLegend")
        let paramName : String = TestUtils.getTestValue(functionName: "setChartLegend", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setChartLegend", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "setChartLegend", name: "shapeIndex", type: "Int")
        let paramLegend : Legend = TestUtils.getTestValue(functionName: "setChartLegend", name: "legend", type: "Legend")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setChartLegend", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setChartLegend", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setChartLegend", name: "storage", type: "String")
        TestUtils.initialize("setChartLegend") { (response, error) -> Void in
            SlidesAPI.setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartLegendInvalidName() {
        let expectation = self.expectation(description: "testsetChartLegend")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramLegend : Legend = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "legend", invalidFieldName: invalidFieldName, type: "Legend")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartLegend", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartLegend", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartLegendInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetChartLegend")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramLegend : Legend = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "legend", invalidFieldName: invalidFieldName, type: "Legend")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartLegend", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartLegend", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartLegendInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsetChartLegend")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramLegend : Legend = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "legend", invalidFieldName: invalidFieldName, type: "Legend")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartLegend", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartLegend", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartLegendInvalidLegend() {
        let expectation = self.expectation(description: "testsetChartLegend")
        let invalidFieldName = "legend"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramLegend : Legend = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "legend", invalidFieldName: invalidFieldName, type: "Legend")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartLegend", "legend", paramLegend) { (response, error) -> Void in
            SlidesAPI.setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartLegend", parameterName: "legend", parameterValue: paramLegend as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartLegendInvalidPassword() {
        let expectation = self.expectation(description: "testsetChartLegend")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramLegend : Legend = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "legend", invalidFieldName: invalidFieldName, type: "Legend")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartLegend", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartLegend", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartLegendInvalidFolder() {
        let expectation = self.expectation(description: "testsetChartLegend")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramLegend : Legend = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "legend", invalidFieldName: invalidFieldName, type: "Legend")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartLegend", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartLegend", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartLegendInvalidStorage() {
        let expectation = self.expectation(description: "testsetChartLegend")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramLegend : Legend = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "legend", invalidFieldName: invalidFieldName, type: "Legend")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartLegend", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartLegend", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setChartLegend(paramName, paramSlideIndex, paramShapeIndex, paramLegend, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartLegend", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetChartSeriesGroup() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let paramName : String = TestUtils.getTestValue(functionName: "setChartSeriesGroup", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setChartSeriesGroup", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "setChartSeriesGroup", name: "shapeIndex", type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValue(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValue(functionName: "setChartSeriesGroup", name: "seriesGroup", type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setChartSeriesGroup", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setChartSeriesGroup", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setChartSeriesGroup", name: "storage", type: "String")
        TestUtils.initialize("setChartSeriesGroup") { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartSeriesGroupInvalidName() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroup", invalidFieldName: invalidFieldName, type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartSeriesGroup", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartSeriesGroup", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartSeriesGroupInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroup", invalidFieldName: invalidFieldName, type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartSeriesGroup", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartSeriesGroup", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartSeriesGroupInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroup", invalidFieldName: invalidFieldName, type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartSeriesGroup", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartSeriesGroup", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartSeriesGroupInvalidSeriesGroupIndex() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let invalidFieldName = "seriesGroupIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroup", invalidFieldName: invalidFieldName, type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartSeriesGroup", "seriesGroupIndex", paramSeriesGroupIndex) { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartSeriesGroup", parameterName: "seriesGroupIndex", parameterValue: paramSeriesGroupIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartSeriesGroupInvalidSeriesGroup() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let invalidFieldName = "seriesGroup"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroup", invalidFieldName: invalidFieldName, type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartSeriesGroup", "seriesGroup", paramSeriesGroup) { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartSeriesGroup", parameterName: "seriesGroup", parameterValue: paramSeriesGroup as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartSeriesGroupInvalidPassword() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroup", invalidFieldName: invalidFieldName, type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartSeriesGroup", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartSeriesGroup", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartSeriesGroupInvalidFolder() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroup", invalidFieldName: invalidFieldName, type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartSeriesGroup", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartSeriesGroup", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartSeriesGroupInvalidStorage() {
        let expectation = self.expectation(description: "testsetChartSeriesGroup")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroupIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroupIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesGroup : ChartSeriesGroup = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "seriesGroup", invalidFieldName: invalidFieldName, type: "ChartSeriesGroup")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartSeriesGroup", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartSeriesGroup", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setChartSeriesGroup(paramName, paramSlideIndex, paramShapeIndex, paramSeriesGroupIndex, paramSeriesGroup, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartSeriesGroup", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetChartWall() {
        let expectation = self.expectation(description: "testsetChartWall")
        let paramName : String = TestUtils.getTestValue(functionName: "setChartWall", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setChartWall", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "setChartWall", name: "shapeIndex", type: "Int")
        let paramChartWallType : String = TestUtils.getTestValue(functionName: "setChartWall", name: "chartWallType", type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValue(functionName: "setChartWall", name: "chartWall", type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setChartWall", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setChartWall", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setChartWall", name: "storage", type: "String")
        TestUtils.initialize("setChartWall") { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartWallInvalidName() {
        let expectation = self.expectation(description: "testsetChartWall")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramChartWallType : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWallType", invalidFieldName: invalidFieldName, type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWall", invalidFieldName: invalidFieldName, type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartWall", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartWall", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartWallInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetChartWall")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramChartWallType : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWallType", invalidFieldName: invalidFieldName, type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWall", invalidFieldName: invalidFieldName, type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartWall", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartWall", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartWallInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsetChartWall")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramChartWallType : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWallType", invalidFieldName: invalidFieldName, type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWall", invalidFieldName: invalidFieldName, type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartWall", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartWall", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartWallInvalidChartWallType() {
        let expectation = self.expectation(description: "testsetChartWall")
        let invalidFieldName = "chartWallType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramChartWallType : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWallType", invalidFieldName: invalidFieldName, type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWall", invalidFieldName: invalidFieldName, type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartWall", "chartWallType", paramChartWallType) { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartWall", parameterName: "chartWallType", parameterValue: paramChartWallType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartWallInvalidChartWall() {
        let expectation = self.expectation(description: "testsetChartWall")
        let invalidFieldName = "chartWall"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramChartWallType : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWallType", invalidFieldName: invalidFieldName, type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWall", invalidFieldName: invalidFieldName, type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartWall", "chartWall", paramChartWall) { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartWall", parameterName: "chartWall", parameterValue: paramChartWall as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartWallInvalidPassword() {
        let expectation = self.expectation(description: "testsetChartWall")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramChartWallType : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWallType", invalidFieldName: invalidFieldName, type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWall", invalidFieldName: invalidFieldName, type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartWall", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartWall", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartWallInvalidFolder() {
        let expectation = self.expectation(description: "testsetChartWall")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramChartWallType : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWallType", invalidFieldName: invalidFieldName, type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWall", invalidFieldName: invalidFieldName, type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartWall", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartWall", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetChartWallInvalidStorage() {
        let expectation = self.expectation(description: "testsetChartWall")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramChartWallType : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWallType", invalidFieldName: invalidFieldName, type: "String")
        let paramChartWall : ChartWall = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "chartWall", invalidFieldName: invalidFieldName, type: "ChartWall")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setChartWall", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setChartWall", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setChartWall(paramName, paramSlideIndex, paramShapeIndex, paramChartWallType, paramChartWall, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setChartWall", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetDocumentProperties() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "name", type: "String")
        let paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "properties", type: "DocumentProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("setDocumentProperties") { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramProperties : DocumentProperties = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "properties", invalidFieldName: invalidFieldName, type: "DocumentProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidProperties() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        let invalidFieldName = "properties"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramProperties : DocumentProperties = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "properties", invalidFieldName: invalidFieldName, type: "DocumentProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperties", "properties", paramProperties) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "properties", parameterValue: paramProperties as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramProperties : DocumentProperties = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "properties", invalidFieldName: invalidFieldName, type: "DocumentProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramProperties : DocumentProperties = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "properties", invalidFieldName: invalidFieldName, type: "DocumentProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramProperties : DocumentProperties = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "properties", invalidFieldName: invalidFieldName, type: "DocumentProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetDocumentProperty() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "propertyName", type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "property", type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("setDocumentProperty") { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "property", invalidFieldName: invalidFieldName, type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        let invalidFieldName = "propertyName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "property", invalidFieldName: invalidFieldName, type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidProperty() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        let invalidFieldName = "property"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "property", invalidFieldName: invalidFieldName, type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperty", "property", paramProperty) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "property", parameterValue: paramProperty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "property", invalidFieldName: invalidFieldName, type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "property", invalidFieldName: invalidFieldName, type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramPropertyName : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "propertyName", invalidFieldName: invalidFieldName, type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "property", invalidFieldName: invalidFieldName, type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setDocumentProperty", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetEmbeddedFont() {
        let expectation = self.expectation(description: "testsetEmbeddedFont")
        let paramName : String = TestUtils.getTestValue(functionName: "setEmbeddedFont", name: "name", type: "String")
        let paramFontName : String = TestUtils.getTestValue(functionName: "setEmbeddedFont", name: "fontName", type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValue(functionName: "setEmbeddedFont", name: "onlyUsed", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setEmbeddedFont", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setEmbeddedFont", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setEmbeddedFont", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "setEmbeddedFont", name: "fontsFolder", type: "String")
        TestUtils.initialize("setEmbeddedFont") { (response, error) -> Void in
            SlidesAPI.setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontInvalidName() {
        let expectation = self.expectation(description: "testsetEmbeddedFont")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFont", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFont", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontInvalidFontName() {
        let expectation = self.expectation(description: "testsetEmbeddedFont")
        let invalidFieldName = "fontName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFont", "fontName", paramFontName) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFont", parameterName: "fontName", parameterValue: paramFontName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontInvalidOnlyUsed() {
        let expectation = self.expectation(description: "testsetEmbeddedFont")
        let invalidFieldName = "onlyUsed"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFont", "onlyUsed", paramOnlyUsed) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFont", parameterName: "onlyUsed", parameterValue: paramOnlyUsed as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontInvalidPassword() {
        let expectation = self.expectation(description: "testsetEmbeddedFont")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFont", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFont", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontInvalidFolder() {
        let expectation = self.expectation(description: "testsetEmbeddedFont")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFont", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFont", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontInvalidStorage() {
        let expectation = self.expectation(description: "testsetEmbeddedFont")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFont", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFont", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsetEmbeddedFont")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFont", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFont", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFont(paramName, paramFontName, paramOnlyUsed, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFont", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetEmbeddedFontFromRequest() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequest")
        let paramFont : Data = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequest", name: "font", type: "Data")
        let paramName : String = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequest", name: "name", type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequest", name: "onlyUsed", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequest", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequest", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequest", name: "storage", type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequest") { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestInvalidFont() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequest")
        let invalidFieldName = "font"
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequest", "font", paramFont) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequest", parameterName: "font", parameterValue: paramFont as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestInvalidName() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequest")
        let invalidFieldName = "name"
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequest", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequest", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestInvalidOnlyUsed() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequest")
        let invalidFieldName = "onlyUsed"
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequest", "onlyUsed", paramOnlyUsed) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequest", parameterName: "onlyUsed", parameterValue: paramOnlyUsed as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestInvalidPassword() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequest")
        let invalidFieldName = "password"
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequest", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequest", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestInvalidFolder() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequest")
        let invalidFieldName = "folder"
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequest", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequest", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestInvalidStorage() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequest")
        let invalidFieldName = "storage"
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequest", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequest", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequest(paramFont, paramName, paramOnlyUsed, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequest", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetEmbeddedFontFromRequestOnline() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequestOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequestOnline", name: "document", type: "Data")
        let paramFont : Data = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequestOnline", name: "font", type: "Data")
        let paramOnlyUsed : Bool = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequestOnline", name: "onlyUsed", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setEmbeddedFontFromRequestOnline", name: "password", type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequestOnline") { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequestOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequestOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequestOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestOnlineInvalidFont() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequestOnline")
        let invalidFieldName = "font"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequestOnline", "font", paramFont) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequestOnline", parameterName: "font", parameterValue: paramFont as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestOnlineInvalidOnlyUsed() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequestOnline")
        let invalidFieldName = "onlyUsed"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequestOnline", "onlyUsed", paramOnlyUsed) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequestOnline", parameterName: "onlyUsed", parameterValue: paramOnlyUsed as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontFromRequestOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsetEmbeddedFontFromRequestOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFont : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "font", invalidFieldName: invalidFieldName, type: "Data")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontFromRequestOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontFromRequestOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontFromRequestOnline(paramDocument, paramFont, paramOnlyUsed, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontFromRequestOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetEmbeddedFontOnline() {
        let expectation = self.expectation(description: "testsetEmbeddedFontOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "setEmbeddedFontOnline", name: "document", type: "Data")
        let paramFontName : String = TestUtils.getTestValue(functionName: "setEmbeddedFontOnline", name: "fontName", type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValue(functionName: "setEmbeddedFontOnline", name: "onlyUsed", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setEmbeddedFontOnline", name: "password", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "setEmbeddedFontOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("setEmbeddedFontOnline") { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsetEmbeddedFontOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontOnlineInvalidFontName() {
        let expectation = self.expectation(description: "testsetEmbeddedFontOnline")
        let invalidFieldName = "fontName"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontOnline", "fontName", paramFontName) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontOnline", parameterName: "fontName", parameterValue: paramFontName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontOnlineInvalidOnlyUsed() {
        let expectation = self.expectation(description: "testsetEmbeddedFontOnline")
        let invalidFieldName = "onlyUsed"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontOnline", "onlyUsed", paramOnlyUsed) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontOnline", parameterName: "onlyUsed", parameterValue: paramOnlyUsed as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsetEmbeddedFontOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetEmbeddedFontOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsetEmbeddedFontOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFontName : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontName", invalidFieldName: invalidFieldName, type: "String")
        let paramOnlyUsed : Bool = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "onlyUsed", invalidFieldName: invalidFieldName, type: "Bool")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "setEmbeddedFontOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setEmbeddedFontOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.setEmbeddedFontOnline(paramDocument, paramFontName, paramOnlyUsed, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setEmbeddedFontOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetNotesSlideHeaderFooter() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setNotesSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetPresentationHeaderFooter() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "name", type: "String")
        let paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "dto", type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("setPresentationHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setPresentationHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetProtection() {
        let expectation = self.expectation(description: "testsetProtection")
        let paramName : String = TestUtils.getTestValue(functionName: "setProtection", name: "name", type: "String")
        let paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtection", name: "dto", type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setProtection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setProtection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setProtection", name: "storage", type: "String")
        TestUtils.initialize("setProtection") { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidName() {
        let expectation = self.expectation(description: "testsetProtection")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ProtectionProperties = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "dto", invalidFieldName: invalidFieldName, type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setProtection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidDto() {
        let expectation = self.expectation(description: "testsetProtection")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ProtectionProperties = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "dto", invalidFieldName: invalidFieldName, type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setProtection", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidPassword() {
        let expectation = self.expectation(description: "testsetProtection")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ProtectionProperties = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "dto", invalidFieldName: invalidFieldName, type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setProtection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidFolder() {
        let expectation = self.expectation(description: "testsetProtection")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ProtectionProperties = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "dto", invalidFieldName: invalidFieldName, type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setProtection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidStorage() {
        let expectation = self.expectation(description: "testsetProtection")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ProtectionProperties = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "dto", invalidFieldName: invalidFieldName, type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setProtection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setProtection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetProtectionOnline() {
        let expectation = self.expectation(description: "testsetProtectionOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "document", type: "Data")
        let paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "dto", type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "password", type: "String")
        TestUtils.initialize("setProtectionOnline") { (response, error) -> Void in
            SlidesAPI.setProtectionOnline(paramDocument, paramDto, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsetProtectionOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramDto : ProtectionProperties = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "dto", invalidFieldName: invalidFieldName, type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setProtectionOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.setProtectionOnline(paramDocument, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtectionOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionOnlineInvalidDto() {
        let expectation = self.expectation(description: "testsetProtectionOnline")
        let invalidFieldName = "dto"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramDto : ProtectionProperties = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "dto", invalidFieldName: invalidFieldName, type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setProtectionOnline", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setProtectionOnline(paramDocument, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtectionOnline", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsetProtectionOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramDto : ProtectionProperties = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "dto", invalidFieldName: invalidFieldName, type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setProtectionOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setProtectionOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setProtectionOnline(paramDocument, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtectionOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetSections() {
        let expectation = self.expectation(description: "testsetSections")
        let paramName : String = TestUtils.getTestValue(functionName: "setSections", name: "name", type: "String")
        let paramSections : Sections = TestUtils.getTestValue(functionName: "setSections", name: "sections", type: "Sections")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setSections", name: "storage", type: "String")
        TestUtils.initialize("setSections") { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidName() {
        let expectation = self.expectation(description: "testsetSections")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : Sections = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "sections", invalidFieldName: invalidFieldName, type: "Sections")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidSections() {
        let expectation = self.expectation(description: "testsetSections")
        let invalidFieldName = "sections"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : Sections = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "sections", invalidFieldName: invalidFieldName, type: "Sections")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSections", "sections", paramSections) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "sections", parameterValue: paramSections as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testsetSections")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : Sections = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "sections", invalidFieldName: invalidFieldName, type: "Sections")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testsetSections")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : Sections = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "sections", invalidFieldName: invalidFieldName, type: "Sections")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testsetSections")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSections : Sections = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "sections", invalidFieldName: invalidFieldName, type: "Sections")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSections", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetShapeGeometryPath() {
        let expectation = self.expectation(description: "testsetShapeGeometryPath")
        let paramName : String = TestUtils.getTestValue(functionName: "setShapeGeometryPath", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setShapeGeometryPath", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "setShapeGeometryPath", name: "shapeIndex", type: "Int")
        let paramDto : GeometryPaths = TestUtils.getTestValue(functionName: "setShapeGeometryPath", name: "dto", type: "GeometryPaths")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setShapeGeometryPath", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setShapeGeometryPath", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setShapeGeometryPath", name: "storage", type: "String")
        TestUtils.initialize("setShapeGeometryPath") { (response, error) -> Void in
            SlidesAPI.setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetShapeGeometryPathInvalidName() {
        let expectation = self.expectation(description: "testsetShapeGeometryPath")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : GeometryPaths = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "dto", invalidFieldName: invalidFieldName, type: "GeometryPaths")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setShapeGeometryPath", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setShapeGeometryPath", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetShapeGeometryPathInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetShapeGeometryPath")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : GeometryPaths = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "dto", invalidFieldName: invalidFieldName, type: "GeometryPaths")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setShapeGeometryPath", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setShapeGeometryPath", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetShapeGeometryPathInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsetShapeGeometryPath")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : GeometryPaths = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "dto", invalidFieldName: invalidFieldName, type: "GeometryPaths")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setShapeGeometryPath", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setShapeGeometryPath", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetShapeGeometryPathInvalidDto() {
        let expectation = self.expectation(description: "testsetShapeGeometryPath")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : GeometryPaths = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "dto", invalidFieldName: invalidFieldName, type: "GeometryPaths")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setShapeGeometryPath", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setShapeGeometryPath", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetShapeGeometryPathInvalidPassword() {
        let expectation = self.expectation(description: "testsetShapeGeometryPath")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : GeometryPaths = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "dto", invalidFieldName: invalidFieldName, type: "GeometryPaths")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setShapeGeometryPath", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setShapeGeometryPath", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetShapeGeometryPathInvalidFolder() {
        let expectation = self.expectation(description: "testsetShapeGeometryPath")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : GeometryPaths = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "dto", invalidFieldName: invalidFieldName, type: "GeometryPaths")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setShapeGeometryPath", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setShapeGeometryPath", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetShapeGeometryPathInvalidStorage() {
        let expectation = self.expectation(description: "testsetShapeGeometryPath")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : GeometryPaths = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "dto", invalidFieldName: invalidFieldName, type: "GeometryPaths")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setShapeGeometryPath", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setShapeGeometryPath", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setShapeGeometryPath(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setShapeGeometryPath", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetSlideHeaderFooter() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("setSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "dto", invalidFieldName: invalidFieldName, type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideHeaderFooter", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetSlideProperties() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "name", type: "String")
        let paramDto : SlideProperties = TestUtils.getTestValue(functionName: "setSlideProperties", name: "dto", type: "SlideProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "storage", type: "String")
        TestUtils.initialize("setSlideProperties") { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidName() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidDto() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetSlideShowProperties() {
        let expectation = self.expectation(description: "testsetSlideShowProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "setSlideShowProperties", name: "name", type: "String")
        let paramDto : SlideShowProperties = TestUtils.getTestValue(functionName: "setSlideShowProperties", name: "dto", type: "SlideShowProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setSlideShowProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setSlideShowProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setSlideShowProperties", name: "storage", type: "String")
        TestUtils.initialize("setSlideShowProperties") { (response, error) -> Void in
            SlidesAPI.setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideShowPropertiesInvalidName() {
        let expectation = self.expectation(description: "testsetSlideShowProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideShowProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideShowProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideShowProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideShowProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideShowPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testsetSlideShowProperties")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideShowProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideShowProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideShowProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideShowProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideShowPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testsetSlideShowProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideShowProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideShowProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideShowProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideShowProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideShowPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testsetSlideShowProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideShowProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideShowProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideShowProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideShowProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideShowPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testsetSlideShowProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : SlideShowProperties = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "dto", invalidFieldName: invalidFieldName, type: "SlideShowProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSlideShowProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSlideShowProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSlideShowProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideShowProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetSpecialSlideAnimation() {
        let expectation = self.expectation(description: "testsetSpecialSlideAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "setSpecialSlideAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSpecialSlideAnimation", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "setSpecialSlideAnimation", name: "slideType", type: "String")
        let paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setSpecialSlideAnimation", name: "animation", type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setSpecialSlideAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setSpecialSlideAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setSpecialSlideAnimation", name: "storage", type: "String")
        TestUtils.initialize("setSpecialSlideAnimation") { (response, error) -> Void in
            SlidesAPI.setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSpecialSlideAnimationInvalidName() {
        let expectation = self.expectation(description: "testsetSpecialSlideAnimation")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSpecialSlideAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSpecialSlideAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSpecialSlideAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetSpecialSlideAnimation")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSpecialSlideAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSpecialSlideAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSpecialSlideAnimationInvalidSlideType() {
        let expectation = self.expectation(description: "testsetSpecialSlideAnimation")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSpecialSlideAnimation", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSpecialSlideAnimation", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSpecialSlideAnimationInvalidAnimation() {
        let expectation = self.expectation(description: "testsetSpecialSlideAnimation")
        let invalidFieldName = "animation"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSpecialSlideAnimation", "animation", paramAnimation) { (response, error) -> Void in
            SlidesAPI.setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSpecialSlideAnimation", parameterName: "animation", parameterValue: paramAnimation as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSpecialSlideAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testsetSpecialSlideAnimation")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSpecialSlideAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSpecialSlideAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSpecialSlideAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testsetSpecialSlideAnimation")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSpecialSlideAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSpecialSlideAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSpecialSlideAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testsetSpecialSlideAnimation")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramAnimation : SlideAnimation = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "animation", invalidFieldName: invalidFieldName, type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setSpecialSlideAnimation", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setSpecialSlideAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSpecialSlideAnimation(paramName, paramSlideIndex, paramSlideType, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSpecialSlideAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetViewProperties() {
        let expectation = self.expectation(description: "testsetViewProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "name", type: "String")
        let paramDto : ViewProperties = TestUtils.getTestValue(functionName: "setViewProperties", name: "dto", type: "ViewProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "storage", type: "String")
        TestUtils.initialize("setViewProperties") { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidName() {
        let expectation = self.expectation(description: "testsetViewProperties")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ViewProperties = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "dto", invalidFieldName: invalidFieldName, type: "ViewProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setViewProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testsetViewProperties")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ViewProperties = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "dto", invalidFieldName: invalidFieldName, type: "ViewProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setViewProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testsetViewProperties")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ViewProperties = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "dto", invalidFieldName: invalidFieldName, type: "ViewProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setViewProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testsetViewProperties")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ViewProperties = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "dto", invalidFieldName: invalidFieldName, type: "ViewProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setViewProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testsetViewProperties")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramDto : ViewProperties = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "dto", invalidFieldName: invalidFieldName, type: "ViewProperties")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "setViewProperties", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("setViewProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSplit() {
        let expectation = self.expectation(description: "testsplit")
        let paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        let paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        TestUtils.initialize("split") { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidName() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "name", paramName) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidOptions() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "options"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidFormat() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "format"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidWidth() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "width"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidHeight() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "height"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidFrom() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "from"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidTo() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "to"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidDestFolder() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "destFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "destFolder", paramDestFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "destFolder", parameterValue: paramDestFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidPassword() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidFolder() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidStorage() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsplit")
        let invalidFieldName = "fontsFolder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValueForInvalid(functionName: "split", name: "options", invalidFieldName: invalidFieldName, type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "split", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "split", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("split", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSplitAndSaveOnline() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        let paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("splitAndSaveOnline") { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidDestFolder() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "destFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "destFolder", paramDestFolder) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "destFolder", parameterValue: paramDestFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "width"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "height"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidFrom() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "from"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidTo() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "to"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "storage"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramDestFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "destFolder", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitAndSaveOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSplitOnline() {
        let expectation = self.expectation(description: "testsplitOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("splitOnline") { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "document"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "format"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "width"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "height"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidFrom() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "from"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidTo() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "to"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "password"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "storage"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsplitOnline")
        let invalidFieldName = "fontsFolder"
        let paramDocument : Data = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "document", invalidFieldName: invalidFieldName, type: "Data")
        let paramFormat : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "format", invalidFieldName: invalidFieldName, type: "String")
        let paramWidth : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "width", invalidFieldName: invalidFieldName, type: "Int")
        let paramHeight : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "height", invalidFieldName: invalidFieldName, type: "Int")
        let paramFrom : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "from", invalidFieldName: invalidFieldName, type: "Int")
        let paramTo : Int = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "to", invalidFieldName: invalidFieldName, type: "Int")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramFontsFolder : String = TestUtils.getTestValueForInvalid(functionName: "splitOnline", name: "fontsFolder", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("splitOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testStorageExists() {
        let expectation = self.expectation(description: "teststorageExists")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String")
        TestUtils.initialize("storageExists") { (response, error) -> Void in
            SlidesAPI.storageExists(paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testStorageExistsInvalidStorageName() {
        let expectation = self.expectation(description: "teststorageExists")
        let invalidFieldName = "storageName"
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "storageExists", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("storageExists", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.storageExists(paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "storageExists", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateAnimationEffect() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("updateAnimationEffect") { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let invalidFieldName = "effectIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let invalidFieldName = "effect"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "sequenceIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "effectIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "effect"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateChartCategory() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        TestUtils.initialize("updateChartCategory") { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidCategoryIndex() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let invalidFieldName = "categoryIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartCategory", "categoryIndex", paramCategoryIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "categoryIndex", parameterValue: paramCategoryIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidCategory() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let invalidFieldName = "category"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartCategory", "category", paramCategory) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "category", parameterValue: paramCategory as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "categoryIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "category", invalidFieldName: invalidFieldName, type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartCategory", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateChartDataPoint() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("updateChartDataPoint") { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "seriesIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidPointIndex() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "pointIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "pointIndex", paramPointIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "pointIndex", parameterValue: paramPointIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidDataPoint() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "dataPoint"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "dataPoint", paramDataPoint) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "dataPoint", parameterValue: paramDataPoint as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "pointIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "dataPoint", invalidFieldName: invalidFieldName, type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartDataPoint", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateChartSeries() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        let paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        TestUtils.initialize("updateChartSeries") { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let invalidFieldName = "seriesIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartSeries", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidSeries() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let invalidFieldName = "series"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartSeries", "series", paramSeries) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "series", parameterValue: paramSeries as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "seriesIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSeries : Series = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "series", invalidFieldName: invalidFieldName, type: "Series")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateChartSeries", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateLayoutSlide() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideIndex", type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideDto", type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "storage", type: "String")
        TestUtils.initialize("updateLayoutSlide") { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateLayoutSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateLayoutSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidSlideDto() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        let invalidFieldName = "slideDto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateLayoutSlide", "slideDto", paramSlideDto) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "slideDto", parameterValue: paramSlideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateLayoutSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateLayoutSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateLayoutSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateLayoutSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateNotesSlide() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "slideIndex", type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "dto", type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("updateNotesSlide") { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidDto() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateNotesSlide", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "dto", invalidFieldName: invalidFieldName, type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateNotesSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateParagraph() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "subShape", type: "String")
        TestUtils.initialize("updateParagraph") { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidName() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidDto() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidSubShape() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateParagraph", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdatePortion() {
        let expectation = self.expectation(description: "testupdatePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "updatePortion", name: "subShape", type: "String")
        TestUtils.initialize("updatePortion") { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidName() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidDto() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidPassword() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidFolder() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidStorage() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidSubShape() {
        let expectation = self.expectation(description: "testupdatePortion")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updatePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updatePortion", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSection() {
        let expectation = self.expectation(description: "testupdateSection")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSection", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "updateSection", name: "sectionIndex", type: "Int")
        let paramSectionName : String = TestUtils.getTestValue(functionName: "updateSection", name: "sectionName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSection", name: "storage", type: "String")
        TestUtils.initialize("updateSection") { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidName() {
        let expectation = self.expectation(description: "testupdateSection")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidSectionIndex() {
        let expectation = self.expectation(description: "testupdateSection")
        let invalidFieldName = "sectionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSection", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidSectionName() {
        let expectation = self.expectation(description: "testupdateSection")
        let invalidFieldName = "sectionName"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSection", "sectionName", paramSectionName) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "sectionName", parameterValue: paramSectionName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSection")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSection")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSection")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSectionName : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "sectionName", invalidFieldName: invalidFieldName, type: "String")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSection", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateShape() {
        let expectation = self.expectation(description: "testupdateShape")
        let paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "updateShape", name: "subShape", type: "String")
        TestUtils.initialize("updateShape") { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidName() {
        let expectation = self.expectation(description: "testupdateShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidDto() {
        let expectation = self.expectation(description: "testupdateShape")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidPassword() {
        let expectation = self.expectation(description: "testupdateShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidFolder() {
        let expectation = self.expectation(description: "testupdateShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidStorage() {
        let expectation = self.expectation(description: "testupdateShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testupdateShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSlide() {
        let expectation = self.expectation(description: "testupdateSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSlide", name: "slideIndex", type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValue(functionName: "updateSlide", name: "slideDto", type: "Slide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSlide", name: "storage", type: "String")
        TestUtils.initialize("updateSlide") { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidName() {
        let expectation = self.expectation(description: "testupdateSlide")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "Slide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSlide")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "Slide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidSlideDto() {
        let expectation = self.expectation(description: "testupdateSlide")
        let invalidFieldName = "slideDto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "Slide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSlide", "slideDto", paramSlideDto) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "slideDto", parameterValue: paramSlideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSlide")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "Slide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSlide")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "Slide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSlide")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "slideDto", invalidFieldName: invalidFieldName, type: "Slide")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSlide", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSpecialSlideAnimationEffect() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationEffectInvalidSlideType() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationEffect", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let invalidFieldName = "effectIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let invalidFieldName = "effect"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationEffect(paramName, paramSlideIndex, paramSlideType, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSpecialSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSlideType() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "sequenceIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "effectIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "effect"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSpecialSlideAnimationInteractiveSequenceEffect")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramSequenceIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effectIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramEffect : Effect = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "effect", invalidFieldName: invalidFieldName, type: "Effect")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSlideType, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSpecialSlideParagraph() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "dto", type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "updateSpecialSlideParagraph", name: "subShape", type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph") { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidSlideType() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidDto() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideParagraphInvalidSubShape() {
        let expectation = self.expectation(description: "testupdateSpecialSlideParagraph")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "dto", invalidFieldName: invalidFieldName, type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideParagraph", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideParagraph", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideParagraph(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideParagraph", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSpecialSlidePortion() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "portionIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "dto", type: "Portion")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "updateSpecialSlidePortion", name: "subShape", type: "String")
        TestUtils.initialize("updateSpecialSlidePortion") { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidSlideType() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "paragraphIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "portionIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidDto() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlidePortionInvalidSubShape() {
        let expectation = self.expectation(description: "testupdateSpecialSlidePortion")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "paragraphIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "portionIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : Portion = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "dto", invalidFieldName: invalidFieldName, type: "Portion")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlidePortion", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlidePortion", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlidePortion(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlidePortion", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSpecialSlideShape() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "slideIndex", type: "Int")
        let paramSlideType : String = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "slideType", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "shapeIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "dto", type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "storage", type: "String")
        let paramSubShape : String = TestUtils.getTestValue(functionName: "updateSpecialSlideShape", name: "subShape", type: "String")
        TestUtils.initialize("updateSpecialSlideShape") { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "name"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "slideIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidSlideType() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "slideType"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "slideType", paramSlideType) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "slideType", parameterValue: paramSlideType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "shapeIndex"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidDto() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "dto"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "password"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "folder"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "storage"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSpecialSlideShapeInvalidSubShape() {
        let expectation = self.expectation(description: "testupdateSpecialSlideShape")
        let invalidFieldName = "subShape"
        let paramName : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "name", invalidFieldName: invalidFieldName, type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramSlideType : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "slideType", invalidFieldName: invalidFieldName, type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "shapeIndex", invalidFieldName: invalidFieldName, type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "dto", invalidFieldName: invalidFieldName, type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "password", invalidFieldName: invalidFieldName, type: "String")
        let paramFolder : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "folder", invalidFieldName: invalidFieldName, type: "String")
        let paramStorage : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "storage", invalidFieldName: invalidFieldName, type: "String")
        let paramSubShape : String = TestUtils.getTestValueForInvalid(functionName: "updateSpecialSlideShape", name: "subShape", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("updateSpecialSlideShape", "subShape", paramSubShape) { (response, error) -> Void in
            SlidesAPI.updateSpecialSlideShape(paramName, paramSlideIndex, paramSlideType, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage, paramSubShape) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSpecialSlideShape", parameterName: "subShape", parameterValue: paramSubShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUploadFile() {
        let expectation = self.expectation(description: "testuploadFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        let paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        TestUtils.initialize("uploadFile") { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidPath() {
        let expectation = self.expectation(description: "testuploadFile")
        let invalidFieldName = "path"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramFile : Data = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "file", invalidFieldName: invalidFieldName, type: "Data")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("uploadFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidFile() {
        let expectation = self.expectation(description: "testuploadFile")
        let invalidFieldName = "file"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramFile : Data = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "file", invalidFieldName: invalidFieldName, type: "Data")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("uploadFile", "file", paramFile) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "file", parameterValue: paramFile as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidStorageName() {
        let expectation = self.expectation(description: "testuploadFile")
        let invalidFieldName = "storageName"
        let paramPath : String = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "path", invalidFieldName: invalidFieldName, type: "String")
        let paramFile : Data = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "file", invalidFieldName: invalidFieldName, type: "Data")
        let paramStorageName : String = TestUtils.getTestValueForInvalid(functionName: "uploadFile", name: "storageName", invalidFieldName: invalidFieldName, type: "String")
        TestUtils.initialize("uploadFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
}
